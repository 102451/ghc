module Settings.Path (
    stageDirectory, buildPath, pkgDataFile, pkgHaddockFile, pkgLibraryFile,
    pkgLibraryFile0, pkgGhciLibraryFile, gmpBuildPath, gmpObjects, gmpLibraryH,
    gmpBuildInfoPath, generatedPath, libffiBuildPath, shakeFilesPath,
    pkgConfFile, packageDbDirectory, packageDbStamp, bootPackageConstraints,
    packageDependencies, objectPath, programInplacePath, programInplaceLibPath,
    installPath, autogenPath, pkgInplaceConfig
    ) where

import Base
import Context
import Expression
import GHC
import Oracles.PackageData
import UserSettings

-- | Path to the directory containing the Shake database and other auxiliary
-- files generated by Hadrian.
shakeFilesPath :: FilePath
shakeFilesPath = buildRootPath -/- "hadrian"

-- | Boot package versions extracted from @.cabal@ files.
bootPackageConstraints :: FilePath
bootPackageConstraints = shakeFilesPath -/- "boot-package-constraints"

-- | Dependencies between packages extracted from @.cabal@ files.
packageDependencies :: FilePath
packageDependencies = shakeFilesPath -/- "package-dependencies"

-- | Path to the directory containing generated source files that are not
-- package-specific, e.g. @ghcplatform.h@.
generatedPath :: FilePath
generatedPath = buildRootPath -/- "generated"

-- | Relative path to the directory containing build artefacts of a given 'Stage'.
stageDirectory :: Stage -> FilePath
stageDirectory = stageString

-- TODO: Move to buildRootPath, see #113.
-- | Directory for binaries that are built "in place".
programInplacePath :: FilePath
programInplacePath = "inplace/bin"

-- | Directory for binary wrappers, and auxiliary binaries such as @touchy@.
programInplaceLibPath :: FilePath
programInplaceLibPath = "inplace/lib/bin"

-- | Path to the directory containing build artefacts of a given 'Context'.
buildPath :: Context -> FilePath
buildPath Context {..} = buildRootPath -/- stageDirectory stage -/- pkgPath package

-- | Path to the autogen directory generated by @ghc-cabal@ of a given 'Context'.
autogenPath :: Context -> FilePath
autogenPath context@Context {..}
    | isLibrary package   = autogen "build"
    | package == ghc      = autogen "build/ghc"
    | package == hpcBin   = autogen "build/hpc"
    | package == iservBin = autogen "build/iserv"
    | otherwise           = autogen $ "build" -/- pkgNameString package
  where
    autogen dir = buildPath context -/- dir -/- "autogen"

-- | Path to inplace package configuration of a given 'Context'.
pkgInplaceConfig :: Context -> FilePath
pkgInplaceConfig context = buildPath context -/- "inplace-pkg-config"

-- | Path to the @package-data.mk@ of a given 'Context'.
pkgDataFile :: Context -> FilePath
pkgDataFile context = buildPath context -/- "package-data.mk"

-- | Path to the haddock file of a given 'Context', e.g.:
-- "_build/stage1/libraries/array/doc/html/array/array.haddock".
pkgHaddockFile :: Context -> FilePath
pkgHaddockFile context@Context {..} =
    buildPath context -/- "doc/html" -/- name -/- name <.> "haddock"
  where name = pkgNameString package

-- | Path to the library file of a given 'Context', e.g.:
-- "_build/stage1/libraries/array/build/libHSarray-0.5.1.0.a".
pkgLibraryFile :: Context -> Action FilePath
pkgLibraryFile context@Context {..} = do
    extension <- libsuf way
    pkgFile context "libHS" extension

-- | Path to the auxiliary library file of a given 'Context', e.g.:
-- "_build/stage1/compiler/build/libHSghc-8.1-0.a".
pkgLibraryFile0 :: Context -> Action FilePath
pkgLibraryFile0 context@Context {..} = do
    extension <- libsuf way
    pkgFile context "libHS" ("-0" ++ extension)

-- | Path to the GHCi library file of a given 'Context', e.g.:
-- "_build/stage1/libraries/array/build/HSarray-0.5.1.0.o".
pkgGhciLibraryFile :: Context -> Action FilePath
pkgGhciLibraryFile context = pkgFile context "HS" ".o"

pkgFile :: Context -> String -> String -> Action FilePath
pkgFile context prefix suffix = do
    let path = buildPath context
    componentId <- pkgData $ ComponentId path
    return $ path -/- prefix ++ componentId ++ suffix

-- | Build directory for in-tree GMP library.
gmpBuildPath :: FilePath
gmpBuildPath = buildRootPath -/- "stage1/gmp"

-- | Path to the GMP library header.
gmpLibraryH :: FilePath
gmpLibraryH = gmpBuildPath -/- "include/ghc-gmp.h"

-- | Path to the GMP library object files.
gmpObjects :: FilePath
gmpObjects = gmpBuildPath -/- "objs"

-- | Path to the GMP library buildinfo file.
gmpBuildInfoPath :: FilePath
gmpBuildInfoPath = pkgPath integerGmp -/- "integer-gmp.buildinfo"

-- | Build directory for in-tree libffi library.
libffiBuildPath :: FilePath
libffiBuildPath = buildRootPath -/- "stage1/libffi"

-- TODO: Move to buildRootPath, see #113.
-- | Path to package database directory of a given 'Stage'. Note: StageN, N > 0,
-- share the same packageDbDirectory.
packageDbDirectory :: Stage -> FilePath
packageDbDirectory Stage0 = buildRootPath -/- "stage0/bootstrapping.conf"
packageDbDirectory _      = "inplace/lib/package.conf.d"

-- | We use a stamp file to track the existence of a package database.
packageDbStamp :: Stage -> FilePath
packageDbStamp stage = packageDbDirectory stage -/- ".stamp"

-- | Path to the configuration file of a given 'Context'.
pkgConfFile :: Context -> Action FilePath
pkgConfFile context@Context {..} = do
    componentId <- pkgData . ComponentId $ buildPath context
    return $ packageDbDirectory stage -/- componentId <.> "conf"

-- | Given a 'FilePath' to a source file, return 'True' if it is generated.
-- The current implementation simply assumes that a file is generated if it
-- lives in 'buildRootPath'. Since most files are not generated the test is
-- usually very fast.
isGeneratedSource :: FilePath -> Bool
isGeneratedSource = (buildRootPath `isPrefixOf`)

-- | Given a 'Context' and a 'FilePath' to a source file, compute the 'FilePath'
-- to its object file. For example:
-- * "Task.c"                              -> "_build/stage1/rts/Task.thr_o"
-- * "_build/stage1/rts/cmm/AutoApply.cmm" -> "_build/stage1/rts/cmm/AutoApply.o"
objectPath :: Context -> FilePath -> FilePath
objectPath context@Context {..} src
    | isGeneratedSource src = obj
    | "*hs*" ?== extension  = buildPath context -/- obj
    | otherwise             = buildPath context -/- extension -/- obj
  where
    extension = drop 1 $ takeExtension src
    obj       = src -<.> osuf way

-- | Given a 'Package', return the path where the corresponding program is
-- installed. Most programs are installed in 'programInplacePath'.
installPath :: Package -> FilePath
installPath pkg
    | pkg == touchy = programInplaceLibPath
    | pkg == unlit  = programInplaceLibPath
    | otherwise     = programInplacePath
