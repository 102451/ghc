
<interactive>:2:1: error:
    • Ambiguous type variable ‘f0’ arising from a use of ‘<$>’
      prevents the constraint ‘(Functor f0)’ from being solved.
      Relevant bindings include
        it :: f0 (Maybe a) (bound at <interactive>:2:1)
      Probable fix: use a type annotation to specify what ‘f0’ should be.
      These potential instances exist:
        instance Functor (Either a) -- Defined in ‘Data.Either’
        instance Functor IO -- Defined in ‘GHC.Base’
        instance Functor Maybe -- Defined in ‘GHC.Base’
        ...plus two others
        ...plus 34 instances involving out-of-scope types
        (use -fprint-potential-instances to see them all)
    • In the expression: Just <$> _
      In an equation for ‘it’: it = Just <$> _

<interactive>:2:10: error:
    • Found hole: _ :: f0 a
      Where: ‘f0’ is an ambiguous type variable
             ‘a’ is a rigid type variable bound by
               the inferred type of it :: f0 (Maybe a)
               at <interactive>:2:1-10
    • In the second argument of ‘(<$>)’, namely ‘_’
      In the expression: Just <$> _
      In an equation for ‘it’: it = Just <$> _
    • Relevant bindings include
        it :: f0 (Maybe a) (bound at <interactive>:2:1)
      Valid substitutions include
        error :: forall a. GHC.Stack.Types.HasCallStack => [Char] -> a
          (imported from ‘Prelude’ (and originally defined in ‘GHC.Err’))
        errorWithoutStackTrace :: forall a. [Char] -> a
          (imported from ‘Prelude’ (and originally defined in ‘GHC.Err’))
        Nothing :: forall a. Maybe a
          (imported from ‘Prelude’ (and originally defined in ‘GHC.Base’))
