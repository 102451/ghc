
mc14.hs:14:16: error:
    • Ambiguous type variable ‘m0’ arising from a statement in a monad comprehension
      prevents the constraint ‘(Monad m0)’ from being solved.
      Relevant bindings include output :: m0 () (bound at mc14.hs:14:1)
      Probable fix: use a type annotation to specify what ‘m0’ should be.
      These potential instances exist:
        instance Monad IO -- Defined in ‘GHC.Base’
        instance Monad Maybe -- Defined in ‘GHC.Base’
        instance Monoid a => Monad ((,) a) -- Defined in ‘GHC.Base’
        ...plus one other
        ...plus two instances involving out-of-scope types
        (use -fprint-potential-instances to see them all)
    • In a stmt of a monad comprehension: then group using f
      In the expression: [() | f <- functions, then group using f]
      In an equation for ‘output’:
          output = [() | f <- functions, then group using f]

mc14.hs:14:16: error:
    • Ambiguous type variable ‘t0’ arising from a use of ‘fmap’
      prevents the constraint ‘(Functor t0)’ from being solved.
      Probable fix: use a type annotation to specify what ‘t0’ should be.
      These potential instances exist:
        instance Functor IO -- Defined in ‘GHC.Base’
        instance Functor Maybe -- Defined in ‘GHC.Base’
        instance Functor ((,) a) -- Defined in ‘GHC.Base’
        ...plus one other
        ...plus two instances involving out-of-scope types
        (use -fprint-potential-instances to see them all)
    • In the expression: fmap
      In a stmt of a monad comprehension: then group using f
      In the expression: [() | f <- functions, then group using f]

mc14.hs:14:49: error: Variable not in scope: f :: [a] -> m0 (t0 a)
