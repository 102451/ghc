
==================== Typechecker ====================
{Bag(Located (HsBind Var)):
[
 ({ <no location info> }
  (VarBind
   (()) {Var: (main:DumpTypecheckedAst.$tcPeano{v} [lidx] :: ghc-prim:GHC.Types.TyCon{tc})}
   ({ <no location info> }
    (App
     (())
     ({ <no location info> }
      (App
       (())
       ({ <no location info> }
        (App
         (())
         ({ <no location info> }
          (App
           (())
           ({ <no location info> }
            (App
             (())
             ({ <no location info> }
              (App
               (())
               ({ <no location info> }
                (NewExpr
                 (NHsConLikeOut
                  ({abstract:ConLike}))))
               ({ <no location info> }
                (Lit
                 (())
                 {HsWord{64}Prim
                 (14073232900889011755)
                 (NoSourceText)}))))
             ({ <no location info> }
              (Lit
               (())
               {HsWord{64}Prim
               (2739668351064589274)
               (NoSourceText)}))))
           ({ <no location info> }
            (Var
             (())
             ({ <no location info> }{Var: (main:DumpTypecheckedAst.$trModule{v} [lidx] :: ghc-prim:GHC.Types.Module{tc})})))))
         ({ <no location info> }
          (Par
           (())
           ({ <no location info> }
            (App
             (())
             ({ <no location info> }
              (NewExpr
               (NHsConLikeOut
                ({abstract:ConLike}))))
             ({ <no location info> }
              (Lit
               (())
               (StringPrim
                (NoSourceText) "Peano")))))))))
       ({ <no location info> }
        (Lit
         (())
         {HsInt{64}Prim
         (0)
         (SourceText "0")}))))
     ({ <no location info> }
      (Var
       (())
       ({ <no location info> }{Var: (ghc-prim:GHC.Types.krep$*{v} [gid] :: ghc-prim:GHC.Types.KindRep{tc})})))))
   (False))),
 ({ <no location info> }
  (VarBind
   (()) {Var: (main:DumpTypecheckedAst.$tc'Zero{v} [lidx] :: ghc-prim:GHC.Types.TyCon{tc})}
   ({ <no location info> }
    (App
     (())
     ({ <no location info> }
      (App
       (())
       ({ <no location info> }
        (App
         (())
         ({ <no location info> }
          (App
           (())
           ({ <no location info> }
            (App
             (())
             ({ <no location info> }
              (App
               (())
               ({ <no location info> }
                (NewExpr
                 (NHsConLikeOut
                  ({abstract:ConLike}))))
               ({ <no location info> }
                (Lit
                 (())
                 {HsWord{64}Prim
                 (13760111476013868540)
                 (NoSourceText)}))))
             ({ <no location info> }
              (Lit
               (())
               {HsWord{64}Prim
               (12314848029315386153)
               (NoSourceText)}))))
           ({ <no location info> }
            (Var
             (())
             ({ <no location info> }{Var: (main:DumpTypecheckedAst.$trModule{v} [lidx] :: ghc-prim:GHC.Types.Module{tc})})))))
         ({ <no location info> }
          (Par
           (())
           ({ <no location info> }
            (App
             (())
             ({ <no location info> }
              (NewExpr
               (NHsConLikeOut
                ({abstract:ConLike}))))
             ({ <no location info> }
              (Lit
               (())
               (StringPrim
                (NoSourceText) "'Zero")))))))))
       ({ <no location info> }
        (Lit
         (())
         {HsInt{64}Prim
         (0)
         (SourceText "0")}))))
     ({ <no location info> }
      (Var
       (())
       ({ <no location info> }{Var: ($krep{v} [lid] :: ghc-prim:GHC.Types.KindRep{tc})})))))
   (False))),
 ({ <no location info> }
  (VarBind
   (()) {Var: (main:DumpTypecheckedAst.$tc'Succ{v} [lidx] :: ghc-prim:GHC.Types.TyCon{tc})}
   ({ <no location info> }
    (App
     (())
     ({ <no location info> }
      (App
       (())
       ({ <no location info> }
        (App
         (())
         ({ <no location info> }
          (App
           (())
           ({ <no location info> }
            (App
             (())
             ({ <no location info> }
              (App
               (())
               ({ <no location info> }
                (NewExpr
                 (NHsConLikeOut
                  ({abstract:ConLike}))))
               ({ <no location info> }
                (Lit
                 (())
                 {HsWord{64}Prim
                 (1143980031331647856)
                 (NoSourceText)}))))
             ({ <no location info> }
              (Lit
               (())
               {HsWord{64}Prim
               (14802086722010293686)
               (NoSourceText)}))))
           ({ <no location info> }
            (Var
             (())
             ({ <no location info> }{Var: (main:DumpTypecheckedAst.$trModule{v} [lidx] :: ghc-prim:GHC.Types.Module{tc})})))))
         ({ <no location info> }
          (Par
           (())
           ({ <no location info> }
            (App
             (())
             ({ <no location info> }
              (NewExpr
               (NHsConLikeOut
                ({abstract:ConLike}))))
             ({ <no location info> }
              (Lit
               (())
               (StringPrim
                (NoSourceText) "'Succ")))))))))
       ({ <no location info> }
        (Lit
         (())
         {HsInt{64}Prim
         (0)
         (SourceText "0")}))))
     ({ <no location info> }
      (Var
       (())
       ({ <no location info> }{Var: ($krep{v} [lid] :: ghc-prim:GHC.Types.KindRep{tc})})))))
   (False))),
 ({ <no location info> }
  (VarBind
   (()) {Var: ($krep{v} [lid] :: ghc-prim:GHC.Types.KindRep{tc})}
   ({ <no location info> }
    (App
     (())
     ({ <no location info> }
      (App
       (())
       ({ <no location info> }
        (NewExpr
         (NHsConLikeOut
          ({abstract:ConLike}))))
       ({ <no location info> }
        (Var
         (())
         ({ <no location info> }{Var: ($krep{v} [lid] :: ghc-prim:GHC.Types.KindRep{tc})})))))
     ({ <no location info> }
      (Var
       (())
       ({ <no location info> }{Var: ($krep{v} [lid] :: ghc-prim:GHC.Types.KindRep{tc})})))))
   (False))),
 ({ <no location info> }
  (VarBind
   (()) {Var: ($krep{v} [lid] :: ghc-prim:GHC.Types.KindRep{tc})}
   ({ <no location info> }
    (App
     (())
     ({ <no location info> }
      (App
       (())
       ({ <no location info> }
        (NewExpr
         (NHsConLikeOut
          ({abstract:ConLike}))))
       ({ <no location info> }
        (Var
         (())
         ({ <no location info> }{Var: (main:DumpTypecheckedAst.$tcPeano{v} [lidx] :: ghc-prim:GHC.Types.TyCon{tc})})))))
     ({ <no location info> }
      (NewExpr
       (NHsWrap
        (WpTyApp
         (TyConApp
          ({abstract:TyCon})
          []))
        (NewExpr
         (NHsConLikeOut
          ({abstract:ConLike}))))))))
   (False))),
 ({ <no location info> }
  (VarBind
   (()) {Var: (main:DumpTypecheckedAst.$trModule{v} [lidx] :: ghc-prim:GHC.Types.Module{tc})}
   ({ <no location info> }
    (App
     (())
     ({ <no location info> }
      (App
       (())
       ({ <no location info> }
        (NewExpr
         (NHsConLikeOut
          ({abstract:ConLike}))))
       ({ <no location info> }
        (Par
         (())
         ({ <no location info> }
          (App
           (())
           ({ <no location info> }
            (NewExpr
             (NHsConLikeOut
              ({abstract:ConLike}))))
           ({ <no location info> }
            (Lit
             (())
             (StringPrim
              (NoSourceText) "main")))))))))
     ({ <no location info> }
      (Par
       (())
       ({ <no location info> }
        (App
         (())
         ({ <no location info> }
          (NewExpr
           (NHsConLikeOut
            ({abstract:ConLike}))))
         ({ <no location info> }
          (Lit
           (())
           (StringPrim
            (NoSourceText) "DumpTypecheckedAst")))))))))
   (False))),
 ({ DumpTypecheckedAst.hs:11:1-23 }
  (NewBindLR
   (NAbsBinds
    []
    []
    [
     (ABE {Var: (main:DumpTypecheckedAst.main{v} [lid] :: ghc-prim:GHC.Types.IO{tc}
                                            ())} {Var: (main{v} [lid] :: ghc-prim:GHC.Types.IO{tc} ())}
      (WpHole)
      (SpecPrags
       []))]
    [
     ({abstract:TcEvBinds})] {Bag(Located (HsBind Var)):
    [
     ({ DumpTypecheckedAst.hs:11:1-23 }
      (FunBind
       ((,,)
        (WpHole) {NameSet:
        []}
        [])
       ({ DumpTypecheckedAst.hs:11:1-4 }{Var: (main{v} [lid] :: ghc-prim:GHC.Types.IO{tc} ())})
       (MG
        ((,)
         []
         (TyConApp
          ({abstract:TyCon})
          [
           (TyConApp
            ({abstract:TyCon})
            [])]))
        ({ DumpTypecheckedAst.hs:11:1-23 }
         [
          ({ DumpTypecheckedAst.hs:11:1-23 }
           (Match
            (())
            (FunRhs
             ({ DumpTypecheckedAst.hs:11:1-4 }{Name: main:DumpTypecheckedAst.main{v}})
             (Prefix)
             (NoSrcStrict))
            []
            (Nothing)
            (GRHSs
             (())
             [
              ({ DumpTypecheckedAst.hs:11:6-23 }
               (GRHS
                (())
                []
                ({ DumpTypecheckedAst.hs:11:8-23 }
                 (App
                  (())
                  ({ DumpTypecheckedAst.hs:11:8-15 }
                   (Var
                    (())
                    ({ <no location info> }{Var: (base:System.IO.putStrLn{v} [gid] :: base:GHC.Base.String{tc}
                                     -> ghc-prim:GHC.Types.IO{tc} ())})))
                  ({ DumpTypecheckedAst.hs:11:17-23 }
                   (Lit
                    (())
                    (String
                     (SourceText "/"hello/"") {FastString: "hello"})))))))]
             ({ <no location info> }
              (EmptyLocalBinds
               (()))))))])
        (FromSource))))]}
    (False))))]}