\begin{code}
module TcSplice where
import HsSyn	( HsSplice, HsBracket, HsQuasiQuote,
                  HsExpr, HsType, LHsType, LHsExpr, LPat, LHsDecl )
import Name	( Name )
import NameSet	( FreeVars )
import RdrName	( RdrName )
import TcRnTypes( TcM, TcId )
import TcType	( BoxyRhoType, TcKind )
import Annotations ( Annotation, CoreAnnTarget )
import qualified Language.Haskell.TH as TH

tcSpliceExpr :: HsSplice Name
	     -> BoxyRhoType
	     -> TcM (HsExpr TcId)

kcSpliceType :: HsSplice Name -> FreeVars
	     -> TcM (HsType Name, TcKind)

tcBracket :: HsBracket Name 
	  -> BoxyRhoType
	  -> TcM (LHsExpr TcId)

tcSpliceDecls :: LHsExpr Name -> TcM [LHsDecl RdrName]

lookupThName_maybe :: TH.Name -> TcM (Maybe Name)

runQuasiQuoteDecl :: HsQuasiQuote RdrName -> TcM [LHsDecl RdrName]
runQuasiQuoteExpr :: HsQuasiQuote RdrName -> TcM (LHsExpr RdrName)
runQuasiQuoteType :: HsQuasiQuote RdrName -> TcM (LHsType RdrName)
runQuasiQuotePat  :: HsQuasiQuote RdrName -> TcM (LPat RdrName)
runAnnotation     :: CoreAnnTarget -> LHsExpr Name -> TcM Annotation
\end{code}
