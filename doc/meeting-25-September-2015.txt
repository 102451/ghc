Shaking up GHC meeting, 25 September 2015

Things to discuss:
================================================

1. Progress report
------------------

Done:
* Build all libraries and compiler
* Generate code (alex, happy, hsc2hs, genprimopcode, Config.hs, ghc_boot_platform.h)
* Track changes in the build system
* Extract accurate package dependencies from .cabal files
* Improve complexity when searching for module files (40x)

Todo:                                   Target:
* Build utils, rts & put in GHC tree    October
* Better dependencies (.hs-incl etc.)   November
* Support command line options          December
* Validate                              November-December
* Documentation                         December-January
* Journal paper + provenance			December-February

Notes:
* Zero build: under 7 seconds
* Full build (when compilation not required): under 12 minutes on 4 cores
* Limited parallelism: ghc-cabal/ghc-pkg not thread-safe, ghc fails on > 4 cores
* Codebase growing: 50 files

Things to do:
-- Use OrderOnly for ordering ghc-cabal's
-- Fix parallel invokations of ghc-cabal
-- Fix GHC -M to handle .hs-incl (--make already knows how to do that) instead of writing a new parser. Maybe already done -- find a flag!
-- Rename files -> outputs, sources -> inputs
-- Start separating general bits from GHC bits. A separate package for Args maybe
-- Look up Bazel and Buck
-- Decompose args into builder-specific and package-specific

2. Seemingly dead-code
----------------------

I used to carefully migrate all code to the new build system even when it seemed dead, but this is often getting in the way of readability. New proposal: drop all such suspicious instances and bring them back only if/when things break. 

Example (generating primops.txt):

C:/msys/home/chEEtah/ghc/inplace/mingw/bin/gcc.exe -E -undef -traditional -P -Iincludes -Iincludes/dist -Iincludes/dist-derivedconstants/header -Iincludes/dist-ghcconstants/header  -Icompiler/stage2 -x c compiler/prelude/primops.txt.pp | grep -v '^#pragma GCC' > compiler/stage2/build/primops.txt

But primops.txt.pp has no lines containing #pragma GCC. Dead code?

Another example (generating ghc_boot_platform.h):

ifeq "$(TargetOS_CPP)" "irix"
    @echo "#ifndef $(IRIX_MAJOR)_TARGET_OS"                   >> $@
    @echo "#define $(IRIX_MAJOR)_TARGET_OS 1"                 >> $@
    @echo "#endif"                                            >> $@
endif

But IRIX_MAJOR is never set anywhere in the build system. Dead code? YES


3. Command line options
-----------------------

Discuss the need for command line options, e.g. 'make GhcDebugged=YES'. Do we need to  support all options as in the old build system?

Settings.User is fairly readable, so perhaps some options may be changeable only by editing this file and recompiling the build system (typically takes negligible time compared to building). This will simplify things. Can we come up with a must-have list for command line options?

-- Try to support these first:
* EXTRA_HC_OPTS = file "asd" ? arg ".."
* EXTRA_CC_OPTS 
* GhcDebugged = True
* make 2


4. Better names for build stages
--------------------------------

Currently we have Stage0, Stage1, etc. It is not particularly clear from the names what they stand for (as a newcomer to the build system I used to look up what these numbers stand for all the time). Shall we use this opportunity to pick more helpful names, for example:

Stage0 -> Boot    
Stage1 -> Interim 
Stage2 -> Install 
Stage3 -> Selftest


5. Do we need a name for the new build system?
----------------------------------------------

* At least we need a name for the folder in the GHC tree.

* If we call it 'shake' there may be a confusion with the Shake library.

* In future discussions/announcements/etc. calling it 'the new shake-based
  build system' is overly verbose. Calling it 'shake' is confusing.

* I haven't thought about any names yet, just checking whether we want to. 

-- Use mk2