#!/bin/sh

set -e

top_dirs="nofib testsuite"

default_repo_root="http://darcs.haskell.org/ghc-6.6/"
default_lib_repo_root=$default_repo_root/packages

quiet=NO

message()
{
  if [ "$quiet" = "NO" ]; then
     echo $*
  fi
}

darcsall()
{
  message "== running darcs $* at the top level"
  darcs $*
  for dir in $top_dirs; do
    if test -d $dir -a -d $dir/_darcs; then
	message "== running darcs $* in $dir"
	darcs $* --repodir $dir
    else
	message "== $dir not present or not a repository; skipping"
    fi
  done
  for pkg in `cat libraries/core-packages libraries/extra-packages`; do
    if test -d libraries/$pkg; then
	message "== running darcs $* in libraries/$pkg"
	darcs $* --repodir libraries/$pkg
    else
	echo "warning: $pkg doesn't seem to exist, use 'darcs-all get' to get it"
    fi
  done
}

darcsget()
{
  case $* in
    *--partial*) ;;
    *) echo "warning: adding --partial, to override use --complete"
  esac

  repo_root=`cat _darcs/prefs/defaultrepo`
  case $repo_root in
    /*) lib_repos=$repo_root/libraries;;
    *)  lib_repos=$default_lib_repo_root;;
  esac

  cd libraries

  if test "$extra" = "YES"; then
      packages=`cat core-packages extra-packages`
  else
      packages=`cat core-packages`
  fi

  for pkg in $packages; do
    if test -d $pkg; then
	echo "warning: $pkg already present; omitting"
    else
	repo=$lib_repos/$pkg
	message "== running darcs get --partial $* $repo"
	darcs get --partial $* $repo
    fi
  done
}

if test ! -d _darcs -o ! -d compiler; then
  echo "error: darcs-all must be run from the top level of the ghc tree."
  exit 1;
fi

case $* in
  *-q*) quiet=YES;;
esac

# --extra says we grab the extra libs with 'get'.  It has no effect on
# the other commands.
extra=NO;
case $1 in
  --extra) shift; extra=YES;
esac

case $1 in
  get)  shift; darcsget $*;;
  # Hack around whatsnew failing if there are no changes
  w|wh|wha|what|whats|whatsn|whatsne|whatsnew) set +e; darcsall $*;;
  *) darcsall $*;;
esac
