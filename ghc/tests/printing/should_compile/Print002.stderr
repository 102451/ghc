==================== Typechecked ====================
MkFoo1{-rk,x-}{i} =
    _/\_ a_tr4k b_tr4l c_tr4m -> \ tpl_B1 tpl_B2 ->
	MkFoo1{-rk,x-}{i} {_@_ a_tr4k _@_ b_tr4l _@_ c_tr4m tpl_B1 tpl_B2}
:##{-rj,x-}{i} =
    _/\_ a_tr4k b_tr4l c_tr4m -> \ tpl_B1 tpl_B2 ->
	:##{-rj,x-}{i} {_@_ a_tr4k _@_ b_tr4l _@_ c_tr4m tpl_B1 tpl_B2}
MkFoo3{-rm,x-}{i} =
    _/\_ a_tr4k b_tr4l c_tr4m -> \ tpl_B1 tpl_B2 ->
	MkFoo3{-rm,x-}{i} {_@_ a_tr4k _@_ b_tr4l _@_ c_tr4m tpl_B1 tpl_B2}
:***{-ro,x-}{i} =
    _/\_ a_tr4k b_tr4l c_tr4m -> \ tpl_B1 tpl_B2 ->
	:***{-ro,x-}{i} {_@_ a_tr4k _@_ b_tr4l _@_ c_tr4m tpl_B1 tpl_B2}
AbsBinds [taFT] [d.Bar_aFW] [([taFT], f3d{-r4o,x-}, f3d_aFD)]
    /////_aRB = /////{-r4C,x-} taFT d.Bar_aFW
    f3d_aFD x_r48 y_r49 = x_r48 /////_aRB y_r49
AbsBinds [taGe] [d.Bar_aGh] [([taGe], f3c{-r4p,x-}, f3c_aFY)]
    /////_aRG = /////{-r4C,x-} taGe d.Bar_aGh
    f3c_aFY x_r45 y_r46 = /////_aRG x_r45 y_r46
AbsBinds [taGz] [d.Bar_aGC] [([taGz], f3b{-r4q,x-}, f3b_aGj)]
    meth1_aRH = meth1{-r4B,x-} taGz d.Bar_aGC
    f3b_aGj x_r42 y_r43 = x_r42 meth1_aRH y_r43
AbsBinds [taGU] [d.Bar_aGX] [([taGU], f3a{-r4r,x-}, f3a_aGE)]
    meth1_aRI = meth1{-r4B,x-} taGU d.Bar_aGX
    f3a_aGE x_r3Z y_r40 = meth1_aRI x_r3Z y_r40
AbsBinds
[taHp, taHr, taHt]
[]
[([taHp, taHr, taHt], <<<<{-r4s,x-}, <<<<_aGZ)]
    <<<<_aGZ x_r3T y_r3U
	     = :***{-ro,x-}{i} [taHp, taHr, taHt] x_r3T y_r3U
    <<<<_aGZ x_r3W y_r3X
	     = :***{-ro,x-}{i} [taHp, taHr, taHt] x_r3W y_r3X
AbsBinds
[taHL, taHN, taHP]
[]
[([taHL, taHN, taHP], .....{-r4t,x-}, ....._aHv)]
    ....._aHv x_r3Q y_r3R
	      = MkFoo3{-rm,x-}{i} [taHL, taHN, taHP] x_r3Q y_r3R
AbsBinds
[taI7, taI9, taIb]
[]
[([taI7, taI9, taIb], ....{-r4u,x-}, ...._aHR)]
    ...._aHR x_r3N y_r3O
	     = MkFoo3{-rm,x-}{i} [taI7, taI9, taIb] x_r3N y_r3O
AbsBinds
[taIt, taIv, taIx]
[]
[([taIt, taIv, taIx], f2a{-r4v,x-}, f2a_aId)]
    f2a_aId x_r3K y_r3L = :##{-rj,x-}{i} [taIt, taIv, taIx] x_r3K y_r3L
AbsBinds
[taIP, taIR, taIT]
[]
[([taIP, taIR, taIT], f2{-r4w,x-}, f2_aIz)]
    f2_aIz x_r3H y_r3I = :##{-rj,x-}{i} [taIP, taIR, taIT] x_r3H y_r3I
AbsBinds
[taJb, taJd, taJf]
[]
[([taJb, taJd, taJf], f1a{-r4x,x-}, f1a_aIV)]
    f1a_aIV x_r3E y_r3F
	    = MkFoo1{-rk,x-}{i} [taJb, taJd, taJf] x_r3E y_r3F
AbsBinds
[taJx, taJz, taJB]
[]
[([taJx, taJz, taJB], f1{-r4y,x-}, f1_aJh)]
    f1_aJh x_r3B y_r3C
	   = MkFoo1{-rk,x-}{i} [taJx, taJz, taJB] x_r3B y_r3C
AbsBinds
[taKj, taKm, taKn]
[]
[([taKj, taKm, taKn], con2tag_Foo#_rD5, con2tag_Foo#_aJD)]
    con2tag_Foo#_aJD (MkFoo1{-rk,x-}{i} _ _) = 0#
    con2tag_Foo#_aJD (:##{-rj,x-}{i} _ _) = 1#
    con2tag_Foo#_aJD (MkFoo3{-rm,x-}{i} _ _) = 2#
    con2tag_Foo#_aJD (:***{-ro,x-}{i} _ _) = 3#
AbsBinds
[taKG, taKJ, taKM]
[d.Eq_aMy, d.Eq_aMz, d.Eq_aMA]
[([taKG, taKJ, taKM], $d1{-rRC,x-}, d.Eq_aKv)]
    d.Eq_aME = d.Eq_aMy
    ==_aRJ = PrelBase.=={-8Y,p-} taKG d.Eq_aME
    d.Eq_aMG = d.Eq_aMz
    ==_aRK = PrelBase.=={-8Y,p-} taKJ d.Eq_aMG
    d.Eq_aMI = d.Eq_aMA
    ==_aRL = PrelBase.=={-8Y,p-} taKM d.Eq_aMI
    ==_aRM = ==_aRN
    AbsBinds [] [] [([], ==_aRN, ==_aKz)]
	==_aRP = ==_aRJ
	==_aRQ = ==_aRK
	==_aRR = ==_aRK
	==_aRS = ==_aRL
	==_aRT = ==_aRL
	==_aKz (MkFoo1{-rk,x-}{i} a1_rDe a2_rDf)
	       (MkFoo1{-rk,x-}{i} b1_rDg b2_rDh)
	       = (a1_rDe ==_aRJ b1_rDg)
		 PrelBase.&&{-rgs,p-} (a2_rDf ==_aRP b2_rDh)
	==_aKz (:##{-rj,x-}{i} a1_rDj a2_rDk)
	       (:##{-rj,x-}{i} b1_rDl b2_rDm)
	       = (a1_rDj ==_aRK b1_rDl)
		 PrelBase.&&{-rgs,p-} (a2_rDk ==_aRL b2_rDm)
	==_aKz (MkFoo3{-rm,x-}{i} a1_rDo a2_rDp)
	       (MkFoo3{-rm,x-}{i} b1_rDq b2_rDr)
	       = (a1_rDo ==_aRQ b1_rDq)
		 PrelBase.&&{-rgs,p-} (a2_rDp ==_aRR b2_rDr)
	==_aKz (:***{-ro,x-}{i} a1_rDt a2_rDu)
	       (:***{-ro,x-}{i} b1_rDv b2_rDw)
	       = (a1_rDt ==_aRS b1_rDv)
		 PrelBase.&&{-rgs,p-} (a2_rDu ==_aRT b2_rDw)
	==_aKz a_rDy b_rDz = PrelBase.False{-58,w-}{i}
    AbsBinds [] [] [([], /=_aRO, /=_aMr)]
	/=_aMr a_rDD b_rDE = PrelBase.not{-rhq,p-} ==_aRM a_rDD b_rDE
    d.Eq_aKv = ({-dict-} [] [==_aRN, /=_aRO])
AbsBinds
[taRw, taRx, taRy]
[]
[([taRw, taRx, taRy], $d2{-rRD,x-}, d.Eval_aMT)]
    d.Eval_aMT = ({-dict-} [] [])
AbsBinds
[taN8, taN9, taNa]
[d.Ord_aRa, d.Ord_aRb, d.Ord_aRc, d.Eq_aRd]
[([taN8, taN9, taNa], $d3{-rRE,x-}, d.Ord_aN1)]
    d.Eq_aR9 = d.Eq_aRd
    d.Ord_aPR = d.Ord_aRa
    d.Ord_aPS = d.Ord_aRb
    d.Ord_aPT = d.Ord_aRc
    compare_aRU = compare_aS0
    compare_aRV = compare_aS0
    compare_aRW = compare_aS0
    compare_aRX = compare_aS0
    compare_aRY = compare_aS0
    compare_aRZ = compare_aS0
    AbsBinds [] [] [([], compare_aS0, compare_aN5)]
	compare_aN5 a_rEw b_rEx
		    = case con2tag_Foo#_rD5 [taNa, taN8, taN9] a_rEw of
			a#_rFk
			-> case con2tag_Foo#_rD5 [taNa, taN8, taN9] b_rEx of
			     b#_rFm
			     -> if a#_rFk GHC.==#{-79,w-}{I} b#_rFm then
				    case cmp_eq_aS7 a_rEw b_rEx of
				      PrelBase.LT{-rb5,p-}{i} -> PrelBase.LT{-rb5,p-}{i}
				      PrelBase.EQ{-r4n,p-}{i} -> PrelBase.EQ{-r4n,p-}{i}
				      PrelBase.GT{-rb6,p-}{i} -> PrelBase.GT{-rb6,p-}{i}
				else
				    if a#_rFk GHC.<#{-7b,w-}{I} b#_rFm then
					PrelBase.LT{-rb5,p-}{i}
				    else
					PrelBase.GT{-rb6,p-}{i}
		    where
			{- nonrec -}
			AbsBinds
			[taP3, taP4, taPb]
			[d.Ord_aPj, d.Ord_aPl, d.Ord_aPn]
			[([taP3, taP4, taPb], cmp_eq_rEz, cmp_eq_aNe)]
			    compare_aS8 = PrelBase.compare{-rgH,p-} taP3 d.Ord_aPj
			    compare_aS9 = compare_aS8
			    compare_aSa = PrelBase.compare{-rgH,p-} taP4 d.Ord_aPl
			    compare_aSb = PrelBase.compare{-rgH,p-} taPb d.Ord_aPn
			    compare_aSc = compare_aSa
			    compare_aSd = compare_aSa
			    compare_aSe = compare_aSb
			    compare_aSf = compare_aSb
			    cmp_eq_aNe (MkFoo1{-rk,x-}{i} a1_rEB a2_rEC)
				       (MkFoo1{-rk,x-}{i} b1_rED b2_rEE)
				       = case compare_aS8 a1_rEB b1_rED of
					   PrelBase.LT{-rb5,p-}{i} -> PrelBase.LT{-rb5,p-}{i}
					   PrelBase.EQ{-r4n,p-}{i}
					   -> case compare_aS9 a2_rEC b2_rEE of
						PrelBase.LT{-rb5,p-}{i} -> PrelBase.LT{-rb5,p-}{i}
						PrelBase.EQ{-r4n,p-}{i} -> PrelBase.EQ{-r4n,p-}{i}
						PrelBase.GT{-rb6,p-}{i} -> PrelBase.GT{-rb6,p-}{i}
					   PrelBase.GT{-rb6,p-}{i} -> PrelBase.GT{-rb6,p-}{i}
			    cmp_eq_aNe (:##{-rj,x-}{i} a1_rEM a2_rEN)
				       (:##{-rj,x-}{i} b1_rEO b2_rEP)
				       = case compare_aSa a1_rEM b1_rEO of
					   PrelBase.LT{-rb5,p-}{i} -> PrelBase.LT{-rb5,p-}{i}
					   PrelBase.EQ{-r4n,p-}{i}
					   -> case compare_aSb a2_rEN b2_rEP of
						PrelBase.LT{-rb5,p-}{i} -> PrelBase.LT{-rb5,p-}{i}
						PrelBase.EQ{-r4n,p-}{i} -> PrelBase.EQ{-r4n,p-}{i}
						PrelBase.GT{-rb6,p-}{i} -> PrelBase.GT{-rb6,p-}{i}
					   PrelBase.GT{-rb6,p-}{i} -> PrelBase.GT{-rb6,p-}{i}
			    cmp_eq_aNe (MkFoo3{-rm,x-}{i} a1_rEX a2_rEY)
				       (MkFoo3{-rm,x-}{i} b1_rEZ b2_rF0)
				       = case compare_aSc a1_rEX b1_rEZ of
					   PrelBase.LT{-rb5,p-}{i} -> PrelBase.LT{-rb5,p-}{i}
					   PrelBase.EQ{-r4n,p-}{i}
					   -> case compare_aSd a2_rEY b2_rF0 of
						PrelBase.LT{-rb5,p-}{i} -> PrelBase.LT{-rb5,p-}{i}
						PrelBase.EQ{-r4n,p-}{i} -> PrelBase.EQ{-r4n,p-}{i}
						PrelBase.GT{-rb6,p-}{i} -> PrelBase.GT{-rb6,p-}{i}
					   PrelBase.GT{-rb6,p-}{i} -> PrelBase.GT{-rb6,p-}{i}
			    cmp_eq_aNe (:***{-ro,x-}{i} a1_rF8 a2_rF9)
				       (:***{-ro,x-}{i} b1_rFa b2_rFb)
				       = case compare_aSe a1_rF8 b1_rFa of
					   PrelBase.LT{-rb5,p-}{i} -> PrelBase.LT{-rb5,p-}{i}
					   PrelBase.EQ{-r4n,p-}{i}
					   -> case compare_aSf a2_rF9 b2_rFb of
						PrelBase.LT{-rb5,p-}{i} -> PrelBase.LT{-rb5,p-}{i}
						PrelBase.EQ{-r4n,p-}{i} -> PrelBase.EQ{-r4n,p-}{i}
						PrelBase.GT{-rb6,p-}{i} -> PrelBase.GT{-rb6,p-}{i}
					   PrelBase.GT{-rb6,p-}{i} -> PrelBase.GT{-rb6,p-}{i}
			    cmp_eq_aNe _ _
				       = IOBase.error{-87,w-}
					     PrelBase.Ordering{-3o,p-} "Urk! in TcGenDeriv"
			{- nonrec -}
			cmp_eq_aS7 =
			    cmp_eq_rEz [taN8, taN9, taNa] [d.Ord_aPR, d.Ord_aPS, d.Ord_aPT]
			{- nonrec -}
    AbsBinds [] [] [([], <_aS1, <_aPY)]
	<_aPY a_rDK b_rDL
	      = case compare_aRU a_rDK b_rDL of
		  PrelBase.LT{-rb5,p-}{i} -> PrelBase.True{-5E,w-}{i}
		  PrelBase.EQ{-r4n,p-}{i} -> PrelBase.False{-58,w-}{i}
		  PrelBase.GT{-rb6,p-}{i} -> PrelBase.False{-58,w-}{i}
    AbsBinds [] [] [([], <=_aS2, <=_aQb)]
	<=_aQb a_rDS b_rDT
	       = case compare_aRV a_rDS b_rDT of
		   PrelBase.LT{-rb5,p-}{i} -> PrelBase.True{-5E,w-}{i}
		   PrelBase.EQ{-r4n,p-}{i} -> PrelBase.True{-5E,w-}{i}
		   PrelBase.GT{-rb6,p-}{i} -> PrelBase.False{-58,w-}{i}
    AbsBinds [] [] [([], >=_aS3, >=_aQo)]
	>=_aQo a_rE0 b_rE1
	       = case compare_aRW a_rE0 b_rE1 of
		   PrelBase.LT{-rb5,p-}{i} -> PrelBase.False{-58,w-}{i}
		   PrelBase.EQ{-r4n,p-}{i} -> PrelBase.True{-5E,w-}{i}
		   PrelBase.GT{-rb6,p-}{i} -> PrelBase.True{-5E,w-}{i}
    AbsBinds [] [] [([], >_aS4, >_aQB)]
	>_aQB a_rE8 b_rE9
	      = case compare_aRX a_rE8 b_rE9 of
		  PrelBase.LT{-rb5,p-}{i} -> PrelBase.False{-58,w-}{i}
		  PrelBase.EQ{-r4n,p-}{i} -> PrelBase.False{-58,w-}{i}
		  PrelBase.GT{-rb6,p-}{i} -> PrelBase.True{-5E,w-}{i}
    AbsBinds [] [] [([], max_aS5, max_aQO)]
	max_aQO a_rEg b_rEh
		= case compare_aRY a_rEg b_rEh of
		    PrelBase.LT{-rb5,p-}{i} -> b_rEh
		    PrelBase.EQ{-r4n,p-}{i} -> a_rEg
		    PrelBase.GT{-rb6,p-}{i} -> a_rEg
    AbsBinds [] [] [([], min_aS6, min_aR1)]
	min_aR1 a_rEo b_rEp
		= case compare_aRZ a_rEo b_rEp of
		    PrelBase.LT{-rb5,p-}{i} -> a_rEo
		    PrelBase.EQ{-r4n,p-}{i} -> b_rEp
		    PrelBase.GT{-rb6,p-}{i} -> b_rEp
    d.Ord_aN1 =
	({-dict-}
	 [d.Eq_aR9]
	 [compare_aS0, <_aS1, <=_aS2, >=_aS3, >_aS4, max_aS5, min_aS6])
scsel_Bar2Print002Bar{-aRF,x-} = _/\_ t12 -> \ tpl_B1 -> tpl_B1
AbsBinds [taRz] [d.Bar2_aRs] []
meth1{-r4B,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case tpl_B1 of { PrelTup.(,,){-63,w-}{i} tpl_B1 tpl_B2 tpl_B3  ->
	tpl_B1;}
/////{-r4C,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case tpl_B1 of { PrelTup.(,,){-63,w-}{i} tpl_B1 tpl_B2 tpl_B3  ->
	tpl_B2;}
meth2{-r4D,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case tpl_B1 of { PrelTup.(,,){-63,w-}{i} tpl_B1 tpl_B2 tpl_B3  ->
	tpl_B3;}
AbsBinds [taRA] [d.Bar_aRv] []

Print002.hs:35: 
    Warning: Pattern match(es) completely overlapped
	in the definition of function `<<<<'
ghc: module version changed to 1; reason: no old .hi file
_interface_ Print002 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d15 1 $d16 1 $d2 1 $d33 1 $d35 1 $d38 1 $d40 1 $d42 1 $d46 1 $d47 1 $d50 1 $d52 1 $d7 1 $d8 1 $m/= 1 $m< 1 $m<= 1 $m> 1 $m>= 1 $mcompare 1 $mmax 1 $mmin 1 && 1 . 1 not 1 Eq 1 Eval 1 Ord 1 Ordering 1;
PrelNum 1 :: $d17 1 $d18 1;
_exports_
Print002 .... ..... <<<< f1 f1a f2 f2a f3a f3b f3c f3d Bar(meth1 ///// meth2) Bar2 Foo(MkFoo1 :## MkFoo3 :***);
_instances_
instance _forall_ [a b c] {PrelBase.Eq a, PrelBase.Eq b, PrelBase.Eq c} => {PrelBase.Eq (Foo a b c)} = $d1;
instance _forall_ [a b c] => {PrelBase.Eval (Foo a b c)} = $d2;
instance _forall_ [a b c] {PrelBase.Ord a, PrelBase.Ord b, PrelBase.Ord c} => {PrelBase.Ord (Foo a b c)} = $d3;
_declarations_
1 $d1 _:_ _forall_ [a b c] {PrelBase.Eq a, PrelBase.Eq b, PrelBase.Eq c} => {PrelBase.Eq (Foo a b c)} ;;
1 $d2 _:_ _forall_ [a b c] => {PrelBase.Eval (Foo a b c)} ;;
1 $d3 _:_ _forall_ [a b c] {PrelBase.Ord a, PrelBase.Ord b, PrelBase.Ord c, PrelBase.Eq (Foo a b c)} => {PrelBase.Ord (Foo a b c)} ;;
1 .... _:_ _forall_ [ta tb tc] => tb -> tb -> Foo ta tb tc ;;
1 ..... _:_ _forall_ [ta tb tc] => tb -> tb -> Foo ta tb tc ;;
1 <<<< _:_ _forall_ [ta tb tc] => tc -> tc -> Foo ta tb tc ;;
1 class Bar a where {meth1 :: a -> a -> PrelBase.Bool; ///// :: a -> a -> PrelBase.Bool; meth2 :: _forall_ [b] => a -> b -> PrelBase.Bool} ;
1 class {Bar a} => Bar2 a ;
1 data Foo a b c = MkFoo1 a a |  :## b c |  MkFoo3 b b |  :*** c c ;
1 f1 _:_ _forall_ [ta tb tc] => ta -> ta -> Foo ta tb tc ;;
1 f1a _:_ _forall_ [ta tb tc] => ta -> ta -> Foo ta tb tc ;;
1 f2 _:_ _forall_ [ta tb tc] => tb -> tc -> Foo ta tb tc ;;
1 f2a _:_ _forall_ [ta tb tc] => tb -> tc -> Foo ta tb tc ;;
1 f3a _:_ _forall_ [ta] {Bar ta} => ta -> ta -> PrelBase.Bool ;;
1 f3b _:_ _forall_ [ta] {Bar ta} => ta -> ta -> PrelBase.Bool ;;
1 f3c _:_ _forall_ [ta] {Bar ta} => ta -> ta -> PrelBase.Bool ;;
1 f3d _:_ _forall_ [ta] {Bar ta} => ta -> ta -> PrelBase.Bool ;;
