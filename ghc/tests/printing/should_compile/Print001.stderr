
==================== Typechecked ====================
Print001.BarNil{-r8-} =
    _/\_ a_tr58 -> Print001.BarNil{-r8-} {_@_ a_tr58}
Print001.BarCon{-r7-} =
    _/\_ a_tr58 -> \ x1_B1
		     x2_B2 ->
	Print001.BarCon{-r7-} {_@_ a_tr58 x1_B1 x2_B2}
Print001.MkFoo{-r50-} =
    _/\_ d_tr5a
	 e_tr5b
	 f_tr5c -> \ x1_B1
		     x2_B2
		     x3_B3 ->
	Print001.MkFoo{-r50-} {_@_ d_tr5a
			       _@_ e_tr5b
			       _@_ f_tr5c
			       x1_B1
			       x2_B2
			       x3_B3}
AbsBinds
[a_ta19O, b_ta19Q]
[]
[([a_ta19O, b_ta19Q], Print001.g{-r4W-}, g_a1bd)]
    g_a1bd x_r56 = lit_a1bf
AbsBinds
[a_ta1a8, b_ta1aa, c_ta1ac]
[d.Eq_a1ah, d.Ord_a1ai, d.Ix_a1aj]
[([a_ta1a8, b_ta1aa, c_ta1ac], Print001.f2{-r4X-}, f2_a1bm)]
    f2_a1bm x_r54 = x_r54
AbsBinds
[a_ta1ay, b_ta1aA, c_ta1aC]
[d.Eq_a1aH]
[([a_ta1ay, b_ta1aA, c_ta1aC], Print001.f{-r4Y-}, f_a1bn)]
    f_a1bn x_r52 = x_r52
AbsBinds
[a1aL, a1aN, a1aP]
[]
[([a1aL, a1aN, a1aP], Print001.mkFoo{-r4Z-}, mkFoo_a1bo)]
    mkFoo_a1bo = Print001.MkFoo{-r50-} [a1aL, a1aN, a1aP]
AbsBinds
[a_ta1b9]
[]
[([a_ta1b9], Print001.$dEvalBar0{-r1bl-}, d.Eval_a1aX)]
    d.Eval_a1aX =
	PrelErr.error{-87-}
	    {PrelBase.Eval{-24-} (Print001.Bar{-r5d-} a_ta1b9)} "Compiler error: bad dictionary Eval"
AbsBinds
[d_ta1ba, e_ta1bc, f_ta1bb]
[]
[([d_ta1ba, e_ta1bc, f_ta1bb],
  Print001.$dEvalFoo0{-r1bk-},
  d.Eval_a1b5)]
    d.Eval_a1b5 =
	PrelErr.error{-87-}
	    {PrelBase.Eval{-24-} (Print001.Foo{-r5e-} d_ta1ba e_ta1bc f_ta1bb)} "Compiler error: bad dictionary Eval"
lit_a1bf = fromRational_a1be 2.0
fromRational_a1be =
    PrelNum.fromRational{-8S-} PrelBase.Float{-3c-} d.Fractional_a1b8
d.Fractional_a1b8 = PrelNum.$dFractionalFloat0{-rGQ-}


ghc: module version changed to 1; reason: no old .hi file
_exports_
Print001 f f2 g mkFoo Bar(BarNil BarCon) Foo(MkFoo);
_instances_
instance _forall_ [a] => {PrelBase.Eval (Bar a)} = $dEvalBar0;
instance _forall_ [a b c] => {PrelBase.Eval (Foo a b c)} = $dEvalFoo0;
_declarations_
1 $dEvalBar0 _:_ _forall_ [a] => {PrelBase.Eval (Bar a)} ;;
1 $dEvalFoo0 _:_ _forall_ [a b c] => {PrelBase.Eval (Foo a b c)} ;;
1 data Bar a = BarNil |  BarCon (Foo a a a) (Bar a) ;
1 data Foo d e f = MkFoo [((d -> PrelBase.Int) -> d) -> e] (d -> e, e -> e) PrelBase.() ;
1 f _:_ _forall_ [a b c] {PrelBase.Eq a} => (a -> b -> c) -> a -> b -> c ;;
1 f2 _:_ _forall_ [a b c] {PrelBase.Eq a, PrelBase.Ord a, Ix.Ix c} => (a -> b -> c) -> a -> b -> c ;;
1 g _:_ _forall_ [a b] => Foo PrelBase.Int (a -> b) (a -> [(a, PrelBase.Double, PrelBase.Int)]) -> PrelBase.Float ;;
1 mkFoo _:_ _forall_ [a b c] => [((a -> PrelBase.Int) -> a) -> b] -> (a -> b, b -> b) -> PrelBase.() -> Foo a b c ;;
