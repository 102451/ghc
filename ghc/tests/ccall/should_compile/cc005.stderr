

================================================================================
STG syntax:
$g0_g0 =
     PrelNum.:%{-5l,p-}{i}! [PrelNum.integer_2{-8e,w-} PrelNum.integer_1{-8d,w-}];
$g1_a15t =
    (False, True, False, False, True) [] \u []
	case
	    PrelNum.$d14{-rs6,p-} ::{PrelNum.Fractional{-26,p-} PrelBase.Double{-3a,W-}}
	of {
	    -- lvs: []; rhs lvs: []; uniq: c1QY
	  PrelTup.(,,,){-64,w-}{i} $x0_s1En $x1_s1Eo $x2_s1Ep $x3_s1Em ->
	      $x3_s1Em $g0_g0;
	};
$g2_g2 =
     PrelNum.:%{-5l,p-}{i}! [PrelNum.integer_1{-8d,w-} PrelNum.integer_1{-8d,w-}];
$g3_a15r =
    (False, True, False, False, True) [] \u []
	case
	    PrelNum.$d23{-rsg,p-} ::{PrelNum.Fractional{-26,p-} PrelBase.Float{-3c,W-}}
	of {
	    -- lvs: []; rhs lvs: []; uniq: c1QZ
	  PrelTup.(,,,){-64,w-}{i} $x0_s1EP $x1_s1EQ $x2_s1ER $x3_s1EO ->
	      $x3_s1EO $g2_g2;
	};
a{-r1,x-} =
     [] \r [$x0_s1F9]
	case $x0_s1F9 ::STBase.State{-3M,W-} GHC.RealWorld{-3s,W-} of {
	    -- lvs: [$x0_s1F9]; rhs lvs: []; uniq: c1R0
	  STBase.S#{-5D,w-}{i} $x1_s1FA ->
	      case
		  _ccall_ a [(STBase.StateAndInt#{-3D,W-} GHC.RealWorld{-3s,W-}) (GHC.State#{-3L,W-} GHC.RealWorld{-3s,W-})]# [$x1_s1FA] ::STBase.StateAndInt#{-3D,W-} GHC.RealWorld{-3s,W-}
	      of {
		  -- lvs: [$x1_s1FA]; rhs lvs: []; uniq: c1R1
		STBase.StateAndInt#{-5v,w-}{i} $x2_s1FK $x3_s1Fz ->
		    let { $x4_s1Gc =  PrelBase.I#{-5b,w-}{i}! [$x3_s1Fz]; } in
		    let { $x5_s1Gb =  STBase.S#{-5D,w-}{i}! [$x2_s1FK];
		    } in  PrelTup.(,){-62,w-}{i}! [$x4_s1Gc $x5_s1Gb];
	      };
	};
b{-r3,x-} =
     [] \r [$x0_s1Gl]
	let {
	  stg_c1Qp =
	      (False, True, False, False, True) [$x0_s1Gl] \r [$x1_s1Ga]
		  case
		      $x1_s1Ga{-lvs:$x0_s1Gl-} ::STBase.State{-3M,W-} GHC.RealWorld{-3s,W-}
		  of {
		      -- lvs: [$x1_s1Ga $x0_s1Gl]; rhs lvs: [$x0_s1Gl]; uniq: c1R2
		    STBase.S#{-5D,w-}{i} $x2_s1Gm ->
			case $x0_s1Gl{-lvs:$x2_s1Gm-} ::PrelBase.Int{-3g,W-} of {
			    -- lvs: [$x0_s1Gl $x2_s1Gm]; rhs lvs: [$x2_s1Gm]; uniq: c1R3
			  PrelBase.I#{-5b,w-}{i} $x3_s1GM ->
			      case
				  _ccall_ b [(STBase.StateAndInt#{-3D,W-} GHC.RealWorld{-3s,W-}) (GHC.State#{-3L,W-} GHC.RealWorld{-3s,W-}) GHC.Int#{-3f,W-}]# [$x2_s1Gm $x3_s1GM] ::STBase.StateAndInt#{-3D,W-} GHC.RealWorld{-3s,W-}
			      of {
				  -- lvs: [$x2_s1Gm $x3_s1GM]; rhs lvs: []; uniq: c1R4
				STBase.StateAndInt#{-5v,w-}{i} $x4_s1GX $x5_s1GN ->
				    let { $x6_s1Hx =  PrelBase.I#{-5b,w-}{i}! [$x5_s1GN]; } in
				    let { $x7_s1Hw =  STBase.S#{-5D,w-}{i}! [$x4_s1GX];
				    } in  PrelTup.(,){-62,w-}{i}! [$x6_s1Hx $x7_s1Hw];
			      };
			};
		  };
	} in  stg_c1Qp;
c{-r5,x-} =
     [] \r [$x0_s1HG $x1_s1HQ $x2_s1I0 $x3_s1Ia]
	let {
	  stg_c1PP =
	      (False, True, False, False, True) [$x0_s1HG $x1_s1HQ $x2_s1I0 $x3_s1Ia] \r [$x4_s1Hv]
		  case
		      $x4_s1Hv{-lvs:$x0_s1HG, $x1_s1HQ, $x2_s1I0, $x3_s1Ia-} ::STBase.State{-3M,W-} GHC.RealWorld{-3s,W-}
		  of {
		      -- lvs: [$x4_s1Hv $x0_s1HG $x1_s1HQ $x2_s1I0 $x3_s1Ia]; rhs lvs: [$x0_s1HG $x1_s1HQ $x2_s1I0 $x3_s1Ia]; uniq: c1R5
		    STBase.S#{-5D,w-}{i} $x5_s1HH ->
			case
			    $x0_s1HG{-lvs:$x5_s1HH, $x1_s1HQ, $x2_s1I0, $x3_s1Ia-} ::PrelBase.Int{-3g,W-}
			of {
			    -- lvs: [$x0_s1HG $x5_s1HH $x1_s1HQ $x2_s1I0 $x3_s1Ia]; rhs lvs: [$x5_s1HH $x1_s1HQ $x2_s1I0 $x3_s1Ia]; uniq: c1R6
			  PrelBase.I#{-5b,w-}{i} $x6_s1HR ->
			      case
				  $x1_s1HQ{-lvs:$x5_s1HH, $x6_s1HR, $x2_s1I0, $x3_s1Ia-} ::PrelBase.Char{-38,W-}
			      of {
				  -- lvs: [$x5_s1HH $x1_s1HQ $x6_s1HR $x2_s1I0 $x3_s1Ia]; rhs lvs: [$x5_s1HH $x6_s1HR $x2_s1I0 $x3_s1Ia]; uniq: c1R7
				PrelBase.C#{-54,w-}{i} $x7_s1I1 ->
				    case
					$x2_s1I0{-lvs:$x5_s1HH, $x6_s1HR, $x7_s1I1, $x3_s1Ia-} ::PrelBase.Float{-3c,W-}
				    of {
					-- lvs: [$x5_s1HH $x6_s1HR $x2_s1I0 $x7_s1I1 $x3_s1Ia]; rhs lvs: [$x5_s1HH $x6_s1HR $x7_s1I1 $x3_s1Ia]; uniq: c1R8
				      PrelBase.F#{-59,w-}{i} $x8_s1Ib ->
					  case
					      $x3_s1Ia{-lvs:$x5_s1HH, $x6_s1HR, $x7_s1I1, $x8_s1Ib-} ::PrelBase.Double{-3a,W-}
					  of {
					      -- lvs: [$x5_s1HH $x6_s1HR $x7_s1I1 $x3_s1Ia $x8_s1Ib]; rhs lvs: [$x5_s1HH $x6_s1HR $x7_s1I1 $x8_s1Ib]; uniq: c1R9
					    PrelBase.D#{-56,w-}{i} $x9_s1IB ->
						case
						    _ccall_ c [(STBase.StateAndFloat#{-3C,W-} GHC.RealWorld{-3s,W-}) (GHC.State#{-3L,W-} GHC.RealWorld{-3s,W-}) GHC.Int#{-3f,W-} GHC.Char#{-37,W-} GHC.Float#{-3b,W-} GHC.Double#{-39,W-}]# [$x5_s1HH $x6_s1HR $x7_s1I1 $x8_s1Ib $x9_s1IB] ::STBase.StateAndFloat#{-3C,W-} GHC.RealWorld{-3s,W-}
						of {
						    -- lvs: [$x5_s1HH $x6_s1HR $x7_s1I1 $x8_s1Ib $x9_s1IB]; rhs lvs: []; uniq: c1Ra
						  STBase.StateAndFloat#{-5u,w-}{i} $xa_s1IM $xb_s1IC ->
						      let {
							$xc_s1Jy =
							     PrelBase.F#{-59,w-}{i}! [$xb_s1IC]; } in
						      let {
							$xd_s1Jx =
							     STBase.S#{-5D,w-}{i}! [$xa_s1IM];
						      } in 
							PrelTup.(,){-62,w-}{i}! [$xc_s1Jy $xd_s1Jx];
						};
					  };
				    };
			      };
			};
		  };
	} in  stg_c1PP;
d{-r7,x-} =
     [] \u []
	let {
	  $xk_s1Ma =
	       [] \r [$x0_s1JH]
		  let { $x8_s1KM =  [$x0_s1JH] \r [$x1_s1Jw]
			  case
			      $x1_s1Jw{-lvs:$x0_s1JH-} ::STBase.State{-3M,W-} GHC.RealWorld{-3s,W-}
			  of {
			      -- lvs: [$x1_s1Jw $x0_s1JH]; rhs lvs: [$x0_s1JH]; uniq: c1Rb
			    STBase.S#{-5D,w-}{i} $x2_s1JI ->
				case $x0_s1JH{-lvs:$x2_s1JI-} ::PrelBase.Int{-3g,W-} of {
				    -- lvs: [$x0_s1JH $x2_s1JI]; rhs lvs: [$x2_s1JI]; uniq: c1Rc
				  PrelBase.I#{-5b,w-}{i} $x3_s1K8 ->
				      case
					  _ccall_ b [(STBase.StateAndInt#{-3D,W-} GHC.RealWorld{-3s,W-}) (GHC.State#{-3L,W-} GHC.RealWorld{-3s,W-}) GHC.Int#{-3f,W-}]# [$x2_s1JI $x3_s1K8] ::STBase.StateAndInt#{-3D,W-} GHC.RealWorld{-3s,W-}
				      of {
					  -- lvs: [$x2_s1JI $x3_s1K8]; rhs lvs: []; uniq: c1Rd
					STBase.StateAndInt#{-5v,w-}{i} $x4_s1Kj $x5_s1K9 ->
					    let {
					      $x6_s1KL =  PrelBase.I#{-5b,w-}{i}! [$x5_s1K9]; } in
					    let { $x7_s1KK =  STBase.S#{-5D,w-}{i}! [$x4_s1Kj];
					    } in  PrelTup.(,){-62,w-}{i}! [$x6_s1KL $x7_s1KK];
				      };
				};
			  } } in
		  let {
		    $xj_s1M6 =
			 [] \r [$x9_s1KV]
			    let {
			      stg_c1OR =
				  (False, True, False, False, True) [$x9_s1KV] \r [$xa_s1KJ]
				      case
					  $xa_s1KJ{-lvs:$x9_s1KV-} ::STBase.State{-3M,W-} GHC.RealWorld{-3s,W-}
				      of {
					  -- lvs: [$xa_s1KJ $x9_s1KV]; rhs lvs: [$x9_s1KV]; uniq: c1Re
					STBase.S#{-5D,w-}{i} $xb_s1KW ->
					    case
						$x9_s1KV{-lvs:$xb_s1KW-} ::PrelBase.Int{-3g,W-}
					    of {
						-- lvs: [$x9_s1KV $xb_s1KW]; rhs lvs: [$xb_s1KW]; uniq: c1Rf
					      PrelBase.I#{-5b,w-}{i} $xc_s1L5 ->
						  case
						      $g3_a15r{-lvs:$xb_s1KW, $xc_s1L5-} ::PrelBase.Float{-3c,W-}
						  of {
						      -- lvs: [$xb_s1KW $xc_s1L5]; rhs lvs: [$xb_s1KW $xc_s1L5]; uniq: c1Rg
						    PrelBase.F#{-59,w-}{i} $xd_s1Le ->
							case
							    $g1_a15t{-lvs:$xb_s1KW, $xc_s1L5, $xd_s1Le-} ::PrelBase.Double{-3a,W-}
							of {
							    -- lvs: [$xb_s1KW $xc_s1L5 $xd_s1Le]; rhs lvs: [$xb_s1KW $xc_s1L5 $xd_s1Le]; uniq: c1Rh
							  PrelBase.D#{-56,w-}{i} $xe_s1LE ->
							      case
								  _ccall_ c [(STBase.StateAndFloat#{-3C,W-} GHC.RealWorld{-3s,W-}) (GHC.State#{-3L,W-} GHC.RealWorld{-3s,W-}) GHC.Int#{-3f,W-} GHC.Char#{-37,W-} GHC.Float#{-3b,W-} GHC.Double#{-39,W-}]# [$xb_s1KW $xc_s1L5 'f' $xd_s1Le $xe_s1LE] ::STBase.StateAndFloat#{-3C,W-} GHC.RealWorld{-3s,W-}
							      of {
								  -- lvs: [$xb_s1KW $xc_s1L5 $xd_s1Le $xe_s1LE]; rhs lvs: []; uniq: c1Ri
								STBase.StateAndFloat#{-5u,w-}{i} $xf_s1LP $xg_s1LF ->
								    let {
								      $xh_s1M5 =
									   PrelBase.F#{-59,w-}{i}! [$xg_s1LF]; } in
								    let {
								      $xi_s1M4 =
									   STBase.S#{-5D,w-}{i}! [$xf_s1LP];
								    } in 
								      PrelTup.(,){-62,w-}{i}! [$xh_s1M5 $xi_s1M4];
							      };
							};
						  };
					    };
				      };
			    } in  stg_c1OR;
		  } in  STBase.thenPrimIO{-r4t,p-} $x8_s1KM $xj_s1M6;
	} in  STBase.thenPrimIO{-r4t,p-} a{-r1,x-} $xk_s1Ma;


================================================================================
Flat Abstract C:
ED_(PrelNum_integerZu2_closure);
ED_(PrelNum_integerZu1_closure);
SET_STATIC_HDR(g0_closure,PrelNum_ZcZ37_static_info,0,static ,ED_RO_)
  , (W_)PrelNum_integerZu2_closure, (W_)PrelNum_integerZu1_closure
};
IFN_(ret_c1QY) {
ID_(g0_closure);
	FB_
	SpA[-1]=g0_closure;
	RetReg=StdUpdRetVecReg;
	R1=R6;
	SpA=SpA-1;
	SpB=SpB-1;
	ENT_VIA_NODE();
	GRAN_EXEC(6,1,1,1,0);
	JMP_((P_)(ENTRY_CODE((D_)(INFO_PTR(R1.p)))));
	FE_
}
UNVECTBL(static,vtbl_c1QY,ret_c1QY)
STATIC_ITBL(a15t_info,a15t_entry,StdErrorCode,1,-1,(STATIC_VHS+2),0,static const,IF_,0,0,0);
IFN_(a15t_entry) {
ED_(PrelNum_Z36d14_closure);
	FB_
	STK_CHK(1,1,5,0,0,0,1);
	HEAP_CHK(1,(BH_HS+2),1);
	SET_BH_HDR(Hp-(BH_HS+1),BH_UPD_info,0,(BH_VHS+2),0);
	UPD_CAF(R1.p,Hp-(BH_HS+1));
	PUSH_STD_UPD_FRAME(Hp-(BH_HS+1),0,0);
	RetReg=(StgRetAddr)UNVEC(ret_c1QY,vtbl_c1QY);
	R1.p=PrelNum_Z36d14_closure;
	SpB=SpB+5;
	ENT_VIA_NODE();
	GRAN_EXEC(19,2,2,8,0);
	JMP_((P_)(ENTRY_CODE((D_)(INFO_PTR(R1.p)))));
	FE_
}
SET_STATIC_HDR(a15t_closure,a15t_info,0,static ,ID_RO_)
  , (W_)0, (W_)0
};
ED_(PrelNum_integerZu1_closure);
SET_STATIC_HDR(g2_closure,PrelNum_ZcZ37_static_info,0,static ,ED_RO_)
  , (W_)PrelNum_integerZu1_closure, (W_)PrelNum_integerZu1_closure
};
IFN_(ret_c1QZ) {
ID_(g2_closure);
	FB_
	SpA[-1]=g2_closure;
	RetReg=StdUpdRetVecReg;
	R1=R6;
	SpA=SpA-1;
	SpB=SpB-1;
	ENT_VIA_NODE();
	GRAN_EXEC(6,1,1,1,0);
	JMP_((P_)(ENTRY_CODE((D_)(INFO_PTR(R1.p)))));
	FE_
}
UNVECTBL(static,vtbl_c1QZ,ret_c1QZ)
STATIC_ITBL(a15r_info,a15r_entry,StdErrorCode,1,-1,(STATIC_VHS+2),0,static const,IF_,0,0,0);
IFN_(a15r_entry) {
ED_(PrelNum_Z36d23_closure);
	FB_
	STK_CHK(1,1,5,0,0,0,1);
	HEAP_CHK(1,(BH_HS+2),1);
	SET_BH_HDR(Hp-(BH_HS+1),BH_UPD_info,0,(BH_VHS+2),0);
	UPD_CAF(R1.p,Hp-(BH_HS+1));
	PUSH_STD_UPD_FRAME(Hp-(BH_HS+1),0,0);
	RetReg=(StgRetAddr)UNVEC(ret_c1QZ,vtbl_c1QZ);
	R1.p=PrelNum_Z36d23_closure;
	SpB=SpB+5;
	ENT_VIA_NODE();
	GRAN_EXEC(19,2,2,8,0);
	JMP_((P_)(ENTRY_CODE((D_)(INFO_PTR(R1.p)))));
	FE_
}
SET_STATIC_HDR(a15r_closure,a15r_info,0,static ,ID_RO_)
  , (W_)0, (W_)0
};
IFN_(ret_c1R0) {
ED_RO_(PrelBase_IZh_con_info);
ED_(STBase_SZh_static_closure);
ED_RO_(PrelTup_Z40Z44Z41_inregs_info);
I_ s1Fz_;
	FB_
	HEAP_CHK(0,(_FHS+1),0);
	{
	I_ _ccall_result;
	CALLER_SAVE_Base
	CALLER_SAVE_SpA
	CALLER_SAVE_SuA
	CALLER_SAVE_SpB
	CALLER_SAVE_SuB
	CALLER_SAVE_Ret
	CALLER_SAVE_Hp
	CALLER_SAVE_HpLim
	_ccall_result = (a());
	CALLER_RESTORE_Base
	CALLER_RESTORE_SpA
	CALLER_RESTORE_SuA
	CALLER_RESTORE_SpB
	CALLER_RESTORE_SuB
	CALLER_RESTORE_Ret
	CALLER_RESTORE_Hp
	CALLER_RESTORE_HpLim
	CALLER_RESTORE_StdUpdRetVec
	CALLER_RESTORE_StkStub
	s1Fz_=_ccall_result;
	}
	SET_SPEC_HDR(Hp-_FHS,PrelBase_IZh_con_info,0,1,0);
	*Hp=(W_)(s1Fz_);
	R4.p=STBase_SZh_static_closure;
	R3.p=Hp-_FHS;
	SpB=SpB-1;
	R2.d=PrelTup_Z40Z44Z41_inregs_info;
	GRAN_EXEC(10,2,21,22,0);
	JMP_(DIRECT((StgRetAddr)(SpB[1])));
	FE_
}
UNVECTBL(static,vtbl_c1R0,ret_c1R0)
STATIC_ITBL(Test_a_info,Test_a_entry,StdErrorCode,1,-1,STATIC_VHS,0,const,EF_,0,0,0);
FN_(Test_a_entry) {
ED_(Test_a_closure);
EF_(Test_a_fast1);
	FB_
	ARGS_CHK_A_LOAD_NODE(1,Test_a_closure);
	R1.p=*SpA;
	SpA=SpA+1;
	GRAN_EXEC(5,2,1,0,0);
	JMP_(Test_a_fast1);
	FE_
}
FN_(Test_a_fast1) {
	FB_
	STK_CHK(1,0,1,0,0,0,0);
	SpB[1]=(W_)(RetReg);
	RetReg=(StgRetAddr)UNVEC(ret_c1R0,vtbl_c1R0);
	SpB=SpB+1;
	ENT_VIA_NODE();
	GRAN_EXEC(3,1,1,1,0);
	JMP_((P_)(ENTRY_CODE((D_)(INFO_PTR(R1.p)))));
	FE_
}
SET_STATIC_HDR(Test_a_closure,Test_a_info,0,,ED_RO_)
};
IFN_(ret_c1R3) {
ED_RO_(PrelBase_IZh_con_info);
ED_(STBase_SZh_static_closure);
ED_RO_(PrelTup_Z40Z44Z41_inregs_info);
I_ s1GN_;
	FB_
	HEAP_CHK(0,(_FHS+1),0);
	{
	I_ _ccall_result;
	I_ _ccall_arg1=R3.i;
	CALLER_SAVE_Base
	CALLER_SAVE_SpA
	CALLER_SAVE_SuA
	CALLER_SAVE_SpB
	CALLER_SAVE_SuB
	CALLER_SAVE_Ret
	CALLER_SAVE_Hp
	CALLER_SAVE_HpLim
	_ccall_result = (b((_ccall_arg1)));
	CALLER_RESTORE_Base
	CALLER_RESTORE_SpA
	CALLER_RESTORE_SuA
	CALLER_RESTORE_SpB
	CALLER_RESTORE_SuB
	CALLER_RESTORE_Ret
	CALLER_RESTORE_Hp
	CALLER_RESTORE_HpLim
	CALLER_RESTORE_StdUpdRetVec
	CALLER_RESTORE_StkStub
	s1GN_=_ccall_result;
	}
	SET_SPEC_HDR(Hp-_FHS,PrelBase_IZh_con_info,0,1,0);
	*Hp=(W_)(s1GN_);
	R4.p=STBase_SZh_static_closure;
	R3.p=Hp-_FHS;
	SpB=SpB-1;
	R2.d=PrelTup_Z40Z44Z41_inregs_info;
	GRAN_EXEC(10,2,22,22,0);
	JMP_(DIRECT((StgRetAddr)(SpB[1])));
	FE_
}
UNVECTBL(static,vtbl_c1R3,ret_c1R3)
IFN_(ret_c1R2) {
	FB_
	RetReg=(StgRetAddr)UNVEC(ret_c1R3,vtbl_c1R3);
	R1.p=*SpA;
	SpA=SpA+1;
	ENT_VIA_NODE();
	GRAN_EXEC(3,1,2,1,0);
	JMP_((P_)(ENTRY_CODE((D_)(INFO_PTR(R1.p)))));
	FE_
}
UNVECTBL(static,vtbl_c1R2,ret_c1R2)
SPEC_N_ITBL(c1Qp_info,c1Qp_entry,StdErrorCode,1,-1,1,1,static const,IF_,0,0,0);
IFN_(c1Qp_entry) {
IF_(c1Qp_fast1);
	FB_
	ARGS_CHK_A(1);
	R2.p=*SpA;
	SpA=SpA+1;
	GRAN_EXEC(5,2,1,0,0);
	JMP_(c1Qp_fast1);
	FE_
}
IFN_(c1Qp_fast1) {
	FB_
	STK_CHK(3,1,1,0,0,0,1);
	SpB[1]=(W_)(RetReg);
	RetReg=(StgRetAddr)UNVEC(ret_c1R2,vtbl_c1R2);
	SpA[-1]=(P_)(R1.p[_FHS]);
	R1=R2;
	SpA=SpA-1;
	SpB=SpB+1;
	ENT_VIA_NODE();
	GRAN_EXEC(5,1,2,2,0);
	JMP_((P_)(ENTRY_CODE((D_)(INFO_PTR(R1.p)))));
	FE_
}
STATIC_ITBL(Test_b_info,Test_b_entry,StdErrorCode,1,-1,STATIC_VHS,0,const,EF_,0,0,0);
FN_(Test_b_entry) {
ED_(Test_b_closure);
EF_(Test_b_fast1);
	FB_
	ARGS_CHK_A_LOAD_NODE(1,Test_b_closure);
	R1.p=*SpA;
	SpA=SpA+1;
	GRAN_EXEC(5,2,1,0,0);
	JMP_(Test_b_fast1);
	FE_
}
FN_(Test_b_fast1) {
ID_RO_(c1Qp_info);
IF_(c1Qp_entry);
	FB_
	HEAP_CHK(1,(_FHS+1),0);
	SET_SPEC_HDR(Hp-_FHS,c1Qp_info,0,1,1);
	*Hp=(W_)(R1.p);
	R1.p=Hp-_FHS;
	GRAN_EXEC(5,2,0,2,0);
	JMP_(c1Qp_entry);
	FE_
}
SET_STATIC_HDR(Test_b_closure,Test_b_info,0,,ED_RO_)
};
IFN_(ret_c1R9) {
ED_RO_(PrelBase_FZh_con_info);
ED_(STBase_SZh_static_closure);
ED_RO_(PrelTup_Z40Z44Z41_inregs_info);
StgFloat s1IC_;
	FB_
	HEAP_CHK(0,(_FHS+1),0);
	{
	StgFloat _ccall_result;
	I_ _ccall_arg1=(I_)(SpB[-2]);
	StgChar _ccall_arg2=(StgChar)(SpB[-1]);
	StgFloat _ccall_arg3=PK_FLT(SpB);
	StgDouble _ccall_arg4=DblReg1;
	CALLER_SAVE_Base
	CALLER_SAVE_SpA
	CALLER_SAVE_SuA
	CALLER_SAVE_SpB
	CALLER_SAVE_SuB
	CALLER_SAVE_Ret
	CALLER_SAVE_Hp
	CALLER_SAVE_HpLim
	_ccall_result = (c((_ccall_arg1),(_ccall_arg2),(_ccall_arg3),(_ccall_arg4)));
	CALLER_RESTORE_Base
	CALLER_RESTORE_SpA
	CALLER_RESTORE_SuA
	CALLER_RESTORE_SpB
	CALLER_RESTORE_SuB
	CALLER_RESTORE_Ret
	CALLER_RESTORE_Hp
	CALLER_RESTORE_HpLim
	CALLER_RESTORE_StdUpdRetVec
	CALLER_RESTORE_StkStub
	s1IC_=_ccall_result;
	}
	SET_SPEC_HDR(Hp-_FHS,PrelBase_FZh_con_info,0,1,0);
	ASSIGN_FLT(Hp,s1IC_);
	R4.p=STBase_SZh_static_closure;
	R3.p=Hp-_FHS;
	SpB=SpB-4;
	R2.d=PrelTup_Z40Z44Z41_inregs_info;
	GRAN_EXEC(10,2,25,22,0);
	JMP_(DIRECT((StgRetAddr)(SpB[1])));
	FE_
}
UNVECTBL(static,vtbl_c1R9,ret_c1R9)
IFN_(ret_c1R8) {
	FB_
	RetReg=(StgRetAddr)UNVEC(ret_c1R9,vtbl_c1R9);
	R1.p=*SpA;
	ASSIGN_FLT(SpB+1,FltReg1);
	SpA=SpA+4;
	SpB=SpB+1;
	ENT_VIA_NODE();
	GRAN_EXEC(4,1,2,1,0);
	JMP_((P_)(ENTRY_CODE((D_)(INFO_PTR(R1.p)))));
	FE_
}
UNVECTBL(static,vtbl_c1R8,ret_c1R8)
IFN_(ret_c1R7) {
	FB_
	RetReg=(StgRetAddr)UNVEC(ret_c1R8,vtbl_c1R8);
	R1.p=SpA[1];
	SpB[1]=(W_)(R3.c);
	SpA[1]=StkStubReg;
	SpB=SpB+1;
	ENT_VIA_NODE();
	GRAN_EXEC(3,1,2,2,0);
	JMP_((P_)(ENTRY_CODE((D_)(INFO_PTR(R1.p)))));
	FE_
}
UNVECTBL(static,vtbl_c1R7,ret_c1R7)
IFN_(ret_c1R6) {
	FB_
	RetReg=(StgRetAddr)UNVEC(ret_c1R7,vtbl_c1R7);
	R1.p=SpA[2];
	SpB[1]=(W_)(R3.i);
	SpA[2]=StkStubReg;
	SpB=SpB+1;
	ENT_VIA_NODE();
	GRAN_EXEC(3,1,2,2,0);
	JMP_((P_)(ENTRY_CODE((D_)(INFO_PTR(R1.p)))));
	FE_
}
UNVECTBL(static,vtbl_c1R6,ret_c1R6)
IFN_(ret_c1R5) {
	FB_
	RetReg=(StgRetAddr)UNVEC(ret_c1R6,vtbl_c1R6);
	R1.p=SpA[3];
	SpA[3]=StkStubReg;
	ENT_VIA_NODE();
	GRAN_EXEC(2,1,2,2,0);
	JMP_((P_)(ENTRY_CODE((D_)(INFO_PTR(R1.p)))));
	FE_
}
UNVECTBL(static,vtbl_c1R5,ret_c1R5)
SPEC_N_ITBL(c1PP_info,c1PP_entry,StdErrorCode,1,-1,4,4,static const,IF_,0,0,0);
IFN_(c1PP_entry) {
IF_(c1PP_fast1);
	FB_
	ARGS_CHK_A(1);
	R2.p=*SpA;
	SpA=SpA+1;
	GRAN_EXEC(5,2,1,0,0);
	JMP_(c1PP_fast1);
	FE_
}
IFN_(c1PP_fast1) {
	FB_
	STK_CHK(3,4,4,0,0,0,1);
	SpB[1]=(W_)(RetReg);
	RetReg=(StgRetAddr)UNVEC(ret_c1R5,vtbl_c1R5);
	SpA[-4]=(P_)(R1.p[(_FHS+3)]);
	SpA[-3]=(P_)(R1.p[(_FHS+2)]);
	SpA[-2]=(P_)(R1.p[(_FHS+1)]);
	SpA[-1]=(P_)(R1.p[_FHS]);
	R1=R2;
	SpA=SpA-4;
	SpB=SpB+1;
	ENT_VIA_NODE();
	GRAN_EXEC(5,1,5,5,0);
	JMP_((P_)(ENTRY_CODE((D_)(INFO_PTR(R1.p)))));
	FE_
}
STATIC_ITBL(Test_c_info,Test_c_entry,StdErrorCode,1,-1,STATIC_VHS,0,const,EF_,0,0,0);
FN_(Test_c_entry) {
ED_(Test_c_closure);
EF_(Test_c_fast4);
	FB_
	ARGS_CHK_A_LOAD_NODE(4,Test_c_closure);
	R1.p=*SpA;
	R2.p=SpA[1];
	R3.p=SpA[2];
	R4.p=SpA[3];
	SpA=SpA+4;
	GRAN_EXEC(5,2,4,0,0);
	JMP_(Test_c_fast4);
	FE_
}
FN_(Test_c_fast4) {
ID_RO_(c1PP_info);
IF_(c1PP_entry);
	FB_
	HEAP_CHK(15,(_FHS+4),0);
	SET_SPEC_HDR(Hp-(_FHS+3),c1PP_info,0,4,4);
	Hp[-3]=(W_)(R1.p);
	Hp[-2]=(W_)(R2.p);
	Hp[-1]=(W_)(R3.p);
	*Hp=(W_)(R4.p);
	R1.p=Hp-(_FHS+3);
	GRAN_EXEC(5,2,0,5,0);
	JMP_(c1PP_entry);
	FE_
}
SET_STATIC_HDR(Test_c_closure,Test_c_info,0,,ED_RO_)
};
IFN_(ret_c1Rc) {
ED_RO_(PrelBase_IZh_con_info);
ED_(STBase_SZh_static_closure);
ED_RO_(PrelTup_Z40Z44Z41_inregs_info);
I_ s1K9_;
	FB_
	HEAP_CHK(0,(_FHS+1),0);
	{
	I_ _ccall_result;
	I_ _ccall_arg1=R3.i;
	CALLER_SAVE_Base
	CALLER_SAVE_SpA
	CALLER_SAVE_SuA
	CALLER_SAVE_SpB
	CALLER_SAVE_SuB
	CALLER_SAVE_Ret
	CALLER_SAVE_Hp
	CALLER_SAVE_HpLim
	_ccall_result = (b((_ccall_arg1)));
	CALLER_RESTORE_Base
	CALLER_RESTORE_SpA
	CALLER_RESTORE_SuA
	CALLER_RESTORE_SpB
	CALLER_RESTORE_SuB
	CALLER_RESTORE_Ret
	CALLER_RESTORE_Hp
	CALLER_RESTORE_HpLim
	CALLER_RESTORE_StdUpdRetVec
	CALLER_RESTORE_StkStub
	s1K9_=_ccall_result;
	}
	SET_SPEC_HDR(Hp-_FHS,PrelBase_IZh_con_info,0,1,0);
	*Hp=(W_)(s1K9_);
	R4.p=STBase_SZh_static_closure;
	R3.p=Hp-_FHS;
	SpB=SpB-1;
	R2.d=PrelTup_Z40Z44Z41_inregs_info;
	GRAN_EXEC(10,2,22,22,0);
	JMP_(DIRECT((StgRetAddr)(SpB[1])));
	FE_
}
UNVECTBL(static,vtbl_c1Rc,ret_c1Rc)
IFN_(ret_c1Rb) {
	FB_
	RetReg=(StgRetAddr)UNVEC(ret_c1Rc,vtbl_c1Rc);
	R1.p=*SpA;
	SpA=SpA+1;
	ENT_VIA_NODE();
	GRAN_EXEC(3,1,2,1,0);
	JMP_((P_)(ENTRY_CODE((D_)(INFO_PTR(R1.p)))));
	FE_
}
UNVECTBL(static,vtbl_c1Rb,ret_c1Rb)
SPEC_N_ITBL(s1KM_info,s1KM_entry,StdErrorCode,1,-1,1,1,static const,IF_,0,0,0);
IFN_(s1KM_entry) {
IF_(s1KM_fast1);
	FB_
	ARGS_CHK_A(1);
	R2.p=*SpA;
	SpA=SpA+1;
	GRAN_EXEC(5,2,1,0,0);
	JMP_(s1KM_fast1);
	FE_
}
IFN_(s1KM_fast1) {
	FB_
	STK_CHK(3,1,1,0,0,0,1);
	SpB[1]=(W_)(RetReg);
	RetReg=(StgRetAddr)UNVEC(ret_c1Rb,vtbl_c1Rb);
	SpA[-1]=(P_)(R1.p[_FHS]);
	R1=R2;
	SpA=SpA-1;
	SpB=SpB+1;
	ENT_VIA_NODE();
	GRAN_EXEC(5,1,2,2,0);
	JMP_((P_)(ENTRY_CODE((D_)(INFO_PTR(R1.p)))));
	FE_
}
IFN_(ret_c1Rh) {
ED_RO_(PrelBase_FZh_con_info);
ED_(STBase_SZh_static_closure);
ED_RO_(PrelTup_Z40Z44Z41_inregs_info);
StgFloat s1LF_;
	FB_
	HEAP_CHK(0,(_FHS+1),0);
	{
	StgFloat _ccall_result;
	I_ _ccall_arg1=(I_)(SpB[-1]);
	StgChar _ccall_arg2=(C_)'f';
	StgFloat _ccall_arg3=PK_FLT(SpB);
	StgDouble _ccall_arg4=DblReg1;
	CALLER_SAVE_Base
	CALLER_SAVE_SpA
	CALLER_SAVE_SuA
	CALLER_SAVE_SpB
	CALLER_SAVE_SuB
	CALLER_SAVE_Ret
	CALLER_SAVE_Hp
	CALLER_SAVE_HpLim
	_ccall_result = (c((_ccall_arg1),(_ccall_arg2),(_ccall_arg3),(_ccall_arg4)));
	CALLER_RESTORE_Base
	CALLER_RESTORE_SpA
	CALLER_RESTORE_SuA
	CALLER_RESTORE_SpB
	CALLER_RESTORE_SuB
	CALLER_RESTORE_Ret
	CALLER_RESTORE_Hp
	CALLER_RESTORE_HpLim
	CALLER_RESTORE_StdUpdRetVec
	CALLER_RESTORE_StkStub
	s1LF_=_ccall_result;
	}
	SET_SPEC_HDR(Hp-_FHS,PrelBase_FZh_con_info,0,1,0);
	ASSIGN_FLT(Hp,s1LF_);
	R4.p=STBase_SZh_static_closure;
	R3.p=Hp-_FHS;
	SpB=SpB-3;
	R2.d=PrelTup_Z40Z44Z41_inregs_info;
	GRAN_EXEC(11,2,24,22,0);
	JMP_(DIRECT((StgRetAddr)(SpB[1])));
	FE_
}
UNVECTBL(static,vtbl_c1Rh,ret_c1Rh)
IFN_(ret_c1Rg) {
ID_(a15t_closure);
	FB_
	RetReg=(StgRetAddr)UNVEC(ret_c1Rh,vtbl_c1Rh);
	R1.p=a15t_closure;
	ASSIGN_FLT(SpB+1,FltReg1);
	SpB=SpB+1;
	ENT_VIA_NODE();
	GRAN_EXEC(5,1,1,1,0);
	JMP_((P_)(ENTRY_CODE((D_)(INFO_PTR(R1.p)))));
	FE_
}
UNVECTBL(static,vtbl_c1Rg,ret_c1Rg)
IFN_(ret_c1Rf) {
ID_(a15r_closure);
	FB_
	RetReg=(StgRetAddr)UNVEC(ret_c1Rg,vtbl_c1Rg);
	R1.p=a15r_closure;
	SpB[1]=(W_)(R3.i);
	SpB=SpB+1;
	ENT_VIA_NODE();
	GRAN_EXEC(5,1,1,1,0);
	JMP_((P_)(ENTRY_CODE((D_)(INFO_PTR(R1.p)))));
	FE_
}
UNVECTBL(static,vtbl_c1Rf,ret_c1Rf)
IFN_(ret_c1Re) {
	FB_
	RetReg=(StgRetAddr)UNVEC(ret_c1Rf,vtbl_c1Rf);
	R1.p=*SpA;
	SpA=SpA+1;
	ENT_VIA_NODE();
	GRAN_EXEC(3,1,2,1,0);
	JMP_((P_)(ENTRY_CODE((D_)(INFO_PTR(R1.p)))));
	FE_
}
UNVECTBL(static,vtbl_c1Re,ret_c1Re)
SPEC_N_ITBL(c1OR_info,c1OR_entry,StdErrorCode,1,-1,1,1,static const,IF_,0,0,0);
IFN_(c1OR_entry) {
IF_(c1OR_fast1);
	FB_
	ARGS_CHK_A(1);
	R2.p=*SpA;
	SpA=SpA+1;
	GRAN_EXEC(5,2,1,0,0);
	JMP_(c1OR_fast1);
	FE_
}
IFN_(c1OR_fast1) {
	FB_
	STK_CHK(3,1,3,0,0,0,1);
	SpB[1]=(W_)(RetReg);
	RetReg=(StgRetAddr)UNVEC(ret_c1Re,vtbl_c1Re);
	SpA[-1]=(P_)(R1.p[_FHS]);
	R1=R2;
	SpA=SpA-1;
	SpB=SpB+1;
	ENT_VIA_NODE();
	GRAN_EXEC(5,1,2,2,0);
	JMP_((P_)(ENTRY_CODE((D_)(INFO_PTR(R1.p)))));
	FE_
}
SPEC_N_ITBL(s1M6_info,s1M6_entry,StdErrorCode,1,-1,1,0,static const,IF_,0,0,0);
IFN_(s1M6_entry) {
IF_(s1M6_fast1);
	FB_
	ARGS_CHK_A(1);
	R2.p=*SpA;
	SpA=SpA+1;
	GRAN_EXEC(5,2,1,0,0);
	JMP_(s1M6_fast1);
	FE_
}
IFN_(s1M6_fast1) {
ID_RO_(c1OR_info);
IF_(c1OR_entry);
	FB_
	HEAP_CHK(3,(_FHS+1),1);
	SET_SPEC_HDR(Hp-_FHS,c1OR_info,0,1,1);
	*Hp=(W_)(R2.p);
	R1.p=Hp-_FHS;
	GRAN_EXEC(5,2,0,2,0);
	JMP_(c1OR_entry);
	FE_
}
SPEC_N_ITBL(s1Ma_info,s1Ma_entry,StdErrorCode,1,-1,1,0,static const,IF_,0,0,0);
IFN_(s1Ma_entry) {
IF_(s1Ma_fast1);
	FB_
	ARGS_CHK_A(1);
	R2.p=*SpA;
	SpA=SpA+1;
	GRAN_EXEC(5,2,1,0,0);
	JMP_(s1Ma_fast1);
	FE_
}
IFN_(s1Ma_fast1) {
ID_RO_(s1KM_info);
ID_RO_(s1M6_info);
ED_(STBase_thenPrimIO_closure);
	FB_
	STK_CHK(3,2,0,0,0,0,1);
	HEAP_CHK(3,((_FHS*2)+2),1);
	SET_SPEC_HDR(Hp-((_FHS*2)+1),s1KM_info,0,1,1);
	Hp[-(_FHS+1)]=(W_)(R2.p);
	SET_SPEC_HDR(Hp-_FHS,s1M6_info,0,1,0);
	SpA[-1]=Hp-_FHS;
	SpA[-2]=Hp-((_FHS*2)+1);
	R1.p=STBase_thenPrimIO_closure;
	SpA=SpA-2;
	ENT_VIA_NODE();
	GRAN_EXEC(9,2,3,5,0);
	JMP_((P_)(ENTRY_CODE((D_)(INFO_PTR(R1.p)))));
	FE_
}
STATIC_ITBL(Test_d_info,Test_d_entry,StdErrorCode,1,-1,(STATIC_VHS+2),0,const,EF_,0,0,0);
FN_(Test_d_entry) {
ID_RO_(s1Ma_info);
ED_(Test_a_closure);
ED_(STBase_thenPrimIO_closure);
	FB_
	STK_CHK(1,2,4,0,0,0,1);
	HEAP_CHK(1,(BH_HS+_FHS+3),1);
	SET_BH_HDR(Hp-(BH_HS+_FHS+2),BH_UPD_info,0,(BH_VHS+2),0);
	UPD_CAF(R1.p,Hp-(BH_HS+_FHS+2));
	PUSH_STD_UPD_FRAME(Hp-(BH_HS+_FHS+2),0,0);
	SET_SPEC_HDR(Hp-_FHS,s1Ma_info,0,1,0);
	SpA[-1]=Hp-_FHS;
	SpA[-2]=Test_a_closure;
	RetReg=StdUpdRetVecReg;
	R1.p=STBase_thenPrimIO_closure;
	SpA=SpA-2;
	SpB=SpB+4;
	ENT_VIA_NODE();
	GRAN_EXEC(23,2,3,11,0);
	JMP_((P_)(ENTRY_CODE((D_)(INFO_PTR(R1.p)))));
	FE_
}
SET_STATIC_HDR(Test_d_closure,Test_d_info,0,,ED_RO_)
  , (W_)0, (W_)0
};
ghc: module version changed to 1; reason: no old .hi file
