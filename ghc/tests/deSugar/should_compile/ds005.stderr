ds005.hs:13: 
    Warning: Possibly incomplete patterns
	in the definition of function `mappairs''


================================================================================
Desugared:
Rec {
mappairs'{-r3C,x-}  ::  _forall_
			[tal0 tal6 tala]
			=>
			(tal0 -> tal6 -> tala) -> [tal0] -> [tal6] -> [tala]
{-# L #-}
mappairs'{-r3C,x-} =
    _/\_ tal0 tal6 tala ->
	_letrec_ {
	  mappairs'_akt  ::  (tal0 -> tal6 -> tala)
			     -> [tal0]
			     -> [tal6]
			     -> [tala]
	  {-# L #-}
	  mappairs'_akt =
	      \ f_r3r  ::  tal0 -> tal6 -> tala
		{-# L #-}
		f_r3r ds_dsz  ::  [tal0]
		      {-# L #-}
		      ds_dsz ys_r3s  ::  [tal6]
			     {-# L #-}
			     ys_r3s ->
		  let {
		    fail_dsE  ::  [tala]
		    {-# L #-}
		    fail_dsE =
			GHCerr.patError{-8r,w-}
			    _@_ [tala] _string_ "ds005.hs:13|function `mappairs''" } in
		  let { fail_du4  ::  [tala]
			{-# L #-}
			fail_du4 =
		    let {
		      fail_dtG  ::  [tala]
		      {-# L #-}
		      fail_dtG =
			  case ds_dsz of {
			    PrelBase.[]{-5i,w-}{i} -> fail_dsE;
			    PrelBase.:{-55,w-}{i} x_r3y xs_r3z ->
				case ys_r3s of {
				  PrelBase.[]{-5i,w-}{i} -> fail_dsE;
				  PrelBase.:{-55,w-}{i} y_r3A ys_r3B ->
				      let {
					f_r3x  ::  tal0 -> tal6 -> tala
					{-# L #-}
					f_r3x =
					    f_r3r } in
				      let {
					ds_dtc  ::  tala
					{-# L #-}
					ds_dtc =
					    f_r3x x_r3y y_r3A } in
				      let {
					ds_dtg  ::  [tala]
					{-# L #-}
					ds_dtg =
					    mappairs'_akt f_r3x xs_r3z ys_r3B
				      } in  PrelBase.:{-55,w-}{i} _@_ tala ds_dtc ds_dtg;
				};
			  }
		    } in 
		      case ys_r3s of {
			PrelBase.:{-55,w-}{i} ds_dtN ds_dtO -> fail_dtG;
			PrelBase.[]{-5i,w-}{i} ->
			    let {
			      x_r3v  ::  [tal0]
			      {-# L #-}
			      x_r3v =
				  ds_dsz } in
			    let {
			      f_r3u  ::  tal0 -> tal6 -> tala
			      {-# L #-}
			      f_r3u =
				  f_r3r
			    } in  PrelBase.[]{-5i,w-}{i} _@_ tala;
		      }
		  } in
		  case ds_dsz of {
		    PrelBase.:{-55,w-}{i} ds_dub ds_duc -> fail_du4;
		    PrelBase.[]{-5i,w-}{i} -> PrelBase.[]{-5i,w-}{i} _@_ tala;
		  };
	} in  mappairs'_akt
mappairs{-r3D,x-}  ::  _forall_
		       [talU tam0 tam4]
		       =>
		       (talU -> tam0 -> tam4) -> [talU] -> [tam0] -> [tam4]
{-# L #-}
mappairs{-r3D,x-} =
    _/\_ talU tam0 tam4 ->
	_letrec_ {
	  mappairs_alj  ::  (talU -> tam0 -> tam4)
			    -> [talU]
			    -> [tam0]
			    -> [tam4]
	  {-# L #-}
	  mappairs_alj =
	      \ f_r3e  ::  talU -> tam0 -> tam4
		{-# L #-}
		f_r3e ds_duF  ::  [talU]
		      {-# L #-}
		      ds_duF ys_r3f  ::  [tam0]
			     {-# L #-}
			     ys_r3f ->
		  case ds_duF of {
		    PrelBase.[]{-5i,w-}{i} -> PrelBase.[]{-5i,w-}{i} _@_ tam4;
		    PrelBase.:{-55,w-}{i} x_r3i xs_r3j ->
			case ys_r3f of {
			  PrelBase.[]{-5i,w-}{i} ->
			      let {
				f_r3h  ::  talU -> tam0 -> tam4
				{-# L #-}
				f_r3h =
				    f_r3e
			      } in  PrelBase.[]{-5i,w-}{i} _@_ tam4;
			  PrelBase.:{-55,w-}{i} y_r3o ys_r3p ->
			      let {
				xs_r3n  ::  [talU]
				{-# L #-}
				xs_r3n =
				    xs_r3j } in
			      let {
				x_r3m  ::  talU
				{-# L #-}
				x_r3m =
				    x_r3i } in
			      let {
				f_r3l  ::  talU -> tam0 -> tam4
				{-# L #-}
				f_r3l =
				    f_r3e } in
			      let {
				ds_dvs  ::  tam4
				{-# L #-}
				ds_dvs =
				    f_r3l x_r3m y_r3o } in
			      let {
				ds_dvw  ::  [tam4]
				{-# L #-}
				ds_dvw =
				    mappairs_alj f_r3l xs_r3n ys_r3p
			      } in  PrelBase.:{-55,w-}{i} _@_ tam4 ds_dvs ds_dvw;
			};
		  };
	} in  mappairs_alj
end Rec }
