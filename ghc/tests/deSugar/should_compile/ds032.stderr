ds032.hs:12: 
    Warning: Possibly incomplete patterns
	in the definition of function `flatten'


================================================================================
Desugared:
Rec {
d.Fractional_a11b  :: 
    {PrelNum.Fractional{-26,p-} PrelBase.Float{-3c,p-}}
{-# L #-}
d.Fractional_a11b =
    PrelNum.$d23{-rGg,p-}
fromRational_a17D  :: 
    PrelNum.Rational{-3r,p-} -> PrelBase.Float{-3c,p-}
{-# L #-}
fromRational_a17D =
    PrelNum.fromRational{-8T,p-}
	_@_ PrelBase.Float{-3c,p-} d.Fractional_a11b
lit_a17V  :: 
    PrelBase.Float{-3c,p-}
{-# L #-}
lit_a17V =
    fromRational_a17D
	_rational_  0 1
d.Eq_a11e  :: 
    {PrelBase.Eq{-23,p-} PrelBase.Float{-3c,p-}}
{-# L #-}
d.Eq_a11e =
    PrelNum.$d27{-rGk,p-}
==_a17U  :: 
    PrelBase.Float{-3c,p-}
    -> PrelBase.Float{-3c,p-}
    -> PrelBase.Bool{-34,p-}
{-# L #-}
==_a17U =
    PrelBase.=={-8Y,p-}
	_@_ PrelBase.Float{-3c,p-} d.Eq_a11e
fromRational_a17T  :: 
    PrelNum.Rational{-3r,p-} -> PrelBase.Float{-3c,p-}
{-# L #-}
fromRational_a17T =
    fromRational_a17D
lit_a17S  :: 
    PrelBase.Float{-3c,p-}
{-# L #-}
lit_a17S =
    fromRational_a17T
	_rational_  1 1
fromRational_a17R  :: 
    PrelNum.Rational{-3r,p-} -> PrelBase.Float{-3c,p-}
{-# L #-}
fromRational_a17R =
    fromRational_a17D
lit_a17Q  :: 
    PrelBase.Float{-3c,p-}
{-# L #-}
lit_a17Q =
    fromRational_a17R
	_rational_  11 10
fromRational_a17P  :: 
    PrelNum.Rational{-3r,p-} -> PrelBase.Float{-3c,p-}
{-# L #-}
fromRational_a17P =
    fromRational_a17D
lit_a17K  :: 
    PrelBase.Float{-3c,p-}
{-# L #-}
lit_a17K =
    fromRational_a17P
	_rational_  6 5
==_a18C  :: 
    PrelBase.Float{-3c,p-}
    -> PrelBase.Float{-3c,p-}
    -> PrelBase.Bool{-34,p-}
{-# L #-}
==_a18C =
    ==_a17U
flatten_a10r  :: 
    PrelBase.Int{-3g,p-}
    -> PrelBase.Bool{-34,p-}
    -> PrelBase.Float{-3c,p-}
    -> [(PrelBase.Int{-3g,p-}, PrelBase.Float{-3c,p-})]
    -> PrelBase.String{-rzM,p-}
{-# L #-}
flatten_a10r =
    \ n_r3i  :: 
	  PrelBase.Int{-3g,p-}
      {-# L #-}
      n_r3i nlp_r3k  :: 
		PrelBase.Bool{-34,p-}
	    {-# L #-}
	    nlp_r3k ds_d19G  :: 
			PrelBase.Float{-3c,p-}
		    {-# L #-}
		    ds_d19G seqs_r3n  :: 
				[(PrelBase.Int{-3g,p-}, PrelBase.Float{-3c,p-})]
			    {-# L #-}
			    seqs_r3n ->
	let {
	  fail_d19H  :: 
	      PrelBase.String{-rzM,p-}
	  {-# L #-}
	  fail_d19H =
	      GHCerr.patError{-8r,p-}
		  _@_ PrelBase.String{-rzM,p-}
		  _string_ "ds032.hs:12|function `flatten'"
	} in 
	  case ds_d19G of { PrelBase.F#{-59,p-}{i} ds_d19Q  ->
	  case# ds_d19Q of {
	    _float_ 0.0000000000000000 ->
		flattenS{-r3,x-}
		    nlp_r3k seqs_r3n;
	    _float_ 1.0000000000000000 ->
		let {
		  seqs_r3u  :: 
		      [(PrelBase.Int{-3g,p-}, PrelBase.Float{-3c,p-})]
		  {-# L #-}
		  seqs_r3u =
		      seqs_r3n } in
		let {
		  nlp_r3r  :: 
		      PrelBase.Bool{-34,p-}
		  {-# L #-}
		  nlp_r3r =
		      nlp_r3k } in
		let {
		  n_r3p  :: 
		      PrelBase.Int{-3g,p-}
		  {-# L #-}
		  n_r3p =
		      n_r3i } in
		let { ds_d1at  :: 
			  [(PrelBase.Int{-3g,p-}, PrelBase.Float{-3c,p-})]
		      {-# L #-}
		      ds_d1at =
		  let {
		    ds_d1aG  :: 
			(PrelBase.Int{-3g,p-}, PrelBase.Float{-3c,p-})
		    {-# L #-}
		    ds_d1aG =
			PrelTup.(,){-62,p-}{i}
			    {_@_ PrelBase.Int{-3g,p-}
			     _@_ PrelBase.Float{-3c,p-}
			     n_r3p
			     lit_a17K}
		  } in 
		    PrelBase.:{-55,p-}{i}
			_@_ (PrelBase.Int{-3g,p-}, PrelBase.Float{-3c,p-}) ds_d1aG seqs_r3u
		} in
		flatten{-r1,x-}
		    n_r3p nlp_r3r lit_a17Q ds_d1at;
	    ds_d1b0 ->
		fail_d19H;
	  };}
flattenS_a10s  :: 
    PrelBase.Bool{-34,p-}
    -> [(PrelBase.Int{-3g,p-}, PrelBase.Float{-3c,p-})]
    -> PrelBase.String{-rzM,p-}
{-# L #-}
flattenS_a10s =
    \ nlp_r3w  :: 
	  PrelBase.Bool{-34,p-}
      {-# L #-}
      nlp_r3w ds_d1b6  :: 
		  [(PrelBase.Int{-3g,p-}, PrelBase.Float{-3c,p-})]
	      {-# L #-}
	      ds_d1b6 ->
	case ds_d1b6 of {
	  PrelBase.[]{-5i,p-}{i} ->
	      PrelBase.[]{-5i,p-}{i}
		  {_@_ PrelBase.Char{-38,p-}};
	  PrelBase.:{-55,p-}{i} ds_d1bl seqs_r3D ->
	      case ds_d1bl of { PrelTup.(,){-62,p-}{i} col_r3B seq_r3C  ->
	      let {
		nlp_r3z  :: 
		    PrelBase.Bool{-34,p-}
		{-# L #-}
		nlp_r3z =
		    nlp_r3w
	      } in 
		flatten{-r1,x-}
		    col_r3B nlp_r3z seq_r3C seqs_r3D;};
	}
flatten{-r1,x-}  :: 
    PrelBase.Int{-3g,p-}
    -> PrelBase.Bool{-34,p-}
    -> PrelBase.Float{-3c,p-}
    -> [(PrelBase.Int{-3g,p-}, PrelBase.Float{-3c,p-})]
    -> PrelBase.String{-rzM,p-}
{-# L #-}
flatten{-r1,x-} =
    flatten_a10r
flattenS{-r3,x-}  :: 
    PrelBase.Bool{-34,p-}
    -> [(PrelBase.Int{-3g,p-}, PrelBase.Float{-3c,p-})]
    -> PrelBase.String{-rzM,p-}
{-# L #-}
flattenS{-r3,x-} =
    flattenS_a10s
end Rec }
