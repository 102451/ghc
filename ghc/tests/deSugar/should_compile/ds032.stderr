ds032.hs:12: 
    Warning: Possibly incomplete patterns
	in the definition of function `flatten'


================================================================================
Desugared:
Rec {
==_a11H  ::  PrelBase.Float{-3c,W-}
	     -> PrelBase.Float{-3c,W-}
	     -> PrelBase.Bool{-34,W-}
{-# L #-}
==_a11H =
    ==_a11J
flatten_aUn  ::  PrelBase.Int{-3g,W-}
		 -> PrelBase.Bool{-34,W-}
		 -> PrelBase.Float{-3c,W-}
		 -> [(PrelBase.Int{-3g,W-}, PrelBase.Float{-3c,W-})]
		 -> PrelBase.String{-rAJ,p-}
{-# L #-}
flatten_aUn =
    \ n_r3i  ::  PrelBase.Int{-3g,W-}
      {-# L #-}
      n_r3i nlp_r3j  ::  PrelBase.Bool{-34,W-}
	    {-# L #-}
	    nlp_r3j ds_d13a  ::  PrelBase.Float{-3c,W-}
		    {-# L #-}
		    ds_d13a seqs_r3k  ::  [(PrelBase.Int{-3g,W-}, PrelBase.Float{-3c,W-})]
			    {-# L #-}
			    seqs_r3k ->
	let {
	  fail_d13b  ::  PrelBase.String{-rAJ,p-}
	  {-# L #-}
	  fail_d13b =
	      GHCerr.patError{-8r,w-}
		  _@_ PrelBase.String{-rAJ,p-}
		  _string_ "ds032.hs:12|function `flatten'"
	} in 
	  case ds_d13a of { PrelBase.F#{-59,w-}{i} ds_d13k  ->
	  case# ds_d13k of {
	    _float_ 0.0000000000000000 -> flattenS{-r3,x-} nlp_r3j seqs_r3k;
	    _float_ 1.0000000000000000 ->
		let {
		  seqs_r3o  ::  [(PrelBase.Int{-3g,W-}, PrelBase.Float{-3c,W-})]
		  {-# L #-}
		  seqs_r3o =
		      seqs_r3k } in
		let {
		  nlp_r3n  ::  PrelBase.Bool{-34,W-}
		  {-# L #-}
		  nlp_r3n =
		      nlp_r3j } in
		let {
		  n_r3m  ::  PrelBase.Int{-3g,W-}
		  {-# L #-}
		  n_r3m =
		      n_r3i } in
		let { ds_d13X  ::  [(PrelBase.Int{-3g,W-}, PrelBase.Float{-3c,W-})]
		      {-# L #-}
		      ds_d13X =
		  let {
		    ds_d14a  ::  (PrelBase.Int{-3g,W-}, PrelBase.Float{-3c,W-})
		    {-# L #-}
		    ds_d14a =
			PrelTup.(,){-62,w-}{i}
			    {_@_ PrelBase.Int{-3g,W-}
			     _@_ PrelBase.Float{-3c,W-}
			     n_r3m
			     lit_a11V}
		  } in 
		    PrelBase.:{-55,w-}{i}
			_@_ (PrelBase.Int{-3g,W-}, PrelBase.Float{-3c,W-}) ds_d14a seqs_r3o
		} in
		flatten{-r1,x-} n_r3m nlp_r3n lit_a11S ds_d13X;
	    ds_d14u -> fail_d13b;
	  };}
flattenS_aUo  ::  PrelBase.Bool{-34,W-}
		  -> [(PrelBase.Int{-3g,W-}, PrelBase.Float{-3c,W-})]
		  -> PrelBase.String{-rAJ,p-}
{-# L #-}
flattenS_aUo =
    \ nlp_r3q  ::  PrelBase.Bool{-34,W-}
      {-# L #-}
      nlp_r3q ds_d14A  ::  [(PrelBase.Int{-3g,W-}, PrelBase.Float{-3c,W-})]
	      {-# L #-}
	      ds_d14A ->
	case ds_d14A of {
	  PrelBase.[]{-5i,w-}{i} ->
	      PrelBase.[]{-5i,w-}{i} {_@_ PrelBase.Char{-38,W-}};
	  PrelBase.:{-55,w-}{i} ds_d14P seqs_r3v ->
	      case ds_d14P of { PrelTup.(,){-62,w-}{i} col_r3t seq_r3u  ->
	      let {
		nlp_r3s  ::  PrelBase.Bool{-34,W-}
		{-# L #-}
		nlp_r3s =
		    nlp_r3q
	      } in  flatten{-r1,x-} col_r3t nlp_r3s seq_r3u seqs_r3v;};
	}
flatten{-r1,x-}  ::  PrelBase.Int{-3g,W-}
		     -> PrelBase.Bool{-34,W-}
		     -> PrelBase.Float{-3c,W-}
		     -> [(PrelBase.Int{-3g,W-}, PrelBase.Float{-3c,W-})]
		     -> PrelBase.String{-rAJ,p-}
{-# L #-}
flatten{-r1,x-} =
    flatten_aUn
flattenS{-r3,x-}  ::  PrelBase.Bool{-34,W-}
		      -> [(PrelBase.Int{-3g,W-}, PrelBase.Float{-3c,W-})]
		      -> PrelBase.String{-rAJ,p-}
{-# L #-}
flattenS{-r3,x-} =
    flattenS_aUo
d.Fractional_aV4  ::  {PrelNum.Fractional{-26,p-} PrelBase.Float{-3c,W-}}
{-# L #-}
d.Fractional_aV4 =
    PrelNum.$d23{-rCU,p-}
fromRational_a11K  ::  PrelNum.Rational{-3r,p-}
		       -> PrelBase.Float{-3c,W-}
{-# L #-}
fromRational_a11K =
    PrelNum.fromRational{-8T,p-}
	_@_ PrelBase.Float{-3c,W-} d.Fractional_aV4
lit_a11L  ::  PrelBase.Float{-3c,W-}
{-# L #-}
lit_a11L =
    fromRational_a11K _rational_  0 1
d.Eq_aV7  ::  {PrelBase.Eq{-23,p-} PrelBase.Float{-3c,W-}}
{-# L #-}
d.Eq_aV7 =
    PrelNum.$d27{-rCY,p-}
==_a11J  ::  PrelBase.Float{-3c,W-}
	     -> PrelBase.Float{-3c,W-}
	     -> PrelBase.Bool{-34,W-}
{-# L #-}
==_a11J =
    PrelBase.=={-8Y,p-} _@_ PrelBase.Float{-3c,W-} d.Eq_aV7
fromRational_a11O  ::  PrelNum.Rational{-3r,p-}
		       -> PrelBase.Float{-3c,W-}
{-# L #-}
fromRational_a11O =
    fromRational_a11K
lit_a11P  ::  PrelBase.Float{-3c,W-}
{-# L #-}
lit_a11P =
    fromRational_a11O _rational_  1 1
fromRational_a11R  ::  PrelNum.Rational{-3r,p-}
		       -> PrelBase.Float{-3c,W-}
{-# L #-}
fromRational_a11R =
    fromRational_a11K
lit_a11S  ::  PrelBase.Float{-3c,W-}
{-# L #-}
lit_a11S =
    fromRational_a11R _rational_  11 10
fromRational_a11U  ::  PrelNum.Rational{-3r,p-}
		       -> PrelBase.Float{-3c,W-}
{-# L #-}
fromRational_a11U =
    fromRational_a11K
lit_a11V  ::  PrelBase.Float{-3c,W-}
{-# L #-}
lit_a11V =
    fromRational_a11U _rational_  6 5
end Rec }
