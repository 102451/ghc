ds022.hs:5: 
    Warning: Possibly incomplete patterns
	in the definition of function `f'
ds022.hs:10: 
    Warning: Possibly incomplete patterns
	in the definition of function `g'
ds022.hs:15: 
    Warning: Possibly incomplete patterns
	in the definition of function `h'
ds022.hs:22: 
    Warning: Pattern match(es) completely overlapped
	in the definition of function `i'
ds022.hs:23: 
    Warning: Pattern match(es) completely overlapped
	in the definition of function `i'
ds022.hs:20: 
    Warning: Possibly incomplete patterns
	in the definition of function `i'


================================================================================
Desugared:
Rec {
i{-r3s,x-}  ::  _forall_
		[taUw taUD taVd]
		=>
		{PrelNum.Fractional{-26,p-} taUD}
		-> {PrelBase.Num{-2c,p-} taUw}
		-> taUw
		-> taUD
		-> [taVd]
{-# L #-}
i{-r3s,x-} =
    _/\_ taUw taUD taVd -> \ d.Fractional_aVl  ::  {PrelNum.Fractional{-26,p-} taUD}
			     {-# L #-}
			     d.Fractional_aVl d.Num_aVg  ::  {PrelBase.Num{-2c,p-} taUw}
					      {-# L #-}
					      d.Num_aVg ->
	_letrec_ {
	  d.Eq_aVi  ::  {PrelBase.Eq{-23,p-} taUw}
	  {-# L #-}
	  d.Eq_aVi =
	      PrelBase.scsel_NumPrelBaseEq{-a1ls,p-} _@_ taUw d.Num_aVg;
	  d.Num_aY9  ::  {PrelBase.Num{-2c,p-} taUD}
	  {-# L #-}
	  d.Num_aY9 =
	      PrelNum.scsel_FractionalPrelBaseNum{-a1nt,p-}
		  _@_ taUD d.Fractional_aVl;
	  d.Eq_aVn  ::  {PrelBase.Eq{-23,p-} taUD}
	  {-# L #-}
	  d.Eq_aVn =
	      PrelBase.scsel_NumPrelBaseEq{-a1ls,p-} _@_ taUD d.Num_aY9;
	  fromInt_a1l6  ::  PrelBase.Int{-3g,W-} -> taUw
	  {-# L #-}
	  fromInt_a1l6 =
	      PrelBase.fromInt{-8R,p-} _@_ taUw d.Num_aVg;
	  lit_a1l7  ::  taUw
	  {-# L #-}
	  lit_a1l7 =
	      let {
		ds_d1nQ  ::  PrelBase.Int{-3g,W-}
		{-# L #-}
		ds_d1nQ =
		    PrelBase.I#{-5b,w-}{i} 1
	      } in  fromInt_a1l6 ds_d1nQ;
	  ==_a1l8  ::  taUw -> taUw -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a1l8 =
	      PrelBase.=={-8Y,p-} _@_ taUw d.Eq_aVi;
	  fromRational_a1l9  ::  PrelNum.Rational{-3r,p-} -> taUD
	  {-# L #-}
	  fromRational_a1l9 =
	      PrelNum.fromRational{-8T,p-} _@_ taUD d.Fractional_aVl;
	  lit_a1la  ::  taUD
	  {-# L #-}
	  lit_a1la =
	      fromRational_a1l9 _rational_  11 10;
	  ==_a1lb  ::  taUD -> taUD -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a1lb =
	      PrelBase.=={-8Y,p-} _@_ taUD d.Eq_aVn;
	  fromInt_a1lc  ::  PrelBase.Int{-3g,W-} -> taUw
	  {-# L #-}
	  fromInt_a1lc =
	      fromInt_a1l6;
	  lit_a1ld  ::  taUw
	  {-# L #-}
	  lit_a1ld =
	      let {
		ds_d1oy  ::  PrelBase.Int{-3g,W-}
		{-# L #-}
		ds_d1oy =
		    PrelBase.I#{-5b,w-}{i} 2
	      } in  fromInt_a1lc ds_d1oy;
	  ==_a1le  ::  taUw -> taUw -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a1le =
	      ==_a1l8;
	  fromRational_a1lf  ::  PrelNum.Rational{-3r,p-} -> taUD
	  {-# L #-}
	  fromRational_a1lf =
	      fromRational_a1l9;
	  lit_a1lg  ::  taUD
	  {-# L #-}
	  lit_a1lg =
	      fromRational_a1lf _rational_  11 5;
	  ==_a1lh  ::  taUD -> taUD -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a1lh =
	      ==_a1lb;
	  lit_a1li  ::  taUw
	  {-# L #-}
	  lit_a1li =
	      lit_a1l7;
	  ==_a1lj  ::  taUw -> taUw -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a1lj =
	      ==_a1l8;
	  lit_a1lk  ::  taUD
	  {-# L #-}
	  lit_a1lk =
	      lit_a1la;
	  ==_a1ll  ::  taUD -> taUD -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a1ll =
	      ==_a1lb;
	  lit_a1lm  ::  taUw
	  {-# L #-}
	  lit_a1lm =
	      lit_a1ld;
	  ==_a1ln  ::  taUw -> taUw -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a1ln =
	      ==_a1l8;
	  lit_a1lo  ::  taUD
	  {-# L #-}
	  lit_a1lo =
	      lit_a1lg;
	  ==_a1lp  ::  taUD -> taUD -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a1lp =
	      ==_a1lb;
	  i_aUr  ::  taUw -> taUD -> [taVd]
	  {-# L #-}
	  i_aUr =
	      \ ds_d1pk  ::  taUw
		{-# L #-}
		ds_d1pk ds_d1pn  ::  taUD
			{-# L #-}
			ds_d1pn ->
		  let {
		    fail_d1po  ::  [taVd]
		    {-# L #-}
		    fail_d1po =
			GHCerr.patError{-8r,w-}
			    _@_ [taVd] _string_ "ds022.hs:20|function `i'" } in
		  let {
		    fail_d1q6  ::  [taVd]
		    {-# L #-}
		    fail_d1q6 =
			case ==_a1le lit_a1ld ds_d1pk of {
			  PrelBase.True{-5E,w-}{i} ->
			      case ==_a1lh lit_a1lg ds_d1pn of {
				PrelBase.True{-5E,w-}{i} -> PrelBase.[]{-5i,w-}{i} _@_ taVd;
				PrelBase.False{-58,w-}{i} -> fail_d1po;
			      };
			  PrelBase.False{-58,w-}{i} -> fail_d1po;
			}
		  } in 
		    case ==_a1l8 lit_a1l7 ds_d1pk of {
		      PrelBase.True{-5E,w-}{i} ->
			  case ==_a1lb lit_a1la ds_d1pn of {
			    PrelBase.True{-5E,w-}{i} -> PrelBase.[]{-5i,w-}{i} _@_ taVd;
			    PrelBase.False{-58,w-}{i} -> fail_d1q6;
			  };
		      PrelBase.False{-58,w-}{i} -> fail_d1q6;
		    };
	} in  i_aUr
h{-r3t,x-}  ::  _forall_
		[taVQ]
		=>
		PrelBase.Char{-38,W-} -> [PrelBase.Char{-38,W-}] -> [taVQ]
{-# L #-}
h{-r3t,x-} =
    _/\_ taVQ ->
	_letrec_ {
	  ==_a1qR  ::  [PrelBase.Char{-38,W-}]
		       -> [PrelBase.Char{-38,W-}]
		       -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a1qR =
	      ==_a1l5;
	  h_aVt  ::  PrelBase.Char{-38,W-}
		     -> [PrelBase.Char{-38,W-}]
		     -> [taVQ]
	  {-# L #-}
	  h_aVt =
	      \ ds_d1rb  ::  PrelBase.Char{-38,W-}
		{-# L #-}
		ds_d1rb ds_d1rc  ::  [PrelBase.Char{-38,W-}]
			{-# L #-}
			ds_d1rc ->
		  let {
		    fail_d1rd  ::  [taVQ]
		    {-# L #-}
		    fail_d1rd =
			GHCerr.patError{-8r,w-}
			    _@_ [taVQ] _string_ "ds022.hs:15|function `h'"
		  } in 
		    case ds_d1rb of { PrelBase.C#{-54,w-}{i} ds_d1rm  ->
		    case# ds_d1rm of {
		      'a' ->
			  case ds_d1rc of {
			    PrelBase.:{-55,w-}{i} ds_d1rB ds_d1rC -> fail_d1rd;
			    PrelBase.[]{-5i,w-}{i} -> PrelBase.[]{-5i,w-}{i} _@_ taVQ;
			  };
		      ''' ->
			  case ==_a1qR _string_ "foo" ds_d1rc of {
			    PrelBase.True{-5E,w-}{i} -> PrelBase.[]{-5i,w-}{i} _@_ taVQ;
			    PrelBase.False{-58,w-}{i} -> fail_d1rd;
			  };
		      '"' ->
			  case ds_d1rc of {
			    PrelBase.[]{-5i,w-}{i} -> fail_d1rd;
			    PrelBase.:{-55,w-}{i} ds_d1su ds_d1sv ->
				case ds_d1su of { PrelBase.C#{-54,w-}{i} ds_d1sE  ->
				case# ds_d1sE of {
				  'b' ->
				      case ds_d1sv of {
					PrelBase.[]{-5i,w-}{i} -> fail_d1rd;
					PrelBase.:{-55,w-}{i} ds_d1sZ ds_d1t0 ->
					    case ds_d1sZ of { PrelBase.C#{-54,w-}{i} ds_d1t9  ->
					    case# ds_d1t9 of {
					      'a' ->
						  case ds_d1t0 of {
						    PrelBase.[]{-5i,w-}{i} -> fail_d1rd;
						    PrelBase.:{-55,w-}{i} ds_d1tu ds_d1tv ->
							case
							    ds_d1tu
							of {
							PrelBase.C#{-54,w-}{i} ds_d1tE  ->
							case# ds_d1tE of {
							  'r' ->
							      case ds_d1tv of {
								PrelBase.:{-55,w-}{i} ds_d1tT ds_d1tU ->
								    fail_d1rd;
								PrelBase.[]{-5i,w-}{i} ->
								    PrelBase.[]{-5i,w-}{i} _@_ taVQ;
							      };
							  ds_d1u5 -> fail_d1rd;
							};};
						  };
					      ds_d1u8 -> fail_d1rd;
					    };};
				      };
				  ds_d1ub -> fail_d1rd;
				};};
			  };
		      '¨' ->
			  let {
			    blob_r3r  ::  [PrelBase.Char{-38,W-}]
			    {-# L #-}
			    blob_r3r =
				ds_d1rc
			  } in  PrelBase.[]{-5i,w-}{i} _@_ taVQ;
		      ds_d1up -> fail_d1rd;
		    };};
	} in  h_aVt
g{-r3u,x-}  ::  _forall_
		[taVZ taW6 taWG]
		=>
		{PrelNum.Fractional{-26,p-} taW6}
		-> {PrelBase.Num{-2c,p-} taVZ}
		-> taVZ
		-> taW6
		-> [taWG]
{-# L #-}
g{-r3u,x-} =
    _/\_ taVZ taW6 taWG -> \ d.Fractional_aWO  ::  {PrelNum.Fractional{-26,p-} taW6}
			     {-# L #-}
			     d.Fractional_aWO d.Num_aWJ  ::  {PrelBase.Num{-2c,p-} taVZ}
					      {-# L #-}
					      d.Num_aWJ ->
	_letrec_ {
	  d.Eq_aWL  ::  {PrelBase.Eq{-23,p-} taVZ}
	  {-# L #-}
	  d.Eq_aWL =
	      PrelBase.scsel_NumPrelBaseEq{-a1ls,p-} _@_ taVZ d.Num_aWJ;
	  d.Num_aYa  ::  {PrelBase.Num{-2c,p-} taW6}
	  {-# L #-}
	  d.Num_aYa =
	      PrelNum.scsel_FractionalPrelBaseNum{-a1nt,p-}
		  _@_ taW6 d.Fractional_aWO;
	  d.Eq_aWQ  ::  {PrelBase.Eq{-23,p-} taW6}
	  {-# L #-}
	  d.Eq_aWQ =
	      PrelBase.scsel_NumPrelBaseEq{-a1ls,p-} _@_ taW6 d.Num_aYa;
	  fromInteger_a1uM  ::  PrelBase.Integer{-3h,W-} -> taVZ
	  {-# L #-}
	  fromInteger_a1uM =
	      PrelBase.fromInteger{-8S,p-} _@_ taVZ d.Num_aWJ;
	  lit_a1uN  ::  taVZ
	  {-# L #-}
	  lit_a1uN =
	      fromInteger_a1uM _integer_  11111111111111111111111;
	  ==_a1uO  ::  taVZ -> taVZ -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a1uO =
	      PrelBase.=={-8Y,p-} _@_ taVZ d.Eq_aWL;
	  fromRational_a1uP  ::  PrelNum.Rational{-3r,p-} -> taW6
	  {-# L #-}
	  fromRational_a1uP =
	      PrelNum.fromRational{-8T,p-} _@_ taW6 d.Fractional_aWO;
	  lit_a1uQ  ::  taW6
	  {-# L #-}
	  lit_a1uQ =
	      fromRational_a1uP
		  _rational_  111111111111111111 100000000000000000;
	  ==_a1uR  ::  taW6 -> taW6 -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a1uR =
	      PrelBase.=={-8Y,p-} _@_ taW6 d.Eq_aWQ;
	  fromInteger_a1uS  ::  PrelBase.Integer{-3h,W-} -> taVZ
	  {-# L #-}
	  fromInteger_a1uS =
	      fromInteger_a1uM;
	  lit_a1uT  ::  taVZ
	  {-# L #-}
	  lit_a1uT =
	      fromInteger_a1uS _integer_  22222222222222222222222;
	  ==_a1uU  ::  taVZ -> taVZ -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a1uU =
	      ==_a1uO;
	  fromRational_a1uV  ::  PrelNum.Rational{-3r,p-} -> taW6
	  {-# L #-}
	  fromRational_a1uV =
	      fromRational_a1uP;
	  lit_a1uW  ::  taW6
	  {-# L #-}
	  lit_a1uW =
	      fromRational_a1uV _rational_  111111111111111111 50000000000000000;
	  ==_a1uX  ::  taW6 -> taW6 -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a1uX =
	      ==_a1uR;
	  fromInteger_a1uY  ::  PrelBase.Integer{-3h,W-} -> taVZ
	  {-# L #-}
	  fromInteger_a1uY =
	      fromInteger_a1uM;
	  lit_a1uZ  ::  taVZ
	  {-# L #-}
	  lit_a1uZ =
	      fromInteger_a1uY _integer_  33333333333333333333333;
	  ==_a1v0  ::  taVZ -> taVZ -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a1v0 =
	      ==_a1uO;
	  fromRational_a1v1  ::  PrelNum.Rational{-3r,p-} -> taW6
	  {-# L #-}
	  fromRational_a1v1 =
	      fromRational_a1uP;
	  lit_a1v2  ::  taW6
	  {-# L #-}
	  lit_a1v2 =
	      fromRational_a1v1
		  _rational_  333333333333333333 100000000000000000;
	  ==_a1v3  ::  taW6 -> taW6 -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a1v3 =
	      ==_a1uR;
	  fromInteger_a1v4  ::  PrelBase.Integer{-3h,W-} -> taVZ
	  {-# L #-}
	  fromInteger_a1v4 =
	      fromInteger_a1uM;
	  lit_a1v5  ::  taVZ
	  {-# L #-}
	  lit_a1v5 =
	      fromInteger_a1v4 _integer_  44444444444444444444444;
	  ==_a1v6  ::  taVZ -> taVZ -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a1v6 =
	      ==_a1uO;
	  fromRational_a1v7  ::  PrelNum.Rational{-3r,p-} -> taW6
	  {-# L #-}
	  fromRational_a1v7 =
	      fromRational_a1uP;
	  lit_a1v8  ::  taW6
	  {-# L #-}
	  lit_a1v8 =
	      fromRational_a1v7 _rational_  111111111111111111 25000000000000000;
	  ==_a1v9  ::  taW6 -> taW6 -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a1v9 =
	      ==_a1uR;
	  g_aVU  ::  taVZ -> taW6 -> [taWG]
	  {-# L #-}
	  g_aVU =
	      \ ds_d1z4  ::  taVZ
		{-# L #-}
		ds_d1z4 ds_d1z7  ::  taW6
			{-# L #-}
			ds_d1z7 ->
		  let {
		    fail_d1z8  ::  [taWG]
		    {-# L #-}
		    fail_d1z8 =
			GHCerr.patError{-8r,w-}
			    _@_ [taWG] _string_ "ds022.hs:10|function `g'" } in
		  let { fail_d1Bg  ::  [taWG]
			{-# L #-}
			fail_d1Bg =
		    let { fail_d1Ay  ::  [taWG]
			  {-# L #-}
			  fail_d1Ay =
		      let {
			fail_d1zQ  ::  [taWG]
			{-# L #-}
			fail_d1zQ =
			    case ==_a1v6 lit_a1v5 ds_d1z4 of {
			      PrelBase.True{-5E,w-}{i} ->
				  case ==_a1v9 lit_a1v8 ds_d1z7 of {
				    PrelBase.True{-5E,w-}{i} -> PrelBase.[]{-5i,w-}{i} _@_ taWG;
				    PrelBase.False{-58,w-}{i} -> fail_d1z8;
				  };
			      PrelBase.False{-58,w-}{i} -> fail_d1z8;
			    }
		      } in 
			case ==_a1v0 lit_a1uZ ds_d1z4 of {
			  PrelBase.True{-5E,w-}{i} ->
			      case ==_a1v3 lit_a1v2 ds_d1z7 of {
				PrelBase.True{-5E,w-}{i} -> PrelBase.[]{-5i,w-}{i} _@_ taWG;
				PrelBase.False{-58,w-}{i} -> fail_d1zQ;
			      };
			  PrelBase.False{-58,w-}{i} -> fail_d1zQ;
			}
		    } in
		    case ==_a1uU lit_a1uT ds_d1z4 of {
		      PrelBase.True{-5E,w-}{i} ->
			  case ==_a1uX lit_a1uW ds_d1z7 of {
			    PrelBase.True{-5E,w-}{i} -> PrelBase.[]{-5i,w-}{i} _@_ taWG;
			    PrelBase.False{-58,w-}{i} -> fail_d1Ay;
			  };
		      PrelBase.False{-58,w-}{i} -> fail_d1Ay;
		    }
		  } in
		  case ==_a1uO lit_a1uN ds_d1z4 of {
		    PrelBase.True{-5E,w-}{i} ->
			case ==_a1uR lit_a1uQ ds_d1z7 of {
			  PrelBase.True{-5E,w-}{i} -> PrelBase.[]{-5i,w-}{i} _@_ taWG;
			  PrelBase.False{-58,w-}{i} -> fail_d1Bg;
			};
		    PrelBase.False{-58,w-}{i} -> fail_d1Bg;
		  };
	} in  g_aVU
f{-r3v,x-}  ::  _forall_
		[taX5 taXc taXM]
		=>
		{PrelNum.Fractional{-26,p-} taXc}
		-> {PrelBase.Num{-2c,p-} taX5}
		-> taX5
		-> taXc
		-> [taXM]
{-# L #-}
f{-r3v,x-} =
    _/\_ taX5 taXc taXM -> \ d.Fractional_aXU  ::  {PrelNum.Fractional{-26,p-} taXc}
			     {-# L #-}
			     d.Fractional_aXU d.Num_aXP  ::  {PrelBase.Num{-2c,p-} taX5}
					      {-# L #-}
					      d.Num_aXP ->
	_letrec_ {
	  d.Eq_aXR  ::  {PrelBase.Eq{-23,p-} taX5}
	  {-# L #-}
	  d.Eq_aXR =
	      PrelBase.scsel_NumPrelBaseEq{-a1ls,p-} _@_ taX5 d.Num_aXP;
	  d.Num_aYb  ::  {PrelBase.Num{-2c,p-} taXc}
	  {-# L #-}
	  d.Num_aYb =
	      PrelNum.scsel_FractionalPrelBaseNum{-a1nt,p-}
		  _@_ taXc d.Fractional_aXU;
	  d.Eq_aXW  ::  {PrelBase.Eq{-23,p-} taXc}
	  {-# L #-}
	  d.Eq_aXW =
	      PrelBase.scsel_NumPrelBaseEq{-a1ls,p-} _@_ taXc d.Num_aYb;
	  fromInt_a1Cb  ::  PrelBase.Int{-3g,W-} -> taX5
	  {-# L #-}
	  fromInt_a1Cb =
	      PrelBase.fromInt{-8R,p-} _@_ taX5 d.Num_aXP;
	  lit_a1Cc  ::  taX5
	  {-# L #-}
	  lit_a1Cc =
	      let {
		ds_d1EP  ::  PrelBase.Int{-3g,W-}
		{-# L #-}
		ds_d1EP =
		    PrelBase.I#{-5b,w-}{i} 1
	      } in  fromInt_a1Cb ds_d1EP;
	  ==_a1Cd  ::  taX5 -> taX5 -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a1Cd =
	      PrelBase.=={-8Y,p-} _@_ taX5 d.Eq_aXR;
	  fromRational_a1Ce  ::  PrelNum.Rational{-3r,p-} -> taXc
	  {-# L #-}
	  fromRational_a1Ce =
	      PrelNum.fromRational{-8T,p-} _@_ taXc d.Fractional_aXU;
	  lit_a1Cf  ::  taXc
	  {-# L #-}
	  lit_a1Cf =
	      fromRational_a1Ce _rational_  11 10;
	  ==_a1Cg  ::  taXc -> taXc -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a1Cg =
	      PrelBase.=={-8Y,p-} _@_ taXc d.Eq_aXW;
	  fromInt_a1Ch  ::  PrelBase.Int{-3g,W-} -> taX5
	  {-# L #-}
	  fromInt_a1Ch =
	      fromInt_a1Cb;
	  lit_a1Ci  ::  taX5
	  {-# L #-}
	  lit_a1Ci =
	      let {
		ds_d1Fx  ::  PrelBase.Int{-3g,W-}
		{-# L #-}
		ds_d1Fx =
		    PrelBase.I#{-5b,w-}{i} 2
	      } in  fromInt_a1Ch ds_d1Fx;
	  ==_a1Cj  ::  taX5 -> taX5 -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a1Cj =
	      ==_a1Cd;
	  fromRational_a1Ck  ::  PrelNum.Rational{-3r,p-} -> taXc
	  {-# L #-}
	  fromRational_a1Ck =
	      fromRational_a1Ce;
	  lit_a1Cl  ::  taXc
	  {-# L #-}
	  lit_a1Cl =
	      fromRational_a1Ck _rational_  11 5;
	  ==_a1Cm  ::  taXc -> taXc -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a1Cm =
	      ==_a1Cg;
	  fromInt_a1Cn  ::  PrelBase.Int{-3g,W-} -> taX5
	  {-# L #-}
	  fromInt_a1Cn =
	      fromInt_a1Cb;
	  lit_a1Co  ::  taX5
	  {-# L #-}
	  lit_a1Co =
	      let {
		ds_d1FU  ::  PrelBase.Int{-3g,W-}
		{-# L #-}
		ds_d1FU =
		    PrelBase.I#{-5b,w-}{i} 3
	      } in  fromInt_a1Cn ds_d1FU;
	  ==_a1Cp  ::  taX5 -> taX5 -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a1Cp =
	      ==_a1Cd;
	  fromRational_a1Cq  ::  PrelNum.Rational{-3r,p-} -> taXc
	  {-# L #-}
	  fromRational_a1Cq =
	      fromRational_a1Ce;
	  lit_a1Cr  ::  taXc
	  {-# L #-}
	  lit_a1Cr =
	      fromRational_a1Cq _rational_  33 10;
	  ==_a1Cs  ::  taXc -> taXc -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a1Cs =
	      ==_a1Cg;
	  fromInt_a1Ct  ::  PrelBase.Int{-3g,W-} -> taX5
	  {-# L #-}
	  fromInt_a1Ct =
	      fromInt_a1Cb;
	  lit_a1Cu  ::  taX5
	  {-# L #-}
	  lit_a1Cu =
	      let {
		ds_d1Gh  ::  PrelBase.Int{-3g,W-}
		{-# L #-}
		ds_d1Gh =
		    PrelBase.I#{-5b,w-}{i} 4
	      } in  fromInt_a1Ct ds_d1Gh;
	  ==_a1Cv  ::  taX5 -> taX5 -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a1Cv =
	      ==_a1Cd;
	  fromRational_a1Cw  ::  PrelNum.Rational{-3r,p-} -> taXc
	  {-# L #-}
	  fromRational_a1Cw =
	      fromRational_a1Ce;
	  lit_a1Cx  ::  taXc
	  {-# L #-}
	  lit_a1Cx =
	      fromRational_a1Cw _rational_  22 5;
	  ==_a1Cy  ::  taXc -> taXc -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a1Cy =
	      ==_a1Cg;
	  f_aX0  ::  taX5 -> taXc -> [taXM]
	  {-# L #-}
	  f_aX0 =
	      \ ds_d1H3  ::  taX5
		{-# L #-}
		ds_d1H3 ds_d1H6  ::  taXc
			{-# L #-}
			ds_d1H6 ->
		  let {
		    fail_d1H7  ::  [taXM]
		    {-# L #-}
		    fail_d1H7 =
			GHCerr.patError{-8r,w-}
			    _@_ [taXM] _string_ "ds022.hs:5|function `f'" } in
		  let { fail_d1Jf  ::  [taXM]
			{-# L #-}
			fail_d1Jf =
		    let { fail_d1Ix  ::  [taXM]
			  {-# L #-}
			  fail_d1Ix =
		      let {
			fail_d1HP  ::  [taXM]
			{-# L #-}
			fail_d1HP =
			    case ==_a1Cv lit_a1Cu ds_d1H3 of {
			      PrelBase.True{-5E,w-}{i} ->
				  case ==_a1Cy lit_a1Cx ds_d1H6 of {
				    PrelBase.True{-5E,w-}{i} -> PrelBase.[]{-5i,w-}{i} _@_ taXM;
				    PrelBase.False{-58,w-}{i} -> fail_d1H7;
				  };
			      PrelBase.False{-58,w-}{i} -> fail_d1H7;
			    }
		      } in 
			case ==_a1Cp lit_a1Co ds_d1H3 of {
			  PrelBase.True{-5E,w-}{i} ->
			      case ==_a1Cs lit_a1Cr ds_d1H6 of {
				PrelBase.True{-5E,w-}{i} -> PrelBase.[]{-5i,w-}{i} _@_ taXM;
				PrelBase.False{-58,w-}{i} -> fail_d1HP;
			      };
			  PrelBase.False{-58,w-}{i} -> fail_d1HP;
			}
		    } in
		    case ==_a1Cj lit_a1Ci ds_d1H3 of {
		      PrelBase.True{-5E,w-}{i} ->
			  case ==_a1Cm lit_a1Cl ds_d1H6 of {
			    PrelBase.True{-5E,w-}{i} -> PrelBase.[]{-5i,w-}{i} _@_ taXM;
			    PrelBase.False{-58,w-}{i} -> fail_d1Ix;
			  };
		      PrelBase.False{-58,w-}{i} -> fail_d1Ix;
		    }
		  } in
		  case ==_a1Cd lit_a1Cc ds_d1H3 of {
		    PrelBase.True{-5E,w-}{i} ->
			case ==_a1Cg lit_a1Cf ds_d1H6 of {
			  PrelBase.True{-5E,w-}{i} -> PrelBase.[]{-5i,w-}{i} _@_ taXM;
			  PrelBase.False{-58,w-}{i} -> fail_d1Jf;
			};
		    PrelBase.False{-58,w-}{i} -> fail_d1Jf;
		  };
	} in  f_aX0
d.Eq_aY8  ::  {PrelBase.Eq{-23,p-} PrelBase.Char{-38,W-}}
{-# L #-}
d.Eq_aY8 =
    PrelBase.$d34{-raE,p-}
d.Eq_aY6  ::  {PrelBase.Eq{-23,p-} [PrelBase.Char{-38,W-}]}
{-# L #-}
d.Eq_aY6 =
    PrelBase.$d28{-rax,p-} _@_ PrelBase.Char{-38,W-} d.Eq_aY8
==_a1l5  ::  [PrelBase.Char{-38,W-}]
	     -> [PrelBase.Char{-38,W-}]
	     -> PrelBase.Bool{-34,W-}
{-# L #-}
==_a1l5 =
    PrelBase.=={-8Y,p-} _@_ [PrelBase.Char{-38,W-}] d.Eq_aY6
end Rec }
