ds036.hs:22: 
    Warning: Possibly incomplete patterns
	in the definition of function `brack''
ds036.hs:44: 
    Warning: Possibly incomplete patterns
	in the definition of function `kh'


================================================================================
Desugared:
Rec {
kh{-r3g,x-}  ::  _forall_
		 [taSF]
		 =>
		 {PrelBase.Num{-2c,p-} taSF}
		 -> {PrelBase.Ord{-2d,p-} taSF}
		 -> taSF
		 -> taSF
		 -> taSF
{-# L #-}
kh{-r3g,x-} =
    _/\_ taSF -> \ d.Num_aSU  ::  {PrelBase.Num{-2c,p-} taSF}
		   {-# L #-}
		   d.Num_aSU d.Ord_aSW  ::  {PrelBase.Ord{-2d,p-} taSF}
			     {-# L #-}
			     d.Ord_aSW ->
	_letrec_ {
	  fromInt_a14h  ::  PrelBase.Int{-3g,W-} -> taSF
	  {-# L #-}
	  fromInt_a14h =
	      PrelBase.fromInt{-8R,p-} _@_ taSF d.Num_aSU;
	  lit_a14t  ::  taSF
	  {-# L #-}
	  lit_a14t =
	      let {
		ds_d16u  ::  PrelBase.Int{-3g,W-}
		{-# L #-}
		ds_d16u =
		    PrelBase.I#{-5b,w-}{i} 2
	      } in  fromInt_a14h ds_d16u;
	  >=_a14u  ::  taSF -> taSF -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  >=_a14u =
	      PrelBase.>={-8Z,p-} _@_ taSF d.Ord_aSW;
	  d.Num_aSY  ::  {PrelBase.Num{-2c,p-} taSF}
	  {-# L #-}
	  d.Num_aSY =
	      d.Num_aSU;
	  -_a14v  ::  taSF -> taSF -> taSF
	  {-# L #-}
	  -_a14v =
	      PrelBase.-{-817,p-} _@_ taSF d.Num_aSY;
	  d.Ord_aT0  ::  {PrelBase.Ord{-2d,p-} taSF}
	  {-# L #-}
	  d.Ord_aT0 =
	      d.Ord_aSW;
	  >_a14w  ::  taSF -> taSF -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  >_a14w =
	      PrelBase.>{-rfI,p-} _@_ taSF d.Ord_aT0;
	  d.Num_aT2  ::  {PrelBase.Num{-2c,p-} taSF}
	  {-# L #-}
	  d.Num_aT2 =
	      d.Num_aSU;
	  *_a14x  ::  taSF -> taSF -> taSF
	  {-# L #-}
	  *_a14x =
	      PrelBase.*{-rfB,p-} _@_ taSF d.Num_aT2;
	  lit_a14y  ::  taSF
	  {-# L #-}
	  lit_a14y =
	      lit_a14t;
	  fromInt_a14z  ::  PrelBase.Int{-3g,W-} -> taSF
	  {-# L #-}
	  fromInt_a14z =
	      fromInt_a14h;
	  lit_a14A  ::  taSF
	  {-# L #-}
	  lit_a14A =
	      let {
		ds_d17j  ::  PrelBase.Int{-3g,W-}
		{-# L #-}
		ds_d17j =
		    PrelBase.I#{-5b,w-}{i} 1
	      } in  fromInt_a14z ds_d17j;
	  >=_a14B  ::  taSF -> taSF -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  >=_a14B =
	      >=_a14u;
	  -_a14C  ::  taSF -> taSF -> taSF
	  {-# L #-}
	  -_a14C =
	      -_a14v;
	  lit_a14D  ::  taSF
	  {-# L #-}
	  lit_a14D =
	      lit_a14A;
	  >=_a14E  ::  taSF -> taSF -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  >=_a14E =
	      >=_a14u;
	  -_a14F  ::  taSF -> taSF -> taSF
	  {-# L #-}
	  -_a14F =
	      -_a14v;
	  kh_aSk  ::  taSF -> taSF -> taSF
	  {-# L #-}
	  kh_aSk =
	      \ ds_d17R  ::  taSF
		{-# L #-}
		ds_d17R x_r3x  ::  taSF
			{-# L #-}
			x_r3x ->
		  let {
		    fail_d184  ::  taSF
		    {-# L #-}
		    fail_d184 =
			GHCerr.patError{-8r,w-}
			    _@_ taSF _string_ "ds036.hs:44|function `kh'" } in
		  let {
		    fail_d19w  ::  taSF
		    {-# L #-}
		    fail_d19w =
			case
			    (\ ds_d17Y  ::  taSF
			       {-# L #-}
			       ds_d17Y ->
				 >=_a14B ds_d17Y lit_a14A)
				ds_d17R
			of {
			  PrelBase.True{-5E,w-}{i} ->
			      let {
				x_r3z  ::  taSF
				{-# L #-}
				x_r3z =
				    (\ ds_d18o  ::  taSF
				       {-# L #-}
				       ds_d18o ->
					 -_a14C ds_d18o lit_a14A)
					ds_d17R
			      } in 
				case
				    (\ ds_d18E  ::  taSF
				       {-# L #-}
				       ds_d18E ->
					 >=_a14E ds_d18E lit_a14D)
					x_r3x
				of {
				  PrelBase.True{-5E,w-}{i} ->
				      (\ ds_d192  ::  taSF
					 {-# L #-}
					 ds_d192 ->
					   -_a14F ds_d192 lit_a14D)
					  x_r3x;
				  PrelBase.False{-58,w-}{i} -> fail_d184;
				};
			  PrelBase.False{-58,w-}{i} -> fail_d184;
			}
		  } in 
		    case
			(\ ds_d19q  ::  taSF
			   {-# L #-}
			   ds_d19q ->
			     >=_a14u ds_d19q lit_a14t)
			    ds_d17R
		    of {
		      PrelBase.True{-5E,w-}{i} ->
			  let {
			    n_r3w  ::  taSF
			    {-# L #-}
			    n_r3w =
				(\ ds_d19Q  ::  taSF
				   {-# L #-}
				   ds_d19Q ->
				     -_a14v ds_d19Q lit_a14t)
				    ds_d17R
			  } in 
			    case >_a14w x_r3x n_r3w of {
			      PrelBase.True{-5E,w-}{i} -> *_a14x x_r3x lit_a14y;
			      PrelBase.False{-58,w-}{i} -> fail_d19w;
			    };
		      PrelBase.False{-58,w-}{i} -> fail_d19w;
		    };
	} in  kh_aSk
brack'{-r3f,x-}  ::  _forall_
		     [taTa]
		     =>
		     {PrelBase.Eq{-23,p-} taTa}
		     -> taTa
		     -> taTa
		     -> PrelBase.Int{-3g,W-}
		     -> [taTa]
		     -> ([taTa], [taTa])
{-# L #-}
brack'{-r3f,x-} =
    _/\_ taTa -> \ d.Eq_aU7  ::  {PrelBase.Eq{-23,p-} taTa}
		   {-# L #-}
		   d.Eq_aU7 ->
	_letrec_ {
	  lit_a1aE  ::  PrelBase.Int{-3g,W-}
	  {-# L #-}
	  lit_a1aE =
	      lit_a14q;
	  >=_a1aG  ::  PrelBase.Int{-3g,W-}
		       -> PrelBase.Int{-3g,W-}
		       -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  >=_a1aG =
	      >=_a14r;
	  -_a1aH  ::  PrelBase.Int{-3g,W-}
		      -> PrelBase.Int{-3g,W-}
		      -> PrelBase.Int{-3g,W-}
	  {-# L #-}
	  -_a1aH =
	      -_a14s;
	  d.Eq_aUf  ::  {PrelBase.Eq{-23,p-} taTa}
	  {-# L #-}
	  d.Eq_aUf =
	      d.Eq_aU7;
	  ==_a1aI  ::  taTa -> taTa -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a1aI =
	      PrelBase.=={-8Y,p-} _@_ taTa d.Eq_aUf;
	  brack'_aT7  ::  taTa
			  -> taTa
			  -> PrelBase.Int{-3g,W-}
			  -> [taTa]
			  -> ([taTa], [taTa])
	  {-# L #-}
	  brack'_aT7 =
	      \ open_r3i  ::  taTa
		{-# L #-}
		open_r3i close_r3j  ::  taTa
			 {-# L #-}
			 close_r3j ds_d1bB  ::  PrelBase.Int{-3g,W-}
				   {-# L #-}
				   ds_d1bB xs_r3k  ::  [taTa]
					   {-# L #-}
					   xs_r3k ->
		  let {
		    fail_d1bO  ::  ([taTa], [taTa])
		    {-# L #-}
		    fail_d1bO =
			GHCerr.patError{-8r,w-}
			    _@_ ([taTa], [taTa]) _string_ "ds036.hs:22|function `brack''" } in
		  let {
		    fail_d1dT  ::  ([taTa], [taTa])
		    {-# L #-}
		    fail_d1dT =
			case
			    (\ ds_d1bI  ::  PrelBase.Int{-3g,W-}
			       {-# L #-}
			       ds_d1bI ->
				 >=_a14r ds_d1bI lit_a14q)
				ds_d1bB
			of {
			  PrelBase.True{-5E,w-}{i} ->
			      let {
				n_r3o  ::  PrelBase.Int{-3g,W-}
				{-# L #-}
				n_r3o =
				    (\ ds_d1c8  ::  PrelBase.Int{-3g,W-}
				       {-# L #-}
				       ds_d1c8 ->
					 -_a14s ds_d1c8 lit_a14q)
					ds_d1bB
			      } in 
				case xs_r3k of {
				  PrelBase.[]{-5i,w-}{i} ->
				      let {
					close_r3n  ::  taTa
					{-# L #-}
					close_r3n =
					    close_r3j } in
				      let {
					open_r3m  ::  taTa
					{-# L #-}
					open_r3m =
					    open_r3i } in
				      let {
					ds_d1cz  ::  [taTa]
					{-# L #-}
					ds_d1cz =
					    PrelBase.[]{-5i,w-}{i} _@_ taTa } in
				      let {
					ds_d1cD  ::  [taTa]
					{-# L #-}
					ds_d1cD =
					    PrelBase.[]{-5i,w-}{i} _@_ taTa
				      } in 
					PrelTup.(,){-62,w-}{i}
					    {_@_ [taTa] _@_ [taTa] ds_d1cz ds_d1cD};
				  PrelBase.:{-55,w-}{i} h_r3t t_r3u ->
				      let {
					n_r3s  ::  PrelBase.Int{-3g,W-}
					{-# L #-}
					n_r3s =
					    n_r3o } in
				      let {
					close_r3r  ::  taTa
					{-# L #-}
					close_r3r =
					    close_r3j } in
				      let {
					open_r3q  ::  taTa
					{-# L #-}
					open_r3q =
					    open_r3i
				      } in 
					case ==_a1aI h_r3t open_r3q of {
					  PrelBase.True{-5E,w-}{i} ->
					      let {
						ds_d1du  ::  [taTa]
						{-# L #-}
						ds_d1du =
						    PrelBase.[]{-5i,w-}{i} _@_ taTa } in
					      let {
						ds_d1dy  ::  [taTa]
						{-# L #-}
						ds_d1dy =
						    PrelBase.[]{-5i,w-}{i} _@_ taTa
					      } in 
						PrelTup.(,){-62,w-}{i}
						    {_@_ [taTa] _@_ [taTa] ds_d1du ds_d1dy};
					  PrelBase.False{-58,w-}{i} -> fail_d1bO;
					};
				};
			  PrelBase.False{-58,w-}{i} -> fail_d1bO;
			}
		  } in 
		    case ds_d1bB of { PrelBase.I#{-5b,w-}{i} ds_d1e2  ->
		    case# ds_d1e2 of {
		      0 ->
			  let {
			    ds_d1eh  ::  [taTa]
			    {-# L #-}
			    ds_d1eh =
				PrelBase.[]{-5i,w-}{i} _@_ taTa
			  } in 
			    PrelTup.(,){-62,w-}{i} {_@_ [taTa] _@_ [taTa] ds_d1eh xs_r3k};
		      ds_d1et -> fail_d1dT;
		    };};
	} in  brack'_aT7
lit_a14o  ::  PrelBase.Int{-3g,W-}
{-# L #-}
lit_a14o =
    PrelBase.I#{-5b,w-}{i} 0
d.Eq_aUh  ::  {PrelBase.Eq{-23,p-} PrelBase.Int{-3g,W-}}
{-# L #-}
d.Eq_aUh =
    PrelBase.$d8{-rb8,p-}
==_a14p  ::  PrelBase.Int{-3g,W-}
	     -> PrelBase.Int{-3g,W-}
	     -> PrelBase.Bool{-34,W-}
{-# L #-}
==_a14p =
    PrelBase.=={-8Y,p-} _@_ PrelBase.Int{-3g,W-} d.Eq_aUh
lit_a14q  ::  PrelBase.Int{-3g,W-}
{-# L #-}
lit_a14q =
    PrelBase.I#{-5b,w-}{i} 1
d.Ord_aUk  ::  {PrelBase.Ord{-2d,p-} PrelBase.Int{-3g,W-}}
{-# L #-}
d.Ord_aUk =
    PrelBase.$d7{-rb7,p-}
>=_a14r  ::  PrelBase.Int{-3g,W-}
	     -> PrelBase.Int{-3g,W-}
	     -> PrelBase.Bool{-34,W-}
{-# L #-}
>=_a14r =
    PrelBase.>={-8Z,p-} _@_ PrelBase.Int{-3g,W-} d.Ord_aUk
d.Num_aUn  ::  {PrelBase.Num{-2c,p-} PrelBase.Int{-3g,W-}}
{-# L #-}
d.Num_aUn =
    PrelBase.$d4{-raL,p-}
-_a14s  ::  PrelBase.Int{-3g,W-}
	    -> PrelBase.Int{-3g,W-}
	    -> PrelBase.Int{-3g,W-}
{-# L #-}
-_a14s =
    PrelBase.-{-817,p-} _@_ PrelBase.Int{-3g,W-} d.Num_aUn
end Rec }
