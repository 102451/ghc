

================================================================================
Desugared:
Rec {
f{-r3h,x-}  ::  _forall_
		[taSX taSv]
		=>
		{PrelBase.Ord{-2d,p-} taSv}
		-> {PrelBase.Num{-2c,p-} taSv}
		-> taSX
		-> taSv
{-# L #-}
f{-r3h,x-} =
    _/\_ taSX taSv -> \ d.Ord_aSZ  ::  {PrelBase.Ord{-2d,p-} taSv}
			{-# L #-}
			d.Ord_aSZ d.Num_aT2  ::  {PrelBase.Num{-2c,p-} taSv}
				  {-# L #-}
				  d.Num_aT2 ->
	_letrec_ {
	  <_aXx  ::  taSv -> taSv -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  <_aXx =
	      PrelBase.<{-rfn,p-} _@_ taSv d.Ord_aSZ;
	  fromInt_aXE  ::  PrelBase.Int{-3g,W-} -> taSv
	  {-# L #-}
	  fromInt_aXE =
	      PrelBase.fromInt{-8R,p-} _@_ taSv d.Num_aT2;
	  lit_aXF  ::  taSv
	  {-# L #-}
	  lit_aXF =
	      let {
		ds_dYN  ::  PrelBase.Int{-3g,W-}
		{-# L #-}
		ds_dYN =
		    PrelBase.I#{-5b,w-}{i} 0
	      } in  fromInt_aXE ds_dYN;
	  fromInt_aXG  ::  PrelBase.Int{-3g,W-} -> taSv
	  {-# L #-}
	  fromInt_aXG =
	      fromInt_aXE;
	  lit_aXH  ::  taSv
	  {-# L #-}
	  lit_aXH =
	      let {
		ds_dZ2  ::  PrelBase.Int{-3g,W-}
		{-# L #-}
		ds_dZ2 =
		    PrelBase.I#{-5b,w-}{i} 1
	      } in  fromInt_aXG ds_dZ2;
	  d.Ord_aT5  ::  {PrelBase.Ord{-2d,p-} taSv}
	  {-# L #-}
	  d.Ord_aT5 =
	      d.Ord_aSZ;
	  >_aXI  ::  taSv -> taSv -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  >_aXI =
	      PrelBase.>{-rfp,p-} _@_ taSv d.Ord_aT5;
	  fromInt_aXK  ::  PrelBase.Int{-3g,W-} -> taSv
	  {-# L #-}
	  fromInt_aXK =
	      fromInt_aXE;
	  lit_aXL  ::  taSv
	  {-# L #-}
	  lit_aXL =
	      let {
		ds_dZq  ::  PrelBase.Int{-3g,W-}
		{-# L #-}
		ds_dZq =
		    PrelBase.I#{-5b,w-}{i} 2
	      } in  fromInt_aXK ds_dZq;
	  fromInt_aXN  ::  PrelBase.Int{-3g,W-} -> taSv
	  {-# L #-}
	  fromInt_aXN =
	      fromInt_aXE;
	  lit_aXO  ::  taSv
	  {-# L #-}
	  lit_aXO =
	      let {
		ds_dZF  ::  PrelBase.Int{-3g,W-}
		{-# L #-}
		ds_dZF =
		    PrelBase.I#{-5b,w-}{i} 3
	      } in  fromInt_aXN ds_dZF;
	  f_aS1  ::  taSX -> taSv
	  {-# L #-}
	  f_aS1 =
	      \ x_r3d  ::  taSX
		{-# L #-}
		x_r3d ->
		  _letrec_ {
		    lit_aZY  ::  taSv
		    {-# L #-}
		    lit_aZY =
			lit_aXH;
		    lit_a100  ::  taSv
		    {-# L #-}
		    lit_a100 =
			lit_aXL;
		    ds_d109  ::  (taSv, taSv)
		    {-# L #-}
		    ds_d109 =
			case <_aXx y_aS9 z_aSa of {
			  PrelBase.True{-5E,w-}{i} ->
			      PrelTup.(,){-62,w-}{i} {_@_ taSv _@_ taSv lit_aXF lit_aXH};
			  PrelBase.False{-58,w-}{i} ->
			      case >_aXI y_aS9 z_aSa of {
				PrelBase.True{-5E,w-}{i} ->
				    PrelTup.(,){-62,w-}{i} {_@_ taSv _@_ taSv lit_aZY lit_aXL};
				PrelBase.False{-58,w-}{i} ->
				    PrelTup.(,){-62,w-}{i} {_@_ taSv _@_ taSv lit_a100 lit_aXO};
			      };
			};
		    y_aS9  ::  taSv
		    {-# L #-}
		    y_aS9 =
			case ds_d109 of { PrelTup.(,){-62,w-}{i} y_aS9 z_aSa  -> y_aS9;};
		    z_aSa  ::  taSv
		    {-# L #-}
		    z_aSa =
			case ds_d109 of { PrelTup.(,){-62,w-}{i} y_aS9 z_aSa  -> z_aSa;};
		    y_r3f  ::  taSv
		    {-# L #-}
		    y_r3f =
			y_aS9;
		    z_r3g  ::  taSv
		    {-# L #-}
		    z_r3g =
			z_aSa;
		  } in  y_r3f;
	} in  f_aS1
end Rec }
