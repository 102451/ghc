ds025.hs:6: 
    Warning: Possibly incomplete patterns
	in the definition of function `ehead'


================================================================================
Desugared:
Rec {
assocMaybe{-r3h,x-}  ::  _forall_
			 [taUL taUO]
			 =>
			 {PrelBase.Eq{-23,p-} taUL}
			 -> taUL
			 -> [(taUL, taUO)]
			 -> PrelBase.Maybe{-rhk,p-} taUO
{-# L #-}
assocMaybe{-r3h,x-} =
    _/\_ taUL taUO -> \ d.Eq_aVB  ::  {PrelBase.Eq{-23,p-} taUL}
			{-# L #-}
			d.Eq_aVB ->
	_letrec_ {
	  d.Eq_aVD  ::  {PrelBase.Eq{-23,p-} taUL}
	  {-# L #-}
	  d.Eq_aVD =
	      d.Eq_aVB;
	  ==_a16L  ::  taUL -> taUL -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a16L =
	      PrelBase.=={-8Y,p-} _@_ taUL d.Eq_aVD;
	  assocMaybe_aUI  ::  taUL
			      -> [(taUL, taUO)]
			      -> PrelBase.Maybe{-rhk,p-} taUO
	  {-# L #-}
	  assocMaybe_aUI =
	      \ key_r3x  ::  taUL
		{-# L #-}
		key_r3x lst_r3y  ::  [(taUL, taUO)]
			{-# L #-}
			lst_r3y ->
		  let { res_aUQ  ::  [taUO]
			{-# L #-}
			res_aUQ =
		    _letrec_ {
		      ds_d18e  ::  [(taUL, taUO)] -> [taUO]
		      {-# L #-}
		      ds_d18e =
			  \ ds_d18j  ::  [(taUL, taUO)]
			    {-# L #-}
			    ds_d18j ->
			      case ds_d18j of {
				PrelBase.[]{-5i,w-}{i} -> PrelBase.[]{-5i,w-}{i} {_@_ taUO};
				PrelBase.:{-55,w-}{i} ds_d18y ds_d18z ->
				    case ds_d18y of { PrelTup.(,){-62,w-}{i} key'_r3C val_r3D  ->
				    case ==_a16L key_r3x key'_r3C of {
				      PrelBase.True{-5E,w-}{i} ->
					  let {
					    ds_d195  ::  [taUO]
					    {-# L #-}
					    ds_d195 =
						ds_d18e ds_d18z
					  } in  PrelBase.:{-55,w-}{i} {_@_ taUO val_r3D ds_d195};
				      PrelBase.False{-58,w-}{i} -> ds_d18e ds_d18z;
				    };};
			      };
		    } in  ds_d18e lst_r3y
		  } in
		  let {
		    res_r3A  ::  [taUO]
		    {-# L #-}
		    res_r3A =
			res_aUQ
		  } in 
		    case PrelList.null{-r51,p-} _@_ taUO res_r3A of {
		      PrelBase.True{-5E,w-}{i} -> PrelBase.Nothing{-rbW,p-}{i} _@_ taUO;
		      PrelBase.False{-58,w-}{i} ->
			  let {
			    ds_d19W  ::  taUO
			    {-# L #-}
			    ds_d19W =
				PrelList.head{-r3E,p-} _@_ taUO res_r3A
			  } in  PrelBase.Just{-rbS,p-}{i} _@_ taUO ds_d19W;
		    };
	} in  assocMaybe_aUI
ehead{-r3i,x-}  ::  _forall_
		    [taWc]
		    =>
		    [taWc] -> [PrelBase.Char{-38,W-}] -> taWc
{-# L #-}
ehead{-r3i,x-} =
    _/\_ taWc ->
	_letrec_ {
	  ehead_aVL  ::  [taWc] -> [PrelBase.Char{-38,W-}] -> taWc
	  {-# L #-}
	  ehead_aVL =
	      \ xs_r3l  ::  [taWc]
		{-# L #-}
		xs_r3l loc_r3m  ::  [PrelBase.Char{-38,W-}]
		       {-# L #-}
		       loc_r3m ->
		  let {
		    fail_d1aE  ::  taWc
		    {-# L #-}
		    fail_d1aE =
			GHCerr.patError{-8r,w-}
			    _@_ taWc _string_ "ds025.hs:5|function `ehead'"
		  } in 
		    case PrelList.null{-r51,p-} _@_ taWc xs_r3l of {
		      PrelBase.True{-5E,w-}{i} ->
			  let { ds_d1aS  ::  [PrelBase.Char{-38,W-}]
				{-# L #-}
				ds_d1aS =
			    let { ds_d1b2  ::  [PrelBase.Char{-38,W-}]
				  {-# L #-}
				  ds_d1b2 =
			      let {
				ds_d1bg  ::  PrelBase.Char{-38,W-}
				{-# L #-}
				ds_d1bg =
				    PrelBase.C#{-54,w-}{i} {'4'} } in
			      let {
				ds_d1bk  ::  [PrelBase.Char{-38,W-}]
				{-# L #-}
				ds_d1bk =
				    PrelBase.[]{-5i,w-}{i} {_@_ PrelBase.Char{-38,W-}}
			      } in 
				PrelBase.:{-55,w-}{i} {_@_ PrelBase.Char{-38,W-} ds_d1bg ds_d1bk}
			    } in
			    ++_a127 _@_ PrelBase.Char{-38,W-} ds_d1b2 loc_r3m
			  } in
			  IOBase.error{-87,w-} _@_ taWc ds_d1aS;
		      PrelBase.False{-58,w-}{i} ->
			  PrelList.head{-r3E,p-} _@_ taWc xs_r3l;
		    };
	} in  ehead_aVL
assoc{-r3j,x-}  ::  _forall_
		    [taXo taXr]
		    =>
		    {PrelBase.Show{-2i,p-} taXo}
		    -> {PrelBase.Eq{-23,p-} taXo}
		    -> taXo
		    -> [(taXo, taXr)]
		    -> [PrelBase.Char{-38,W-}]
		    -> taXr
{-# L #-}
assoc{-r3j,x-} =
    _/\_ taXo taXr -> \ d.Show_aXv  ::  {PrelBase.Show{-2i,p-} taXo}
			{-# L #-}
			d.Show_aXv d.Eq_aXx  ::  {PrelBase.Eq{-23,p-} taXo}
				   {-# L #-}
				   d.Eq_aXx ->
	_letrec_ {
	  ++_a122  ::  _forall_ [taXd] => [taXd] -> [taXd] -> [taXd]
	  {-# L #-}
	  ++_a122 =
	      ++_a123;
	  ++_a121  ::  _forall_ [taXk] => [taXk] -> [taXk] -> [taXk]
	  {-# L #-}
	  ++_a121 =
	      ++_a123;
	  show_a12b  ::  taXo -> PrelBase.String{-rhB,p-}
	  {-# L #-}
	  show_a12b =
	      PrelBase.show{-rij,p-} _@_ taXo d.Show_aXv;
	  ==_a12c  ::  taXo -> taXo -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a12c =
	      PrelBase.=={-8Y,p-} _@_ taXo d.Eq_aXx;
	  assoc_aWg  ::  taXo
			 -> [(taXo, taXr)]
			 -> [PrelBase.Char{-38,W-}]
			 -> taXr
	  {-# L #-}
	  assoc_aWg =
	      \ key_r3o  ::  taXo
		{-# L #-}
		key_r3o lst_r3p  ::  [(taXo, taXr)]
			{-# L #-}
			lst_r3p loc_r3q  ::  [PrelBase.Char{-38,W-}]
				{-# L #-}
				loc_r3q ->
		  let { res_aWy  ::  [taXr]
			{-# L #-}
			res_aWy =
		    _letrec_ {
		      ds_d1cL  ::  [(taXo, taXr)] -> [taXr]
		      {-# L #-}
		      ds_d1cL =
			  \ ds_d1cQ  ::  [(taXo, taXr)]
			    {-# L #-}
			    ds_d1cQ ->
			      case ds_d1cQ of {
				PrelBase.[]{-5i,w-}{i} -> PrelBase.[]{-5i,w-}{i} {_@_ taXr};
				PrelBase.:{-55,w-}{i} ds_d1d5 ds_d1d6 ->
				    case ds_d1d5 of { PrelTup.(,){-62,w-}{i} key'_r3u val_r3v  ->
				    case ==_a12c key_r3o key'_r3u of {
				      PrelBase.True{-5E,w-}{i} ->
					  let {
					    ds_d1dC  ::  [taXr]
					    {-# L #-}
					    ds_d1dC =
						ds_d1cL ds_d1d6
					  } in  PrelBase.:{-55,w-}{i} {_@_ taXr val_r3v ds_d1dC};
				      PrelBase.False{-58,w-}{i} -> ds_d1cL ds_d1d6;
				    };};
			      };
		    } in  ds_d1cL lst_r3p
		  } in
		  let {
		    res_r3s  ::  [taXr]
		    {-# L #-}
		    res_r3s =
			res_aWy
		  } in 
		    case PrelList.null{-r51,p-} _@_ taXr res_r3s of {
		      PrelBase.True{-5E,w-}{i} ->
			  let { ds_d1el  ::  [PrelBase.Char{-38,W-}]
				{-# L #-}
				ds_d1el =
			    let { ds_d1ex  ::  [PrelBase.Char{-38,W-}]
				  {-# L #-}
				  ds_d1ex =
			      let {
				ds_d1eM  ::  PrelBase.Char{-38,W-}
				{-# L #-}
				ds_d1eM =
				    PrelBase.C#{-54,w-}{i} {'1'} } in
			      let {
				ds_d1eQ  ::  [PrelBase.Char{-38,W-}]
				{-# L #-}
				ds_d1eQ =
				    PrelBase.[]{-5i,w-}{i} {_@_ PrelBase.Char{-38,W-}}
			      } in 
				PrelBase.:{-55,w-}{i} {_@_ PrelBase.Char{-38,W-} ds_d1eM ds_d1eQ}
			    } in
			    let { ds_d1eB  ::  [PrelBase.Char{-38,W-}]
				  {-# L #-}
				  ds_d1eB =
			      let { ds_d1f9  ::  [PrelBase.Char{-38,W-}]
				    {-# L #-}
				    ds_d1f9 =
				let { ds_d1fl  ::  [PrelBase.Char{-38,W-}]
				      {-# L #-}
				      ds_d1fl =
				  let {
				    ds_d1fA  ::  PrelBase.Char{-38,W-}
				    {-# L #-}
				    ds_d1fA =
					PrelBase.C#{-54,w-}{i} {'2'} } in
				  let {
				    ds_d1fE  ::  [PrelBase.Char{-38,W-}]
				    {-# L #-}
				    ds_d1fE =
					PrelBase.[]{-5i,w-}{i} {_@_ PrelBase.Char{-38,W-}}
				  } in 
				    PrelBase.:{-55,w-}{i}
					{_@_ PrelBase.Char{-38,W-} ds_d1fA ds_d1fE}
				} in
				let {
				  ds_d1fp  ::  [PrelBase.Char{-38,W-}]
				  {-# L #-}
				  ds_d1fp =
				      show_a12b key_r3o
				} in  ++_a121 _@_ PrelBase.Char{-38,W-} ds_d1fl ds_d1fp
			      } in
			      ++_a122 _@_ PrelBase.Char{-38,W-} loc_r3q ds_d1f9
			    } in
			    ++_a123 _@_ PrelBase.Char{-38,W-} ds_d1ex ds_d1eB
			  } in
			  IOBase.error{-87,w-} _@_ taXr ds_d1el;
		      PrelBase.False{-58,w-}{i} ->
			  let { ds_d1ga  ::  [PrelBase.Char{-38,W-}]
				{-# L #-}
				ds_d1ga =
			    let {
			      ds_d1gl  ::  PrelBase.Char{-38,W-}
			      {-# L #-}
			      ds_d1gl =
				  PrelBase.C#{-54,w-}{i} {'3'} } in
			    let {
			      ds_d1gp  ::  [PrelBase.Char{-38,W-}]
			      {-# L #-}
			      ds_d1gp =
				  PrelBase.[]{-5i,w-}{i} {_@_ PrelBase.Char{-38,W-}}
			    } in 
			      PrelBase.:{-55,w-}{i} {_@_ PrelBase.Char{-38,W-} ds_d1gl ds_d1gp}
			  } in
			  ehead{-r3i,x-} _@_ taXr res_r3s ds_d1ga;
		    };
	} in  assoc_aWg
d.MonadPlus_aXF  ::  {PrelBase.MonadPlus{-2a,p-} PrelBase.[]{-3j,W-}}
{-# L #-}
d.MonadPlus_aXF =
    PrelBase.$d23{-rcg,p-}
++_a123  ::  _forall_ [taX7] => [taX7] -> [taX7] -> [taX7]
{-# L #-}
++_a123 =
    PrelBase.++{-rhm,p-} _@_ PrelBase.[]{-3j,W-} d.MonadPlus_aXF
d.Monad_aXI  ::  {PrelBase.Monad{-28,p-} PrelBase.[]{-3j,W-}}
{-# L #-}
d.Monad_aXI =
    PrelBase.$d25{-rci,p-}
>>=_a124  ::  _forall_
	      [taXO taXP]
	      =>
	      [taXO] -> (taXO -> [taXP]) -> [taXP]
{-# L #-}
>>=_a124 =
    PrelBase.>>={-811,p-} _@_ PrelBase.[]{-3j,W-} d.Monad_aXI
d.Monad_aXL  ::  {PrelBase.Monad{-28,p-} PrelBase.[]{-3j,W-}}
{-# L #-}
d.Monad_aXL =
    d.Monad_aXI
return_a125  ::  _forall_ [taXQ] => taXQ -> [taXQ]
{-# L #-}
return_a125 =
    PrelBase.return{-816,p-} _@_ PrelBase.[]{-3j,W-} d.Monad_aXL
d.MonadZero_aXN  ::  {PrelBase.MonadZero{-29,p-} PrelBase.[]{-3j,W-}}
{-# L #-}
d.MonadZero_aXN =
    PrelBase.$d24{-rch,p-}
zero_a126  ::  _forall_ [taXR] => [taXR]
{-# L #-}
zero_a126 =
    PrelBase.zero{-810,p-} _@_ PrelBase.[]{-3j,W-} d.MonadZero_aXN
++_a127  ::  _forall_ [taW6] => [taW6] -> [taW6] -> [taW6]
{-# L #-}
++_a127 =
    ++_a123
>>=_a128  ::  _forall_
	      [taXS taXT]
	      =>
	      [taXS] -> (taXS -> [taXT]) -> [taXT]
{-# L #-}
>>=_a128 =
    >>=_a124
return_a129  ::  _forall_ [taXU] => taXU -> [taXU]
{-# L #-}
return_a129 =
    return_a125
zero_a12a  ::  _forall_ [taXV] => [taXV]
{-# L #-}
zero_a12a =
    zero_a126
end Rec }
