

================================================================================
Desugared:
Rec {
j{-r3O,x-}  ::  _forall_
		[taS7 taSa aaSb taSf taSh]
		=>
		{PrelBase.Monad{-28,p-} aaSb}
		-> aaSb (taSf, taSh, taS7, taSa)
		-> aaSb (taSf, taSh)
{-# L #-}
j{-r3O,x-} =
    _/\_ taS7 taSa aaSb taSf taSh -> \ d.Monad_aSr  ::  {PrelBase.Monad{-28,p-} aaSb}
				       {-# L #-}
				       d.Monad_aSr ->
	_letrec_ {
	  >>=_a17B  ::  _forall_
			[taVi taVh]
			=>
			aaSb taVi -> (taVi -> aaSb taVh) -> aaSb taVh
	  {-# L #-}
	  >>=_a17B =
	      PrelBase.>>={-811,p-} _@_ aaSb d.Monad_aSr;
	  d.Monad_aSt  ::  {PrelBase.Monad{-28,p-} aaSb}
	  {-# L #-}
	  d.Monad_aSt =
	      d.Monad_aSr;
	  return_a17I  ::  _forall_ [taVj] => taVj -> aaSb taVj
	  {-# L #-}
	  return_a17I =
	      PrelBase.return{-816,p-} _@_ aaSb d.Monad_aSt;
	  j_aRN  ::  aaSb (taSf, taSh, taS7, taSa) -> aaSb (taSf, taSh)
	  {-# L #-}
	  j_aRN =
	      \ xs_r3I  ::  aaSb (taSf, taSh, taS7, taSa)
		{-# L #-}
		xs_r3I ->
		  let {
		    ds_d18A  ::  (taSf, taSh, taS7, taSa) -> aaSb (taSf, taSh)
		    {-# L #-}
		    ds_d18A =
			\ ds_d18G  ::  (taSf, taSh, taS7, taSa)
			  {-# L #-}
			  ds_d18G ->
			    case
				ds_d18G
			    of {
			    PrelTup.(,,,){-64,w-}{i} a_r3K b_r3L c_r3M d_r3N  ->
			    let {
			      ds_d18U  ::  (taSf, taSh)
			      {-# L #-}
			      ds_d18U =
				  PrelTup.(,){-62,w-}{i} {_@_ taSf _@_ taSh a_r3K b_r3L}
			    } in  return_a17I _@_ (taSf, taSh) ds_d18U;}
		  } in 
		    >>=_a17B
			_@_ (taSf, taSh, taS7, taSa) _@_ (taSf, taSh) xs_r3I ds_d18A;
	} in  j_aRN
i{-r3P,x-}  ::  _forall_
		[aaSN taSX taSZ]
		=>
		{PrelBase.Eq{-23,p-} taSX}
		-> {PrelBase.Eq{-23,p-} taSZ}
		-> {PrelBase.MonadZero{-29,p-} aaSN}
		-> aaSN ([taSX], [taSZ])
		-> aaSN [taSX]
{-# L #-}
i{-r3P,x-} =
    _/\_ aaSN taSX taSZ -> \ d.Eq_aTf  ::  {PrelBase.Eq{-23,p-} taSX}
			     {-# L #-}
			     d.Eq_aTf d.Eq_aTi  ::  {PrelBase.Eq{-23,p-} taSZ}
				      {-# L #-}
				      d.Eq_aTi d.MonadZero_aTo  ::  {PrelBase.MonadZero{-29,p-} aaSN}
					       {-# L #-}
					       d.MonadZero_aTo ->
	_letrec_ {
	  d.Monad_aTk  ::  {PrelBase.Monad{-28,p-} aaSN}
	  {-# L #-}
	  d.Monad_aTk =
	      PrelBase.scsel_MonadZeroPrelBaseMonad{-a19C,p-}
		  _@_ aaSN d.MonadZero_aTo;
	  d.Eq_aTd  ::  {PrelBase.Eq{-23,p-} [taSX]}
	  {-# L #-}
	  d.Eq_aTd =
	      PrelBase.$d28{-rpK,p-} _@_ taSX d.Eq_aTf;
	  d.Eq_aTg  ::  {PrelBase.Eq{-23,p-} [taSZ]}
	  {-# L #-}
	  d.Eq_aTg =
	      PrelBase.$d28{-rpK,p-} _@_ taSZ d.Eq_aTi;
	  d.Eq_aTb  ::  {PrelBase.Eq{-23,p-} ([taSX], [taSZ])}
	  {-# L #-}
	  d.Eq_aTb =
	      PrelTup.$d9{-rpg,p-} _@_ [taSX] _@_ [taSZ] d.Eq_aTd d.Eq_aTg;
	  ==_a19w  ::  ([taSX], [taSZ])
		       -> ([taSX], [taSZ])
		       -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  ==_a19w =
	      PrelBase.=={-8Y,p-} _@_ ([taSX], [taSZ]) d.Eq_aTb;
	  >>=_a19x  ::  _forall_
			[taVl taVk]
			=>
			aaSN taVl -> (taVl -> aaSN taVk) -> aaSN taVk
	  {-# L #-}
	  >>=_a19x =
	      PrelBase.>>={-811,p-} _@_ aaSN d.Monad_aTk;
	  d.Monad_aTm  ::  {PrelBase.Monad{-28,p-} aaSN}
	  {-# L #-}
	  d.Monad_aTm =
	      d.Monad_aTk;
	  return_a19y  ::  _forall_ [taVm] => taVm -> aaSN taVm
	  {-# L #-}
	  return_a19y =
	      PrelBase.return{-816,p-} _@_ aaSN d.Monad_aTm;
	  zero_a19z  ::  _forall_ [taVn] => aaSN taVn
	  {-# L #-}
	  zero_a19z =
	      PrelBase.zero{-810,p-} _@_ aaSN d.MonadZero_aTo;
	  i_aSv  ::  aaSN ([taSX], [taSZ]) -> aaSN [taSX]
	  {-# L #-}
	  i_aSv =
	      \ xs_r3C  ::  aaSN ([taSX], [taSZ])
		{-# L #-}
		xs_r3C ->
		  let {
		    ds_d1br  ::  ([taSX], [taSZ]) -> aaSN [taSX]
		    {-# L #-}
		    ds_d1br =
			\ all_r3E  ::  ([taSX], [taSZ])
			  {-# L #-}
			  all_r3E ->
			    case all_r3E of { PrelTup.(,){-62,w-}{i} x_r3F y_r3G  ->
			    case
				let { ds_d1bN  ::  ([taSX], [taSZ])
				      {-# L #-}
				      ds_d1bN =
				  let {
				    ds_d1c0  ::  [taSX]
				    {-# L #-}
				    ds_d1c0 =
					PrelBase.[]{-5i,w-}{i} _@_ taSX } in
				  let {
				    ds_d1c4  ::  [taSZ]
				    {-# L #-}
				    ds_d1c4 =
					PrelBase.[]{-5i,w-}{i} _@_ taSZ
				  } in 
				    PrelTup.(,){-62,w-}{i} {_@_ [taSX] _@_ [taSZ] ds_d1c0 ds_d1c4}
				} in
				==_a19w all_r3E ds_d1bN
			    of {
			      PrelBase.True{-5E,w-}{i} -> return_a19y _@_ [taSX] x_r3F;
			      PrelBase.False{-58,w-}{i} -> zero_a19z _@_ [taSX];
			    };}
		  } in  >>=_a19x _@_ ([taSX], [taSZ]) _@_ [taSX] xs_r3C ds_d1br;
	} in  i_aSv
h{-r3Q,x-}  ::  _forall_
		[aaTE taTN]
		=>
		{PrelBase.MonadZero{-29,p-} aaTE}
		-> aaTE taTN
		-> aaTE taTN
		-> aaTE [taTN]
{-# L #-}
h{-r3Q,x-} =
    _/\_ aaTE taTN -> \ d.MonadZero_aU1  ::  {PrelBase.MonadZero{-29,p-} aaTE}
			{-# L #-}
			d.MonadZero_aU1 ->
	_letrec_ {
	  d.Monad_aTX  ::  {PrelBase.Monad{-28,p-} aaTE}
	  {-# L #-}
	  d.Monad_aTX =
	      PrelBase.scsel_MonadZeroPrelBaseMonad{-a19C,p-}
		  _@_ aaTE d.MonadZero_aU1;
	  >>=_a1cX  ::  _forall_
			[taVp taVo]
			=>
			aaTE taVp -> (taVp -> aaTE taVo) -> aaTE taVo
	  {-# L #-}
	  >>=_a1cX =
	      PrelBase.>>={-811,p-} _@_ aaTE d.Monad_aTX;
	  d.Monad_aTZ  ::  {PrelBase.Monad{-28,p-} aaTE}
	  {-# L #-}
	  d.Monad_aTZ =
	      d.Monad_aTX;
	  return_a1cY  ::  _forall_ [taVq] => taVq -> aaTE taVq
	  {-# L #-}
	  return_a1cY =
	      PrelBase.return{-816,p-} _@_ aaTE d.Monad_aTZ;
	  zero_a1cZ  ::  _forall_ [taVr] => aaTE taVr
	  {-# L #-}
	  zero_a1cZ =
	      PrelBase.zero{-810,p-} _@_ aaTE d.MonadZero_aU1;
	  h_aTr  ::  aaTE taTN -> aaTE taTN -> aaTE [taTN]
	  {-# L #-}
	  h_aTr =
	      \ xs_r3v  ::  aaTE taTN
		{-# L #-}
		xs_r3v ys_r3w  ::  aaTE taTN
		       {-# L #-}
		       ys_r3w ->
		  let {
		    ds_d1e0  ::  taTN -> aaTE [taTN]
		    {-# L #-}
		    ds_d1e0 =
			\ x_r3y  ::  taTN
			  {-# L #-}
			  x_r3y ->
			    let {
			      ds_d1eg  ::  taTN -> aaTE [taTN]
			      {-# L #-}
			      ds_d1eg =
				  \ y_r3A  ::  taTN
				    {-# L #-}
				    y_r3A ->
				      zero_a1cZ _@_ [taTN]
			    } in  >>=_a1cX _@_ taTN _@_ [taTN] ys_r3w ds_d1eg
		  } in  >>=_a1cX _@_ taTN _@_ [taTN] xs_r3v ds_d1e0;
	} in  h_aTr
g{-r3R,x-}  ::  _forall_
		[aaUm taUx taUz taUB]
		=>
		{PrelBase.MonadZero{-29,p-} aaUm}
		-> aaUm taUx
		-> aaUm taUz
		-> aaUm taUB
		-> aaUm (taUx, taUz, taUB)
{-# L #-}
g{-r3R,x-} =
    _/\_ aaUm taUx taUz taUB -> \ d.MonadZero_aUP  ::  {PrelBase.MonadZero{-29,p-} aaUm}
				  {-# L #-}
				  d.MonadZero_aUP ->
	_letrec_ {
	  d.Monad_aUL  ::  {PrelBase.Monad{-28,p-} aaUm}
	  {-# L #-}
	  d.Monad_aUL =
	      PrelBase.scsel_MonadZeroPrelBaseMonad{-a19C,p-}
		  _@_ aaUm d.MonadZero_aUP;
	  >>=_a1eM  ::  _forall_
			[taVt taVs]
			=>
			aaUm taVt -> (taVt -> aaUm taVs) -> aaUm taVs
	  {-# L #-}
	  >>=_a1eM =
	      PrelBase.>>={-811,p-} _@_ aaUm d.Monad_aUL;
	  d.Monad_aUN  ::  {PrelBase.Monad{-28,p-} aaUm}
	  {-# L #-}
	  d.Monad_aUN =
	      d.Monad_aUL;
	  return_a1eN  ::  _forall_ [taVu] => taVu -> aaUm taVu
	  {-# L #-}
	  return_a1eN =
	      PrelBase.return{-816,p-} _@_ aaUm d.Monad_aUN;
	  zero_a1eO  ::  _forall_ [taVv] => aaUm taVv
	  {-# L #-}
	  zero_a1eO =
	      PrelBase.zero{-810,p-} _@_ aaUm d.MonadZero_aUP;
	  g_aU4  ::  aaUm taUx
		     -> aaUm taUz
		     -> aaUm taUB
		     -> aaUm (taUx, taUz, taUB)
	  {-# L #-}
	  g_aU4 =
	      \ xs_r3l  ::  aaUm taUx
		{-# L #-}
		xs_r3l ys_r3m  ::  aaUm taUz
		       {-# L #-}
		       ys_r3m zs_r3n  ::  aaUm taUB
			      {-# L #-}
			      zs_r3n ->
		  let {
		    ds_d1fQ  ::  taUx -> aaUm (taUx, taUz, taUB)
		    {-# L #-}
		    ds_d1fQ =
			\ x_r3p  ::  taUx
			  {-# L #-}
			  x_r3p ->
			    let {
			      ds_d1g6  ::  taUz -> aaUm (taUx, taUz, taUB)
			      {-# L #-}
			      ds_d1g6 =
				  \ y_r3r  ::  taUz
				    {-# L #-}
				    y_r3r ->
				      let {
					ds_d1gm  ::  taUB -> aaUm (taUx, taUz, taUB)
					{-# L #-}
					ds_d1gm =
					    \ z_r3t  ::  taUB
					      {-# L #-}
					      z_r3t ->
						let {
						  ds_d1gx  ::  (taUx, taUz, taUB)
						  {-# L #-}
						  ds_d1gx =
						      PrelTup.(,,){-63,w-}{i}
							  {_@_ taUx
							   _@_ taUz
							   _@_ taUB
							   x_r3p
							   y_r3r
							   z_r3t}
						} in  return_a1eN _@_ (taUx, taUz, taUB) ds_d1gx
				      } in  >>=_a1eM _@_ taUB _@_ (taUx, taUz, taUB) zs_r3n ds_d1gm
			    } in  >>=_a1eM _@_ taUz _@_ (taUx, taUz, taUB) ys_r3m ds_d1g6
		  } in  >>=_a1eM _@_ taUx _@_ (taUx, taUz, taUB) xs_r3l ds_d1fQ;
	} in  g_aU4
f{-r3S,x-}  ::  _forall_
		[aaV0 taV2]
		=>
		{PrelBase.Monad{-28,p-} aaV0} -> aaV0 taV2 -> aaV0 taV2
{-# L #-}
f{-r3S,x-} =
    _/\_ aaV0 taV2 -> \ d.Monad_aVe  ::  {PrelBase.Monad{-28,p-} aaV0}
			{-# L #-}
			d.Monad_aVe ->
	_letrec_ {
	  >>=_a1h7  ::  _forall_
			[taVx taVw]
			=>
			aaV0 taVx -> (taVx -> aaV0 taVw) -> aaV0 taVw
	  {-# L #-}
	  >>=_a1h7 =
	      PrelBase.>>={-811,p-} _@_ aaV0 d.Monad_aVe;
	  d.Monad_aVg  ::  {PrelBase.Monad{-28,p-} aaV0}
	  {-# L #-}
	  d.Monad_aVg =
	      d.Monad_aVe;
	  return_a1he  ::  _forall_ [taVy] => taVy -> aaV0 taVy
	  {-# L #-}
	  return_a1he =
	      PrelBase.return{-816,p-} _@_ aaV0 d.Monad_aVg;
	  f_aUS  ::  aaV0 taV2 -> aaV0 taV2
	  {-# L #-}
	  f_aUS =
	      \ xs_r3h  ::  aaV0 taV2
		{-# L #-}
		xs_r3h ->
		  let {
		    ds_d1hQ  ::  taV2 -> aaV0 taV2
		    {-# L #-}
		    ds_d1hQ =
			\ x_r3j  ::  taV2
			  {-# L #-}
			  x_r3j ->
			    return_a1he _@_ taV2 x_r3j
		  } in  >>=_a1h7 _@_ taV2 _@_ taV2 xs_r3h ds_d1hQ;
	} in  f_aUS
end Rec }
