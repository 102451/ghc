

================================================================================
Desugared:
Rec {
f{-r3r,x-}  ::  _forall_
		[taRl taRH taRP]
		=>
		[taRP] -> taRH -> [taRl] -> [taRl]
{-# L #-}
f{-r3r,x-} =
    _/\_ taRl taRH taRP ->
	_letrec_ {
	  ++_aTa  ::  _forall_ [taQZ] => [taQZ] -> [taQZ] -> [taQZ]
	  {-# L #-}
	  ++_aTa =
	      ++_aTb;
	  ++_aT9  ::  _forall_ [taR6] => [taR6] -> [taR6] -> [taR6]
	  {-# L #-}
	  ++_aT9 =
	      ++_aTb;
	  ++_aTc  ::  _forall_ [taRd] => [taRd] -> [taRd] -> [taRd]
	  {-# L #-}
	  ++_aTc =
	      ++_aTb;
	  f_aQw  ::  [taRP] -> taRH -> [taRl] -> [taRl]
	  {-# L #-}
	  f_aQw =
	      \ x_r3d  ::  [taRP]
		{-# L #-}
		x_r3d y_r3e  ::  taRH
		      {-# L #-}
		      y_r3e z_r3f  ::  [taRl]
			    {-# L #-}
			    z_r3f ->
		  let { ds_dYt  ::  [taRP]
			{-# L #-}
			ds_dYt =
		    let { ds_dXM  ::  [taRP]
			  {-# L #-}
			  ds_dXM =
		      let { ds_dXZ  ::  [taRP]
			    {-# L #-}
			    ds_dXZ =
			let {
			  ds_dYc  ::  [taRP]
			  {-# L #-}
			  ds_dYc =
			      ++_aTc _@_ taRP x_r3d x_r3d
			} in  ++_aT9 _@_ taRP x_r3d ds_dYc
		      } in
		      ++_aTa _@_ taRP x_r3d ds_dXZ
		    } in
		    ++_aTb _@_ taRP x_r3d ds_dXM
		  } in
		  case ds_dYt of {
		    PrelBase.[]{-5i,w-}{i} -> PrelBase.[]{-5i,w-}{i} _@_ taRl;
		    PrelBase.:{-55,w-}{i} a_r3i ds_dYL ->
			let { fail_dZp  ::  [taRl]
			      {-# L #-}
			      fail_dZp =
			  let {
			    bs_r3q  ::  [taRP]
			    {-# L #-}
			    bs_r3q =
				ds_dYL } in
			  let {
			    a_r3p  ::  taRP
			    {-# L #-}
			    a_r3p =
				a_r3i } in
			  let { ds_dYY  ::  [PrelBase.Char{-38,W-}]
				{-# L #-}
				ds_dYY =
			    let {
			      ds_dZb  ::  PrelBase.Char{-38,W-}
			      {-# L #-}
			      ds_dZb =
				  PrelBase.C#{-54,w-}{i} {'4'} } in
			    let {
			      ds_dZf  ::  [PrelBase.Char{-38,W-}]
			      {-# L #-}
			      ds_dZf =
				  PrelBase.[]{-5i,w-}{i} {_@_ PrelBase.Char{-38,W-}}
			    } in 
			      PrelBase.:{-55,w-}{i} {_@_ PrelBase.Char{-38,W-} ds_dZb ds_dZf}
			  } in
			  IOBase.error{-87,w-} _@_ [taRl] ds_dYY
			} in
			case ds_dYL of {
			  PrelBase.[]{-5i,w-}{i} ->
			      let { ds_dZD  ::  [PrelBase.Char{-38,W-}]
				    {-# L #-}
				    ds_dZD =
				let {
				  ds_dZO  ::  PrelBase.Char{-38,W-}
				  {-# L #-}
				  ds_dZO =
				      PrelBase.C#{-54,w-}{i} {'2'} } in
				let {
				  ds_dZS  ::  [PrelBase.Char{-38,W-}]
				  {-# L #-}
				  ds_dZS =
				      PrelBase.[]{-5i,w-}{i} {_@_ PrelBase.Char{-38,W-}}
				} in 
				  PrelBase.:{-55,w-}{i} {_@_ PrelBase.Char{-38,W-} ds_dZO ds_dZS}
			      } in
			      IOBase.error{-87,w-} _@_ [taRl] ds_dZD;
			  PrelBase.:{-55,w-}{i} b_r3l ds_d107 ->
			      case ds_d107 of {
				PrelBase.[]{-5i,w-}{i} -> fail_dZp;
				PrelBase.:{-55,w-}{i} c_r3m ds_d10k ->
				    case ds_d10k of {
				      PrelBase.:{-55,w-}{i} ds_d10r ds_d10s -> fail_dZp;
				      PrelBase.[]{-5i,w-}{i} ->
					  let {
					    a_r3k  ::  taRP
					    {-# L #-}
					    a_r3k =
						a_r3i } in
					  let {
					    ds_d10B  ::  (taRH, [taRl], taRH, [taRl])
					    {-# L #-}
					    ds_d10B =
						PrelTup.(,,,){-64,w-}{i}
						    {_@_ taRH
						     _@_ [taRl]
						     _@_ taRH
						     _@_ [taRl]
						     y_r3e
						     z_r3f
						     y_r3e
						     z_r3f}
					  } in  z_r3f;
				    };
			      };
			};
		  };
	} in  f_aQw
d.MonadPlus_aRX  ::  {PrelBase.MonadPlus{-2a,p-} PrelBase.[]{-3j,W-}}
{-# L #-}
d.MonadPlus_aRX =
    PrelBase.$d23{-roi,p-}
++_aTb  ::  _forall_ [taQR] => [taQR] -> [taQR] -> [taQR]
{-# L #-}
++_aTb =
    PrelBase.++{-rnQ,p-} _@_ PrelBase.[]{-3j,W-} d.MonadPlus_aRX
end Rec }
