ds038.hs:7: 
    Warning: Possibly incomplete patterns
	in the definition of function `takeList'


================================================================================
Desugared:
Rec {
takeList{-r3e,x-}  ::  _forall_
		       [taCy]
		       =>
		       PrelBase.Int{-3g,W-} -> [taCy] -> [taCy]
{-# L #-}
takeList{-r3e,x-} =
    _/\_ taCy ->
	_letrec_ {
	  lit_aHX  ::  PrelBase.Int{-3g,W-}
	  {-# L #-}
	  lit_aHX =
	      lit_aHZ;
	  >=_aI4  ::  PrelBase.Int{-3g,W-}
		      -> PrelBase.Int{-3g,W-}
		      -> PrelBase.Bool{-34,W-}
	  {-# L #-}
	  >=_aI4 =
	      >=_aI2;
	  -_aI5  ::  PrelBase.Int{-3g,W-}
		     -> PrelBase.Int{-3g,W-}
		     -> PrelBase.Int{-3g,W-}
	  {-# L #-}
	  -_aI5 =
	      -_aI3;
	  takeList_aCs  ::  PrelBase.Int{-3g,W-} -> [taCy] -> [taCy]
	  {-# L #-}
	  takeList_aCs =
	      \ ds_dJb  ::  PrelBase.Int{-3g,W-}
		{-# L #-}
		ds_dJb ds_dJo  ::  [taCy]
		       {-# L #-}
		       ds_dJo ->
		  let {
		    fail_dJp  ::  [taCy]
		    {-# L #-}
		    fail_dJp =
			GHCerr.patError{-8r,w-}
			    _@_ [taCy] _string_ "ds038.hs:7|function `takeList'" } in
		  let {
		    fail_dKA  ::  [taCy]
		    {-# L #-}
		    fail_dKA =
			case
			    (\ ds_dJi  ::  PrelBase.Int{-3g,W-}
			       {-# L #-}
			       ds_dJi ->
				 >=_aI2 ds_dJi lit_aHZ)
				ds_dJb
			of {
			  PrelBase.True{-5E,w-}{i} ->
			      let {
				n_r3h  ::  PrelBase.Int{-3g,W-}
				{-# L #-}
				n_r3h =
				    (\ ds_dJJ  ::  PrelBase.Int{-3g,W-}
				       {-# L #-}
				       ds_dJJ ->
					 -_aI3 ds_dJJ lit_aHZ)
					ds_dJb
			      } in 
				case ds_dJo of {
				  PrelBase.[]{-5i,w-}{i} -> PrelBase.[]{-5i,w-}{i} _@_ taCy;
				  PrelBase.:{-55,w-}{i} x_r3k xs_r3l ->
				      let {
					n_r3j  ::  PrelBase.Int{-3g,W-}
					{-# L #-}
					n_r3j =
					    n_r3h } in
				      let {
					ds_dKg  ::  [taCy]
					{-# L #-}
					ds_dKg =
					    takeList{-r3e,x-} _@_ taCy n_r3j xs_r3l
				      } in  PrelBase.:{-55,w-}{i} _@_ taCy x_r3k ds_dKg;
				};
			  PrelBase.False{-58,w-}{i} -> fail_dJp;
			}
		  } in 
		    case ds_dJb of { PrelBase.I#{-5b,w-}{i} ds_dKJ  ->
		    case# ds_dKJ of {
		      0 -> PrelBase.[]{-5i,w-}{i} _@_ taCy;
		      ds_dKW -> fail_dKA;
		    };};
	} in  takeList_aCs
lit_aI0  ::  PrelBase.Int{-3g,W-}
{-# L #-}
lit_aI0 =
    PrelBase.I#{-5b,w-}{i} 0
d.Eq_aD5  ::  {PrelBase.Eq{-23,p-} PrelBase.Int{-3g,W-}}
{-# L #-}
d.Eq_aD5 =
    PrelBase.$d8{-raT,p-}
==_aI1  ::  PrelBase.Int{-3g,W-}
	    -> PrelBase.Int{-3g,W-}
	    -> PrelBase.Bool{-34,W-}
{-# L #-}
==_aI1 =
    PrelBase.=={-8Y,p-} _@_ PrelBase.Int{-3g,W-} d.Eq_aD5
lit_aHZ  ::  PrelBase.Int{-3g,W-}
{-# L #-}
lit_aHZ =
    PrelBase.I#{-5b,w-}{i} 1
d.Ord_aD8  ::  {PrelBase.Ord{-2d,p-} PrelBase.Int{-3g,W-}}
{-# L #-}
d.Ord_aD8 =
    PrelBase.$d7{-raS,p-}
>=_aI2  ::  PrelBase.Int{-3g,W-}
	    -> PrelBase.Int{-3g,W-}
	    -> PrelBase.Bool{-34,W-}
{-# L #-}
>=_aI2 =
    PrelBase.>={-8Z,p-} _@_ PrelBase.Int{-3g,W-} d.Ord_aD8
d.Num_aDb  ::  {PrelBase.Num{-2c,p-} PrelBase.Int{-3g,W-}}
{-# L #-}
d.Num_aDb =
    PrelBase.$d4{-raw,p-}
-_aI3  ::  PrelBase.Int{-3g,W-}
	   -> PrelBase.Int{-3g,W-}
	   -> PrelBase.Int{-3g,W-}
{-# L #-}
-_aI3 =
    PrelBase.-{-817,p-} _@_ PrelBase.Int{-3g,W-} d.Num_aDb
end Rec }
