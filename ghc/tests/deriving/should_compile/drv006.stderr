

================================================================================
Typechecked:
MkBar{-r4A,x-}{i} =
    _/\_ a_tr4s b_tr4t -> \ tpl_B1 tpl_B2 tpl_B3 tpl_B4 tpl_B5 ->
	MkBar{-r4A,x-}{i}
	    {_@_ a_tr4s _@_ b_tr4t tpl_B1 tpl_B2 tpl_B3 tpl_B4 tpl_B5}
Foo1{-r6,x-}{i} = Foo1{-r6,x-}{i} {}
Foo2{-r5,x-}{i} = Foo2{-r5,x-}{i} {}
Foo3{-r8,x-}{i} = Foo3{-r8,x-}{i} {}
Foo4{-ra,x-}{i} = Foo4{-ra,x-}{i} {}
Foo5{-rc,x-}{i} = Foo5{-rc,x-}{i} {}
Foo6{-re,x-}{i} = Foo6{-re,x-}{i} {}
Foo7{-rg,x-}{i} = Foo7{-rg,x-}{i} {}
Foo8{-ri,x-}{i} = Foo8{-ri,x-}{i} {}
AbsBinds [] [] [([], con2tag_Foo#_rUI, con2tag_Foo#_aYg)]
    con2tag_Foo#_aYg Foo1{-r6,x-}{i} = 0#
    con2tag_Foo#_aYg Foo2{-r5,x-}{i} = 1#
    con2tag_Foo#_aYg Foo3{-r8,x-}{i} = 2#
    con2tag_Foo#_aYg Foo4{-ra,x-}{i} = 3#
    con2tag_Foo#_aYg Foo5{-rc,x-}{i} = 4#
    con2tag_Foo#_aYg Foo6{-re,x-}{i} = 5#
    con2tag_Foo#_aYg Foo7{-rg,x-}{i} = 6#
    con2tag_Foo#_aYg Foo8{-ri,x-}{i} = 7#
AbsBinds [] [] [([], maxtag_Foo#_rUH, maxtag_Foo#_aYl)]
    maxtag_Foo#_aYl = PrelBase.I#{-5b,w-}{i} 7#
AbsBinds [] [] [([], tag2con_Foo#_rUG, tag2con_Foo#_aYo)]
    tag2con_Foo#_aYo (PrelBase.I#{-5b,w-}{i} 0#) = Foo1{-r6,x-}{i}
    tag2con_Foo#_aYo (PrelBase.I#{-5b,w-}{i} 1#) = Foo2{-r5,x-}{i}
    tag2con_Foo#_aYo (PrelBase.I#{-5b,w-}{i} 2#) = Foo3{-r8,x-}{i}
    tag2con_Foo#_aYo (PrelBase.I#{-5b,w-}{i} 3#) = Foo4{-ra,x-}{i}
    tag2con_Foo#_aYo (PrelBase.I#{-5b,w-}{i} 4#) = Foo5{-rc,x-}{i}
    tag2con_Foo#_aYo (PrelBase.I#{-5b,w-}{i} 5#) = Foo6{-re,x-}{i}
    tag2con_Foo#_aYo (PrelBase.I#{-5b,w-}{i} 6#) = Foo7{-rg,x-}{i}
    tag2con_Foo#_aYo (PrelBase.I#{-5b,w-}{i} 7#) = Foo8{-ri,x-}{i}
    tag2con_Foo#_aYo _
		     = IOBase.error{-87,w-} Foo{-r4z,x-} "Urk! in TcGenDeriv"
AbsBinds [] [] [([], $d1{-r13o,x-}, d.Eq_aYA)]
    ==_a13w = ==_a13x
    AbsBinds [] [] [([], ==_a13x, ==_aYE)]
	==_aYE a_rV5 b_rV6
	       = case con2tag_Foo#_rUI a_rV5 of
		   a#_rV8
		   -> case con2tag_Foo#_rUI b_rV6 of
			b#_rVa
			-> if a#_rV8 GHC.==#{-79,w-}{I} b#_rVa then
			       PrelBase.True{-5E,w-}{i}
			   else
			       PrelBase.False{-58,w-}{i}
    AbsBinds [] [] [([], /=_a13y, /=_aYT)]
	/=_aYT a_rVe b_rVf = PrelBase.not{-ri1,p-} ==_a13w a_rVe b_rVf
    d.Eq_aYA = ({-dict-} [] [==_a13x, /=_a13y])
AbsBinds
[ta13m, ta13n]
[]
[([ta13m, ta13n], $d2{-r13p,x-}, d.Eval_aZ7)]
    d.Eval_aZ7 = ({-dict-} [] [])
AbsBinds [] [] [([], $d3{-r13q,x-}, d.Eval_aZc)]
    d.Eval_aZc = ({-dict-} [] [])
AbsBinds [] [] [([], $d4{-r13r,x-}, d.Ord_aZh)]
    d.Eq_a110 = $d1{-r13o,x-}
    compare_a13z = compare_a13F
    compare_a13A = compare_a13F
    compare_a13B = compare_a13F
    compare_a13C = compare_a13F
    compare_a13D = compare_a13F
    compare_a13E = compare_a13F
    AbsBinds [] [] [([], compare_a13F, compare_aZl)]
	compare_aZl a_rW8 b_rW9
		    = case con2tag_Foo#_rUI a_rW8 of
			a#_rWe
			-> case con2tag_Foo#_rUI b_rW9 of
			     b#_rWg
			     -> if a#_rWe GHC.==#{-79,w-}{I} b#_rWg then
				    PrelBase.EQ{-rb0,p-}{i}
				else
				    if a#_rWe GHC.<#{-7b,w-}{I} b#_rWg then
					PrelBase.LT{-rb1,p-}{i}
				    else
					PrelBase.GT{-rb2,p-}{i}
		    where
			{- nonrec -}
			AbsBinds [taZE, taZG] [] [([taZE, taZG], cmp_eq_rWb, cmp_eq_aZp)]
			    cmp_eq_aZp _ _ = PrelBase.EQ{-rb0,p-}{i}
			{- nonrec -}
			{- nonrec -}
    AbsBinds [] [] [([], <_a13G, <_aZT)]
	<_aZT a_rVm b_rVn
	      = case compare_a13z a_rVm b_rVn of
		  PrelBase.LT{-rb1,p-}{i} -> PrelBase.True{-5E,w-}{i}
		  PrelBase.EQ{-rb0,p-}{i} -> PrelBase.False{-58,w-}{i}
		  PrelBase.GT{-rb2,p-}{i} -> PrelBase.False{-58,w-}{i}
    AbsBinds [] [] [([], <=_a13H, <=_a105)]
	<=_a105 a_rVu b_rVv
		= case compare_a13A a_rVu b_rVv of
		    PrelBase.LT{-rb1,p-}{i} -> PrelBase.True{-5E,w-}{i}
		    PrelBase.EQ{-rb0,p-}{i} -> PrelBase.True{-5E,w-}{i}
		    PrelBase.GT{-rb2,p-}{i} -> PrelBase.False{-58,w-}{i}
    AbsBinds [] [] [([], >=_a13I, >=_a10h)]
	>=_a10h a_rVC b_rVD
		= case compare_a13B a_rVC b_rVD of
		    PrelBase.LT{-rb1,p-}{i} -> PrelBase.False{-58,w-}{i}
		    PrelBase.EQ{-rb0,p-}{i} -> PrelBase.True{-5E,w-}{i}
		    PrelBase.GT{-rb2,p-}{i} -> PrelBase.True{-5E,w-}{i}
    AbsBinds [] [] [([], >_a13J, >_a10t)]
	>_a10t a_rVK b_rVL
	       = case compare_a13C a_rVK b_rVL of
		   PrelBase.LT{-rb1,p-}{i} -> PrelBase.False{-58,w-}{i}
		   PrelBase.EQ{-rb0,p-}{i} -> PrelBase.False{-58,w-}{i}
		   PrelBase.GT{-rb2,p-}{i} -> PrelBase.True{-5E,w-}{i}
    AbsBinds [] [] [([], max_a13K, max_a10F)]
	max_a10F a_rVS b_rVT
		 = case compare_a13D a_rVS b_rVT of
		     PrelBase.LT{-rb1,p-}{i} -> b_rVT
		     PrelBase.EQ{-rb0,p-}{i} -> a_rVS
		     PrelBase.GT{-rb2,p-}{i} -> a_rVS
    AbsBinds [] [] [([], min_a13L, min_a10R)]
	min_a10R a_rW0 b_rW1
		 = case compare_a13E a_rW0 b_rW1 of
		     PrelBase.LT{-rb1,p-}{i} -> a_rW0
		     PrelBase.EQ{-rb0,p-}{i} -> b_rW1
		     PrelBase.GT{-rb2,p-}{i} -> b_rW1
    d.Ord_aZh =
	({-dict-}
	 [d.Eq_a110]
	 [compare_a13F, <_a13G, <=_a13H, >=_a13I, >_a13J, max_a13K, min_a13L])
AbsBinds [] [] [([], $d5{-r13s,x-}, d.Show_a117)]
    showsPrec_a13M = showsPrec_a13N
    AbsBinds [] [] [([], showsPrec_a13N, showsPrec_a11b)]
	showsPrec_a11b a_rWl Foo1{-r6,x-}{i}
		       = PrelBase.showString{-rif,p-} "Foo1"
	showsPrec_a11b a_rWn Foo2{-r5,x-}{i}
		       = PrelBase.showString{-rif,p-} "Foo2"
	showsPrec_a11b a_rWp Foo3{-r8,x-}{i}
		       = PrelBase.showString{-rif,p-} "Foo3"
	showsPrec_a11b a_rWr Foo4{-ra,x-}{i}
		       = PrelBase.showString{-rif,p-} "Foo4"
	showsPrec_a11b a_rWt Foo5{-rc,x-}{i}
		       = PrelBase.showString{-rif,p-} "Foo5"
	showsPrec_a11b a_rWv Foo6{-re,x-}{i}
		       = PrelBase.showString{-rif,p-} "Foo6"
	showsPrec_a11b a_rWx Foo7{-rg,x-}{i}
		       = PrelBase.showString{-rif,p-} "Foo7"
	showsPrec_a11b a_rWz Foo8{-ri,x-}{i}
		       = PrelBase.showString{-rif,p-} "Foo8"
    AbsBinds [] [] [([], showList_a13O, showList_a11o)]
	showList_a11o = PrelBase.showList__{-r4x,p-}
			    Foo{-r4z,x-} showsPrec_a13M PrelBase.I#{-5b,w-}{i} 0#
    d.Show_a117 = ({-dict-} [] [showsPrec_a13N, showList_a13O])
AbsBinds [] [] [([], $d6{-r13t,x-}, d.Ix_a11z)]
    d.Show_a136 = $d5{-r13s,x-}
    d.Ord_a137 = $d4{-r13r,x-}
    inRange_a13P = inRange_a13S
    AbsBinds [] [] [([], range_a13Q, range_a11D)]
	range_a11D (a_rWH, b_rWI)
		   = case con2tag_Foo#_rUI a_rWH of
		       a#_rWK
		       -> case con2tag_Foo#_rUI b_rWI of
			    b#_rWM
			    -> map_a13u [PrelBase.Int{-3g,W-}, Foo{-r4z,x-}] tag2con_Foo#_rUG
									     enumFromTo_a13v PrelBase.I#{-5b,w-}{i} a#_rWK
											     PrelBase.I#{-5b,w-}{i} b#_rWM
    AbsBinds [] [] [([], index_a13R, index_a12d)]
	index_a12d (c_rWQ@(a_rWR, b_rWS)) d_rWT
		   = if inRange_a13P c_rWQ d_rWT then
			 case con2tag_Foo#_rUI a_rWR of
			   a#_rWV
			   -> case con2tag_Foo#_rUI d_rWT of
				d#_rWX
				-> case d#_rWX GHC.-#{-7E,w-}{I} a#_rWV of
				     c_rWZ -> PrelBase.I#{-5b,w-}{i} c_rWZ
		     else
			 IOBase.error{-87,w-}
			     PrelBase.Int{-3g,W-} "Ix.Foo.index: out of range\n"
    AbsBinds [] [] [([], inRange_a13S, inRange_a12K)]
	inRange_a12K (a_rX3, b_rX4) c_rX5
		     = case con2tag_Foo#_rUI a_rX3 of
			 a#_rX7
			 -> case con2tag_Foo#_rUI b_rX4 of
			      b#_rX9
			      -> case con2tag_Foo#_rUI c_rX5 of
				   c#_rXb
				   -> if c#_rXb GHC.>=#{-78,w-}{I} a#_rX7 then
					  c#_rXb GHC.<=#{-7c,w-}{I} b#_rX9
				      else
					  PrelBase.False{-58,w-}{i}
    d.Ix_a11z =
	({-dict-}
	 [d.Show_a136, d.Ord_a137]
	 [range_a13Q, index_a13R, inRange_a13S])
d.Functor_a13i = PrelBase.$d26{-rc9,p-}
map_a13u = PrelBase.map{-rh9,p-} PrelBase.[]{-3j,W-} d.Functor_a13i
d.Enum_a13l = PrelBase.$d6{-rcJ,p-}
enumFromTo_a13v =
    PrelBase.enumFromTo{-8W,p-} PrelBase.Int{-3g,W-} d.Enum_a13l

NOTE: Simplifier still going after 4 iterations; bailing out.
ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
Ix 1 :: $d4 1 $d5 1 $d6 1 $d7 1 $d8 1 $d9 1 Ix 1;
PrelBase 1 :: $d1 1 $d11 1 $d12 1 $d14 1 $d15 1 $d16 1 $d2 1 $d22 1 $d24 1 $d25 1 $d26 1 $d27 1 $d28 1 $d3 1 $d31 1 $d32 1 $d33 1 $d34 1 $d35 1 $d38 1 $d39 1 $d4 1 $d40 1 $d42 1 $d43 1 $d45 1 $d46 1 $d47 1 $d50 1 $d51 1 $d52 1 $d55 1 $d56 1 $d6 1 $d7 1 $d8 1 $d9 1 $m- 1 $m/= 1 $m< 1 $m<= 1 $m> 1 $m>= 1 $m>> 1 $mcompare 1 $menumFromThenTo 1 $menumFromTo 1 $mfromInt 1 $mmax 1 $mmin 1 $mshowList 1 && 1 . 1 not 1 showList__ 1 showParen 1 showSpace 1 showString 1 Enum 1 Eq 1 Eval 1 Functor 1 Monad 1 MonadZero 1 Num 1 Ord 1 Ordering 1 Ordering 1 Show 1 ShowS 1 String 1;
PrelNum 1 :: $d10 1 $d16 1 $d17 1 $d18 1 $d28 1 $d29 1 $d30 1 $d33 1 $d34 1 $d35 1 $d8 1;
PrelTup 1 :: $d13 1 $d4 1 $d49 1 $d9 1;
_exports_
ShouldSucceed Bar(MkBar) Foo(Foo1 Foo2 Foo3 Foo4 Foo5 Foo6 Foo7 Foo8);
_instances_
instance {PrelBase.Eq Foo} = $d1;
instance _forall_ [a b] => {PrelBase.Eval (Bar a b)} = $d2;
instance {PrelBase.Eval Foo} = $d3;
instance {PrelBase.Ord Foo} = $d4;
instance {PrelBase.Show Foo} = $d5;
instance {Ix.Ix Foo} = $d6;
_declarations_
1 $d1 _:_ {PrelBase.Eq Foo} ;;
1 $d2 _:_ _forall_ [a b] => {PrelBase.Eval (Bar a b)} ;;
1 $d3 _:_ {PrelBase.Eval Foo} ;;
1 $d4 _:_ {PrelBase.Ord Foo} ;;
1 $d5 _:_ {PrelBase.Show Foo} ;;
1 $d6 _:_ {Ix.Ix Foo} ;;
1 data Bar a b = MkBar a PrelBase.Int b PrelBase.Integer a ;
1 data Foo = Foo1 |  Foo2 |  Foo3 |  Foo4 |  Foo5 |  Foo6 |  Foo7 |  Foo8 ;
