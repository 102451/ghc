

================================================================================
Typechecked:
A{-r4,x-}{i} = A{-r4,x-}{i} {}
B{-r3,x-}{i} = B{-r3,x-}{i} {}
C{-r6,x-}{i} = C{-r6,x-}{i} {}
D{-r8,x-}{i} = D{-r8,x-}{i} {}
AbsBinds [] [] [([], con2tag_AD#_rUn, con2tag_AD#_aXE)]
    con2tag_AD#_aXE A{-r4,x-}{i} = 0#
    con2tag_AD#_aXE B{-r3,x-}{i} = 1#
    con2tag_AD#_aXE C{-r6,x-}{i} = 2#
    con2tag_AD#_aXE D{-r8,x-}{i} = 3#
AbsBinds [] [] [([], maxtag_AD#_rUm, maxtag_AD#_aXJ)]
    maxtag_AD#_aXJ = PrelBase.I#{-5b,w-}{i} 3#
AbsBinds [] [] [([], tag2con_AD#_rUl, tag2con_AD#_aXM)]
    tag2con_AD#_aXM (PrelBase.I#{-5b,w-}{i} 0#) = A{-r4,x-}{i}
    tag2con_AD#_aXM (PrelBase.I#{-5b,w-}{i} 1#) = B{-r3,x-}{i}
    tag2con_AD#_aXM (PrelBase.I#{-5b,w-}{i} 2#) = C{-r6,x-}{i}
    tag2con_AD#_aXM (PrelBase.I#{-5b,w-}{i} 3#) = D{-r8,x-}{i}
    tag2con_AD#_aXM _
		    = IOBase.error{-87,w-} AD{-r4h,x-} "Urk! in TcGenDeriv"
AbsBinds [] [] [([], $d1{-r12z,x-}, d.Eq_aXY)]
    ==_a12G = ==_a12H
    AbsBinds [] [] [([], ==_a12H, ==_aY2)]
	==_aY2 a_rUC b_rUD
	       = case con2tag_AD#_rUn a_rUC of
		   a#_rUF
		   -> case con2tag_AD#_rUn b_rUD of
			b#_rUH
			-> if a#_rUF GHC.==#{-79,w-}{I} b#_rUH then
			       PrelBase.True{-5E,w-}{i}
			   else
			       PrelBase.False{-58,w-}{i}
    AbsBinds [] [] [([], /=_a12I, /=_aYh)]
	/=_aYh a_rUL b_rUM = PrelBase.not{-rhL,p-} ==_a12G a_rUL b_rUM
    d.Eq_aXY = ({-dict-} [] [==_a12H, /=_a12I])
AbsBinds [] [] [([], $d2{-r12A,x-}, d.Eval_aYt)]
    d.Eval_aYt = ({-dict-} [] [])
AbsBinds [] [] [([], $d3{-r12B,x-}, d.Ord_aYy)]
    d.Eq_a10h = $d1{-r12z,x-}
    compare_a12J = compare_a12P
    compare_a12K = compare_a12P
    compare_a12L = compare_a12P
    compare_a12M = compare_a12P
    compare_a12N = compare_a12P
    compare_a12O = compare_a12P
    AbsBinds [] [] [([], compare_a12P, compare_aYC)]
	compare_aYC a_rVE b_rVF
		    = case con2tag_AD#_rUn a_rVE of
			a#_rVK
			-> case con2tag_AD#_rUn b_rVF of
			     b#_rVM
			     -> if a#_rVK GHC.==#{-79,w-}{I} b#_rVM then
				    PrelBase.EQ{-raK,p-}{i}
				else
				    if a#_rVK GHC.<#{-7b,w-}{I} b#_rVM then
					PrelBase.LT{-raL,p-}{i}
				    else
					PrelBase.GT{-raM,p-}{i}
		    where
			{- nonrec -}
			AbsBinds [taYV, taYX] [] [([taYV, taYX], cmp_eq_rVH, cmp_eq_aYG)]
			    cmp_eq_aYG _ _ = PrelBase.EQ{-raK,p-}{i}
			{- nonrec -}
			{- nonrec -}
    AbsBinds [] [] [([], <_a12Q, <_aZa)]
	<_aZa a_rUS b_rUT
	      = case compare_a12J a_rUS b_rUT of
		  PrelBase.LT{-raL,p-}{i} -> PrelBase.True{-5E,w-}{i}
		  PrelBase.EQ{-raK,p-}{i} -> PrelBase.False{-58,w-}{i}
		  PrelBase.GT{-raM,p-}{i} -> PrelBase.False{-58,w-}{i}
    AbsBinds [] [] [([], <=_a12R, <=_aZm)]
	<=_aZm a_rV0 b_rV1
	       = case compare_a12K a_rV0 b_rV1 of
		   PrelBase.LT{-raL,p-}{i} -> PrelBase.True{-5E,w-}{i}
		   PrelBase.EQ{-raK,p-}{i} -> PrelBase.True{-5E,w-}{i}
		   PrelBase.GT{-raM,p-}{i} -> PrelBase.False{-58,w-}{i}
    AbsBinds [] [] [([], >=_a12S, >=_aZy)]
	>=_aZy a_rV8 b_rV9
	       = case compare_a12L a_rV8 b_rV9 of
		   PrelBase.LT{-raL,p-}{i} -> PrelBase.False{-58,w-}{i}
		   PrelBase.EQ{-raK,p-}{i} -> PrelBase.True{-5E,w-}{i}
		   PrelBase.GT{-raM,p-}{i} -> PrelBase.True{-5E,w-}{i}
    AbsBinds [] [] [([], >_a12T, >_aZK)]
	>_aZK a_rVg b_rVh
	      = case compare_a12M a_rVg b_rVh of
		  PrelBase.LT{-raL,p-}{i} -> PrelBase.False{-58,w-}{i}
		  PrelBase.EQ{-raK,p-}{i} -> PrelBase.False{-58,w-}{i}
		  PrelBase.GT{-raM,p-}{i} -> PrelBase.True{-5E,w-}{i}
    AbsBinds [] [] [([], max_a12U, max_aZW)]
	max_aZW a_rVo b_rVp
		= case compare_a12N a_rVo b_rVp of
		    PrelBase.LT{-raL,p-}{i} -> b_rVp
		    PrelBase.EQ{-raK,p-}{i} -> a_rVo
		    PrelBase.GT{-raM,p-}{i} -> a_rVo
    AbsBinds [] [] [([], min_a12V, min_a108)]
	min_a108 a_rVw b_rVx
		 = case compare_a12O a_rVw b_rVx of
		     PrelBase.LT{-raL,p-}{i} -> a_rVw
		     PrelBase.EQ{-raK,p-}{i} -> b_rVx
		     PrelBase.GT{-raM,p-}{i} -> b_rVx
    d.Ord_aYy =
	({-dict-}
	 [d.Eq_a10h]
	 [compare_a12P, <_a12Q, <=_a12R, >=_a12S, >_a12T, max_a12U, min_a12V])
AbsBinds [] [] [([], $d4{-r12C,x-}, d.Show_a10o)]
    showsPrec_a12W = showsPrec_a12X
    AbsBinds [] [] [([], showsPrec_a12X, showsPrec_a10s)]
	showsPrec_a10s a_rVR A{-r4,x-}{i}
		       = PrelBase.showString{-ri0,p-} "A"
	showsPrec_a10s a_rVT B{-r3,x-}{i}
		       = PrelBase.showString{-ri0,p-} "B"
	showsPrec_a10s a_rVV C{-r6,x-}{i}
		       = PrelBase.showString{-ri0,p-} "C"
	showsPrec_a10s a_rVX D{-r8,x-}{i}
		       = PrelBase.showString{-ri0,p-} "D"
    AbsBinds [] [] [([], showList_a12Y, showList_a10B)]
	showList_a10B = PrelBase.showList__{-rhV,p-}
			    AD{-r4h,x-} showsPrec_a12W PrelBase.I#{-5b,w-}{i} 0#
    d.Show_a10o = ({-dict-} [] [showsPrec_a12X, showList_a12Y])
AbsBinds [] [] [([], $d5{-r12D,x-}, d.Ix_a10M)]
    d.Show_a12j = $d4{-r12C,x-}
    d.Ord_a12k = $d3{-r12B,x-}
    inRange_a12Z = inRange_a132
    AbsBinds [] [] [([], range_a130, range_a10Q)]
	range_a10Q (a_rW5, b_rW6)
		   = case con2tag_AD#_rUn a_rW5 of
		       a#_rW8
		       -> case con2tag_AD#_rUn b_rW6 of
			    b#_rWa
			    -> map_a12E [PrelBase.Int{-3g,W-}, AD{-r4h,x-}] tag2con_AD#_rUl
									    enumFromTo_a12F PrelBase.I#{-5b,w-}{i} a#_rW8
											    PrelBase.I#{-5b,w-}{i} b#_rWa
    AbsBinds [] [] [([], index_a131, index_a11q)]
	index_a11q (c_rWe@(a_rWf, b_rWg)) d_rWh
		   = if inRange_a12Z c_rWe d_rWh then
			 case con2tag_AD#_rUn a_rWf of
			   a#_rWj
			   -> case con2tag_AD#_rUn d_rWh of
				d#_rWl
				-> case d#_rWl GHC.-#{-7E,w-}{I} a#_rWj of
				     c_rWn -> PrelBase.I#{-5b,w-}{i} c_rWn
		     else
			 IOBase.error{-87,w-}
			     PrelBase.Int{-3g,W-} "Ix.AD.index: out of range\n"
    AbsBinds [] [] [([], inRange_a132, inRange_a11X)]
	inRange_a11X (a_rWr, b_rWs) c_rWt
		     = case con2tag_AD#_rUn a_rWr of
			 a#_rWv
			 -> case con2tag_AD#_rUn b_rWs of
			      b#_rWx
			      -> case con2tag_AD#_rUn c_rWt of
				   c#_rWz
				   -> if c#_rWz GHC.>=#{-78,w-}{I} a#_rWv then
					  c#_rWz GHC.<=#{-7c,w-}{I} b#_rWx
				      else
					  PrelBase.False{-58,w-}{i}
    d.Ix_a10M =
	({-dict-}
	 [d.Show_a12j, d.Ord_a12k]
	 [range_a130, index_a131, inRange_a132])
d.Functor_a12v = PrelBase.$d26{-rbT,p-}
map_a12E = PrelBase.map{-rgT,p-} PrelBase.[]{-3j,W-} d.Functor_a12v
d.Enum_a12y = PrelBase.$d6{-rct,p-}
enumFromTo_a12F =
    PrelBase.enumFromTo{-8W,p-} PrelBase.Int{-3g,W-} d.Enum_a12y

NOTE: Simplifier still going after 4 iterations; bailing out.
ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
Ix 1 :: $d4 1 $d5 1 $d6 1 $d7 1 $d8 1 $d9 1 Ix 1;
PrelBase 1 :: $d1 1 $d11 1 $d12 1 $d14 1 $d15 1 $d16 1 $d2 1 $d22 1 $d24 1 $d25 1 $d26 1 $d27 1 $d28 1 $d3 1 $d31 1 $d32 1 $d33 1 $d34 1 $d35 1 $d38 1 $d39 1 $d4 1 $d40 1 $d42 1 $d43 1 $d45 1 $d46 1 $d47 1 $d50 1 $d51 1 $d52 1 $d55 1 $d56 1 $d6 1 $d7 1 $d8 1 $d9 1 $m- 1 $m/= 1 $m< 1 $m<= 1 $m> 1 $m>= 1 $m>> 1 $mcompare 1 $menumFromThenTo 1 $menumFromTo 1 $mfromInt 1 $mmax 1 $mmin 1 $mshowList 1 && 1 . 1 not 1 showList__ 1 showParen 1 showSpace 1 showString 1 Enum 1 Eq 1 Eval 1 Functor 1 Monad 1 MonadZero 1 Num 1 Ord 1 Ordering 1 Ordering 1 Show 1 ShowS 1 String 1;
PrelNum 1 :: $d10 1 $d16 1 $d17 1 $d18 1 $d28 1 $d29 1 $d30 1 $d33 1 $d34 1 $d35 1 $d8 1;
PrelTup 1 :: $d13 1 $d4 1 $d49 1 $d9 1;
_exports_
ShouldSucceed AD(A B C D);
_instances_
instance {PrelBase.Eq AD} = $d1;
instance {PrelBase.Eval AD} = $d2;
instance {PrelBase.Ord AD} = $d3;
instance {PrelBase.Show AD} = $d4;
instance {Ix.Ix AD} = $d5;
_declarations_
1 $d1 _:_ {PrelBase.Eq AD} ;;
1 $d2 _:_ {PrelBase.Eval AD} ;;
1 $d3 _:_ {PrelBase.Ord AD} ;;
1 $d4 _:_ {PrelBase.Show AD} ;;
1 $d5 _:_ {Ix.Ix AD} ;;
1 data AD = A |  B |  C |  D ;
