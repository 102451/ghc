

--================================================================================
Simplified:
`$d2'  :: 
    `{PrelBase.Eval (M a{-r3H-})}'
`$d2' =
    _/\_ `a{-s191-}' ->
	`PrelBase.void'
`$d1'  :: 
    `{PrelBase.Eval (L a{-r3F-})}'
`$d1' =
    _/\_ `a{-s192-}' ->
	`PrelBase.void'
`A'  :: 
    `M a{-r3H-}'
`A' =
    _/\_ `a{-s18T-}' ->
	`A' {_@_ `a{-s18T-}'}
`B'  :: 
    `a{-r3H-} -> M a{-r3H-} -> M a{-r3H-}'
`B' =
    _/\_ `a{-s18U-}' -> \ `tpl'  :: 
			      `a{-s18U-}'
			  `tpl' `tpl'  :: 
				    `M a{-s18U-}'
				`tpl' ->
	`B' {_@_ `a{-s18U-}' `tpl' `tpl'}
`N'  :: 
    `L a{-r3F-}'
`N' =
    _/\_ `a{-s18V-}' ->
	`N' {_@_ `a{-s18V-}'}
`C'  :: 
    `a{-r3F-} -> Syn a{-r3F-} -> L a{-r3F-}'
`C' =
    _/\_ `a{-s18W-}' -> \ `tpl'  :: 
			      `a{-s18W-}'
			  `tpl' `tpl'  :: 
				    `Syn a{-s18W-}'
				`tpl' ->
	`C' {_@_ `a{-s18W-}' `tpl' `tpl'}
Rec {
`idL'  :: 
    `L (Syn c{-aGI-}) -> L (Syn c{-aGI-})'
`idL' =
    _/\_ `c{-s18X-}' -> \ `ds'  :: 
			      `L (Syn c{-s18X-})'
			  `ds' ->
	case `ds' of {
	  `N' ->
	      `N' {_@_ (`Syn' `c{-s18X-}')};
	  `C' `x' `l' ->
	      let {
		`ds'  :: 
		    `L (Syn c{-s18X-})'
		`ds' =
		    `idL'
			_@_ `c{-s18X-}' `l'
	      } in 
		`C' {_@_ (`Syn' `c{-s18X-}') `x' `ds'};
	}
end Rec }
Rec {
`idM'  :: 
    `M (L (Syn x{-aH8-})) -> M (L (Syn x{-aH8-}))'
`idM' =
    _/\_ `x{-s18Z-}' -> \ `ds'  :: 
			      `M (L (Syn x{-s18Z-}))'
			  `ds' ->
	case `ds' of {
	  `A' ->
	      `A' {_@_ (`L' (`Syn' `x{-s18Z-}'))};
	  `B' `x' `l' ->
	      let {
		`ds'  :: 
		    `L (Syn x{-s18Z-})'
		`ds' =
		    `idL'
			_@_ `x{-s18Z-}' `x' } in
	      let {
		`ds'  :: 
		    `M (L (Syn x{-s18Z-}))'
		`ds' =
		    `idM'
			_@_ `x{-s18Z-}' `l'
	      } in 
		`B' {_@_ (`L' (`Syn' `x{-s18Z-}')) `ds' `ds'};
	}
end Rec }
