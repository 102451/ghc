ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1 302
_instance_modules_
IO PrelAddr PrelArr PrelBounded PrelCCall PrelForeign PrelNum
_usages_
PrelBase 1 :: $dEq0 1 $dEq1 1 $dEqBool0 1 $dEqChar0 1 $dEqInt0 1 $dEval0 1 $dEval1 1 $dEval2 1 $dEvalBool0 1 $dEvalChar0 1 $dEvalDouble0 1 $dEvalInt0 1 $dEvalInteger0 1 $dNumInt0 1 $dShow0 1 $dShow1 1 $dShow2 1 $dShowBool0 1 $dShowChar0 1 $dShowInt0 1 $g1P 1 $g1w 1 $g1x 1 $g22 1 $g24 1 $g25 1 $g26 1 $g27 1 $g28 1 $g2T 1 $g2U 1 $g2Z 1 $g2b 1 $g2c 1 $g2g 1 $g2h 1 $g30 1 $g31 1 $g32 1 $g38 1 $g39 1 $g3a 1 $g3k 1 $g3l 1 $g3q 1 $g3s 1 $g3v 1 $g3w 1 $g3x 1 $g3y 1 $g3z 1 $g42 1 $g43 1 $g4k 1 $g4l 1 $g4m 1 $g4n 1 $g4o 1 $g4p 1 $g4r 1 $gb 1 $gh 1 $gj 1 $m- 1 $m/= 1 $mfromInt 1 $mshowList 1 $w$m/= 1 $wminusInt 1 $wplusInt 1 $wshowSignedInt 1 $wtimesInt 1 itos 1 minusInt 1 plusInt 1 showList__ 1 showLitChar 1 showSignedInt 1 timesInt 1 Eq 1 Eval 1 Num 1 Show 1 String 1;
PrelNum 1 :: $dEqDouble0 1 $dEqInteger0 1 $dNumDouble0 1 $dNumInteger0 1 $dShowDouble0 1 $dShowInteger0 1 $g10 1 $g1M 1 $g1N 1 $g1O 1 $g1P 1 $g1n 1 $g27 1 $g2G 1 $g2o 1 $g2p 1 $g2q 1 $g37 1 $g38 1 $g39 1 $g3a 1 $g3b 1 $g4L 1 $g4M 1 $g4R 1 $g4S 1 $g4f 1 $g4w 1 $g4x 1 $g4y 1 $g9 1 $gT 1 $ga 1 $gq 1 $gr 1 $gs 1 $gt 1 $gu 1 $gv 1 $gw 1 $gx 1 $gy 1 $gz 1 $wjtos 1 $wjtos' 1 $wminusDouble 1 $wplusDouble 1 $wshowSignedInteger 1 $wtimesDouble 1 minExpt 1 minusDouble 1 plusDouble 1 showSignedInteger 1 timesDouble 1;
PrelTup 1 :: $dEq0 1 $dEval0 1 $dShow3 1;
_exports_
ShouldSucceed area2 Point2(Point2);
_instances_
instance _forall_ [a] => {PrelBase.Eval (Point2 a)} = $dEvalPoint20;
_declarations_
1 $dEvalPoint20 _:_ _forall_ [a] => {PrelBase.Eval (Point2 a)} ;; _A_ 0 _bot_ ;;
1 $warea2 _:_ _forall_ [a] => (a -> a -> a) -> (a -> a -> a) -> a -> a -> (a, a) -> (a, a) -> a ;; _A_ 6 _S_ LSLLu(LL)u(LL) _u_ _/\_ $x0 -> \ $x1 :: ($x0 -> $x0 -> $x0) $x2 :: ($x0 -> $x0 -> $x0) $x3 :: $x0 $x4 :: $x0 $x5 :: ($x0, $x0) $x6 :: ($x0, $x0) -> case $x5 of { PrelTup.(,) $x7 $x8  -> case $x6 of { PrelTup.(,) $x9 $xa  -> let { $xd :: $x0 = let { $xb :: $x0 = $x2 $x3 $x7 } in let { $xc :: $x0 = $x2 $x4 $xa } in  $x1 $xb $xc } in let { $xg :: $x0 = let { $xe :: $x0 = $x2 $x4 $x8 } in let { $xf :: $x0 = $x2 $x3 $x9 } in  $x1 $xe $xf } in $x2 $xd $xg;};} ;;
1 area2 _:_ _forall_ [a] {PrelBase.Num a} => Point2 a -> Point2 a -> Point2 a -> a ;; _A_ 4 _S_ U(AAAAAAAALSA)N(U(LL))N(u(LL))N(u(LL)) $warea2 {PrelTup.(,) Point2 PrelBase.:Num} ;;
1 newtype {PrelBase.Num a} => Point2 a = Point2 (a, a) ;
