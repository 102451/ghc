==================== Typechecked ====================
AbsBinds [taCf] [d.Num_aCj] [([taCf], f{-r3f,x-}, f_aBV)]
    d.Eq_aCh = PrelBase.scsel_NumPrelBaseEq{-aCm,p-} taCf d.Num_aCj
    ==_aCl = PrelBase.=={-8Y,p-} taCf d.Eq_aCh
    fromInteger_aCk = PrelBase.fromInteger{-8S,p-} taCf d.Num_aCj
    f_aBV (x_r3d PrelBase.:{-55,w-}{i} xs_r3e)
	  = if x_r3d ==_aCl (fromInteger_aCk 2) then
		xs_r3e
	    else
		PrelBase.[]{-5i,w-}{i} taCf

ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d1 1 $d12 1 $d16 1 $d2 1 $d22 1 $d28 1 $d3 1 $d33 1 $d34 1 $d38 1 $d39 1 $d4 1 $d40 1 $d42 1 $d43 1 $d45 1 $d47 1 $d55 1 $d8 1 $d9 1 $m- 1 $m/= 1 $mfromInt 1 $mshowList 1 Eq 1 Eval 1 Num 1 Show 1 String 1;
PrelNum 1 :: $d10 1 $d16 1 $d18 1 $d29 1 $d33 1 $d35 1;
_exports_
ShouldSucceed f;
_declarations_
1 f _:_ _forall_ [ta] {PrelBase.Num ta} => [ta] -> [ta] ;;
