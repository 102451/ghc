==================== Typechecked ====================
AbsBinds [] [] [([], p{-r3e,x-}, p_aS7)]
    lit_aT9 = lit_aTd
    p_aS7
	= [(y_r3d +_aTc lit_aT9, PrelBase.True{-5E,w-}{i}) |
	       y_r3d <- [lit_aTe, lit_aTd] (PrelBase.Int{-3g,W-})]
lit_aTe = PrelBase.I#{-5b,w-}{i} 1#
lit_aTd = PrelBase.I#{-5b,w-}{i} 2#
d.Num_aSZ = PrelBase.$d4{-raq,p-}
+_aTc = PrelBase.+{-r9G,p-} PrelBase.Int{-3g,W-} d.Num_aSZ
d.Monad_aT2 = PrelBase.$d25{-raa,p-}
>>=_aTb = PrelBase.>>={-811,p-} PrelBase.[]{-3j,W-} d.Monad_aT2
d.Monad_aT5 = d.Monad_aT2
return_aTa =
    PrelBase.return{-816,p-} PrelBase.[]{-3j,W-} d.Monad_aT5

ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d1 1 $d12 1 $d16 1 $d2 1 $d22 1 $d24 1 $d25 1 $d28 1 $d3 1 $d33 1 $d34 1 $d38 1 $d39 1 $d4 1 $d40 1 $d42 1 $d43 1 $d45 1 $d47 1 $d55 1 $d8 1 $d9 1 $m- 1 $m/= 1 $m>> 1 $mfromInt 1 $mshowList 1 Eq 1 Eval 1 Monad 1 MonadZero 1 Num 1 Show 1 String 1;
PrelNum 1 :: $d10 1 $d16 1 $d18 1 $d29 1 $d33 1 $d35 1;
PrelTup 1 :: $d13 1 $d4 1 $d9 1;
_exports_
ShouldSucceed p;
_declarations_
1 p _:_ [(PrelBase.Int, PrelBase.Bool)] ;;
