

================================================================================
Typechecked:
AbsBinds
[taCH, taCC]
[d.Ord'_aCJ, d.Num_aCM]
[([taCH, taCC], f{-r3D,x-}, f_aCo)]
    lt_aDm = lt{-r3G,x-} taCC d.Ord'_aCJ
    fromInt_aDq = PrelBase.fromInt{-8R,p-} taCC d.Num_aCM
    lit_aDr = fromInt_aDq PrelBase.I#{-5b,w-}{i} 1#
    f_aCo x_r3h y_r3i
	  | lt_aDm x_r3h lit_aDr = PrelBase.True{-5E,w-}{i}
	  | PrelBase.otherwise{-818,p-} = PrelBase.False{-58,w-}{i}
AbsBinds [] [] [([], $d1{-rDn,x-}, d.Ord'_aCR)]
    d.Eq'_aCW = $d2{-rDo,x-}
    AbsBinds [] [] [([], lt_aDs, lt_aCV)]
	lt_aCV x_r3n y_r3o = PrelBase.True{-5E,w-}{i}
    d.Ord'_aCR = ({-dict-} [d.Eq'_aCW] [lt_aDs])
AbsBinds [] [] [([], $d2{-rDo,x-}, d.Eq'_aD6)]
    AbsBinds [] [] [([], doubleeq_aDt, doubleeq_aDa)]
	doubleeq_aDa x_r3u y_r3v = PrelBase.True{-5E,w-}{i}
    d.Eq'_aD6 = ({-dict-} [] [doubleeq_aDt])
scsel_Ord'ShouldSucceedEq'{-aDp,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case tpl_B1 of { PrelTup.(,){-62,w-}{i} tpl_B1 tpl_B2  -> tpl_B1;}
lt{-r3G,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case tpl_B1 of { PrelTup.(,){-62,w-}{i} tpl_B1 tpl_B2  -> tpl_B2;}
AbsBinds [taDk] [d.Ord'_aDg] []
doubleeq{-r3F,x-} = _/\_ t12 -> \ tpl_B1 -> tpl_B1
AbsBinds [taDl] [d.Eq'_aDj] []
ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d1 1 $d12 1 $d16 1 $d2 1 $d22 1 $d28 1 $d3 1 $d33 1 $d34 1 $d38 1 $d39 1 $d4 1 $d40 1 $d42 1 $d43 1 $d45 1 $d47 1 $d55 1 $d8 1 $d9 1 $m- 1 $m/= 1 $mfromInt 1 $mshowList 1 otherwise 1 Eq 1 Eval 1 Num 1 Show 1 String 1;
PrelNum 1 :: $d10 1 $d16 1 $d18 1 $d29 1 $d33 1 $d35 1;
_exports_
ShouldSucceed f Eq'(doubleeq) Ord'(lt);
_instances_
instance {Ord' PrelBase.Int} = $d1;
instance {Eq' PrelBase.Int} = $d2;
_declarations_
1 $d1 _:_ {Ord' PrelBase.Int} ;;
1 $d2 _:_ {Eq' PrelBase.Int} ;;
1 class Eq' a where {doubleeq :: a -> a -> PrelBase.Bool} ;
1 class {Eq' a} => Ord' a where {lt :: a -> a -> PrelBase.Bool} ;
1 f _:_ _forall_ [ta tb] {Ord' tb, PrelBase.Num tb} => tb -> ta -> PrelBase.Bool ;;
