

================================================================================
Typechecked:
AbsBinds
[taCB]
[d.Eq2_aCG, d.Num_aCJ]
[([taCB], f{-r3J,x-}, f_aCq)]
    d.Eq2_aCE = $d1{-rDT,x-} taCB d.Eq2_aCG
    deq_aDV = deq{-r3K,x-} [taCB] d.Eq2_aCE
    fromInt_aDW = PrelBase.fromInt{-8R,p-} taCB d.Num_aCJ
    lit_aDX = fromInt_aDW PrelBase.I#{-5b,w-}{i} 1#
    f_aCq x_r3g = deq_aDV x_r3g [lit_aDX] (taCB)
AbsBinds [taD0] [d.Eq2_aDq] [([taD0], $d1{-rDT,x-}, d.Eq2_aCP)]
    d.Eq2_aDt = d.Eq2_aDq
    deq_aDY = deq{-r3K,x-} taD0 d.Eq2_aDt
    d.Eq2_aDv = d.Eq2_aDq
    foo_aDZ = foo{-r3L,x-} taD0 d.Eq2_aDv
    deq_aE0 = deq_aE2
    foo_aE1 = foo_aE3
    AbsBinds [] [] [([], deq_aE2, deq_aCT)]
	deq_aCT (a_r3n PrelBase.:{-55,w-}{i} as_r3o)
		(b_r3p PrelBase.:{-55,w-}{i} bs_r3q)
		= if deq_aDY a_r3n foo_aDZ b_r3p then
		      deq_aE0 as_r3o foo_aE1 bs_r3q
		  else
		      PrelBase.False{-58,w-}{i}
    AbsBinds [] [] [([], foo_aE3, foo_aDn)]
	foo_aDn x_r3u = x_r3u
    d.Eq2_aCP = ({-dict-} [] [deq_aE2, foo_aE3])
AbsBinds [] [] [([], $d2{-rDU,x-}, d.Eq2_aDB)]
    AbsBinds [] [] [([], deq_aE4, deq_aDF)]
	deq_aDF x_r3A y_r3B = PrelBase.True{-5E,w-}{i}
    AbsBinds [] [] [([], foo_aE5, foo_aDM)]
	foo_aDM x_r3F = x_r3F
    d.Eq2_aDB = ({-dict-} [] [deq_aE4, foo_aE5])
deq{-r3K,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case tpl_B1 of { PrelTup.(,){-62,w-}{i} tpl_B1 tpl_B2  -> tpl_B1;}
foo{-r3L,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case tpl_B1 of { PrelTup.(,){-62,w-}{i} tpl_B1 tpl_B2  -> tpl_B2;}
AbsBinds [taDS] [d.Eq2_aDR] []
ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d1 1 $d12 1 $d16 1 $d2 1 $d22 1 $d28 1 $d3 1 $d33 1 $d34 1 $d38 1 $d39 1 $d4 1 $d40 1 $d42 1 $d43 1 $d45 1 $d47 1 $d55 1 $d8 1 $d9 1 $m- 1 $m/= 1 $mfromInt 1 $mshowList 1 Eq 1 Eval 1 Num 1 Show 1 String 1;
PrelNum 1 :: $d10 1 $d16 1 $d18 1 $d29 1 $d33 1 $d35 1;
_exports_
ShouldSucceed f Eq2(deq foo);
_instances_
instance _forall_ [a] {Eq2 a} => {Eq2 [a]} = $d1;
instance {Eq2 PrelBase.Int} = $d2;
_declarations_
1 $d1 _:_ _forall_ [a] {Eq2 a} => {Eq2 [a]} ;;
1 $d2 _:_ {Eq2 PrelBase.Int} ;;
1 class Eq2 a where {deq :: a -> a -> PrelBase.Bool; foo :: a -> a} ;
1 f _:_ _forall_ [ta] {Eq2 ta, PrelBase.Num ta} => [ta] -> PrelBase.Bool ;;
