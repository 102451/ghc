==================== Typechecked ====================
AbsBinds
[taCL]
[d.Eq2_aCQ, d.Num_aCT]
[([taCL], f{-r3J,x-}, f_aCy)]
    d.Eq2_aCO = $d1{-rE7,x-} taCL d.Eq2_aCQ
    deq_aE5 = deq{-r3L,x-} [taCL] d.Eq2_aCO
    fromInt_aE4 = PrelBase.fromInt{-8R,p-} taCL d.Num_aCT
    lit_aE3 = fromInt_aE4 PrelBase.I#{-5b,w-}{i} 1#
    f_aCy x_r3g = deq_aE5 x_r3g [lit_aE3] (taCL)
AbsBinds [taDa] [d.Eq2_aDA] [([taDa], $d1{-rE7,x-}, d.Eq2_aCZ)]
    d.Eq2_aDD = d.Eq2_aDA
    deq_aEd = deq{-r3L,x-} taDa d.Eq2_aDD
    d.Eq2_aDF = d.Eq2_aDA
    foo_aEc = foo{-r3K,x-} taDa d.Eq2_aDF
    deq_aEb = deq_aE9
    foo_aEa = foo_aE8
    AbsBinds [] [] [([], deq_aE9, deq_aD3)]
	deq_aD3 (a_r3n PrelBase.:{-55,w-}{i} as_r3o)
		(b_r3p PrelBase.:{-55,w-}{i} bs_r3q)
		= if deq_aEd a_r3n foo_aEc b_r3p then
		      deq_aEb as_r3o foo_aEa bs_r3q
		  else
		      PrelBase.False{-58,w-}{i}
    AbsBinds [] [] [([], foo_aE8, foo_aDx)]
	foo_aDx x_r3u = x_r3u
    d.Eq2_aCZ = ({-dict-} [] [deq_aE9, foo_aE8])
AbsBinds [] [] [([], $d2{-rE6,x-}, d.Eq2_aDL)]
    AbsBinds [] [] [([], deq_aEf, deq_aDP)]
	deq_aDP x_r3A y_r3B = PrelBase.True{-5E,w-}{i}
    AbsBinds [] [] [([], foo_aEe, foo_aDW)]
	foo_aDW x_r3F = x_r3F
    d.Eq2_aDL = ({-dict-} [] [deq_aEf, foo_aEe])
deq{-r3L,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case tpl_B1 of { PrelTup.(,){-62,w-}{i} tpl_B1 tpl_B2  -> tpl_B1;}
foo{-r3K,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case tpl_B1 of { PrelTup.(,){-62,w-}{i} tpl_B1 tpl_B2  -> tpl_B2;}
AbsBinds [taE2] [d.Eq2_aE1] []

ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d1 1 $d12 1 $d16 1 $d2 1 $d22 1 $d28 1 $d3 1 $d33 1 $d34 1 $d38 1 $d39 1 $d4 1 $d40 1 $d42 1 $d43 1 $d45 1 $d47 1 $d55 1 $d8 1 $d9 1 $m- 1 $m/= 1 $mfromInt 1 $mshowList 1 Eq 1 Eval 1 Num 1 Show 1 String 1;
PrelNum 1 :: $d10 1 $d16 1 $d18 1 $d29 1 $d33 1 $d35 1;
_exports_
ShouldSucceed f Eq2(deq foo);
_instances_
instance _forall_ [a] {Eq2 a} => {Eq2 [a]} = $d1;
instance {Eq2 PrelBase.Int} = $d2;
_declarations_
1 $d1 _:_ _forall_ [a] {Eq2 a} => {Eq2 [a]} ;;
1 $d2 _:_ {Eq2 PrelBase.Int} ;;
1 class Eq2 a where {deq :: a -> a -> PrelBase.Bool; foo :: a -> a} ;
1 f _:_ _forall_ [ta] {Eq2 ta, PrelBase.Num ta} => [ta] -> PrelBase.Bool ;;
