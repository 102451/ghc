

================================================================================
Typechecked:
AbsBinds
[taCD, taCz]
[d.Foo_aCF, d.Num_aCI]
[([taCD, taCz], g{-r3F,x-}, g_aCl)]
    o_and_aDR = o_and{-r3I,x-} taCz d.Foo_aCF
    fromInt_aDY = PrelBase.fromInt{-8R,p-} taCz d.Num_aCI
    lit_aDZ = fromInt_aDY PrelBase.I#{-5b,w-}{i} 1#
    g_aCl x_r3j y_r3k = o_and_aDR x_r3j lit_aDZ
AbsBinds [taD1] [] [([taD1], f{-r3G,x-}, f_aCK)]
    f_aCK x_r3g y_r3h = o_and_aDU x_r3g PrelBase.False{-58,w-}{i}
AbsBinds [] [] [([], $d1{-rDS,x-}, d.Foo_aD8)]
    AbsBinds [] [] [([], o_and_aE0, o_and_aDc)]
	lit_aE1 = lit_aDV
	==_aE2 = ==_aDW
	==_aE3 = ==_aDW
	lit_aE4 = lit_aDX
	==_aE5 = ==_aDW
	o_and_aDc x_r3p 0 = PrelBase.I#{-5b,w-}{i} 0#
	o_and_aDc 0 x_r3r = PrelBase.I#{-5b,w-}{i} 0#
	o_and_aDc 1 1 = PrelBase.I#{-5b,w-}{i} 1#
    d.Foo_aD8 = ({-dict-} [] [o_and_aE0])
AbsBinds [] [] [([], $d2{-rDT,x-}, d.Foo_aDA)]
    AbsBinds [] [] [([], o_and_aE6, o_and_aDE)]
	o_and_aDE PrelBase.False{-58,w-}{i} x_r3y
		  = PrelBase.False{-58,w-}{i}
	o_and_aDE x_r3A PrelBase.False{-58,w-}{i}
		  = PrelBase.False{-58,w-}{i}
	o_and_aDE PrelBase.True{-5E,w-}{i} PrelBase.True{-5E,w-}{i}
		  = PrelBase.True{-5E,w-}{i}
    d.Foo_aDA = ({-dict-} [] [o_and_aE6])
o_and{-r3I,x-} = _/\_ t12 -> \ tpl_B1 -> tpl_B1
AbsBinds [taDQ] [d.Foo_aDK] []
d.Foo_aDM = $d2{-rDT,x-}
o_and_aDU = o_and{-r3I,x-} PrelBase.Bool{-34,W-} d.Foo_aDM
lit_aDV = PrelBase.I#{-5b,w-}{i} 0#
d.Eq_aDP = PrelBase.$d8{-rbh,p-}
==_aDW = PrelBase.=={-8Y,p-} PrelBase.Int{-3g,W-} d.Eq_aDP
lit_aDX = PrelBase.I#{-5b,w-}{i} 1#
ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d1 1 $d12 1 $d16 1 $d2 1 $d22 1 $d28 1 $d3 1 $d33 1 $d34 1 $d38 1 $d39 1 $d4 1 $d40 1 $d42 1 $d43 1 $d45 1 $d47 1 $d55 1 $d8 1 $d9 1 $m- 1 $m/= 1 $mfromInt 1 $mshowList 1 Eq 1 Eval 1 Num 1 Show 1 String 1;
PrelNum 1 :: $d10 1 $d16 1 $d18 1 $d29 1 $d33 1 $d35 1;
_exports_
ShouldSucceed f g Foo(o_and);
_instances_
instance {Foo PrelBase.Int} = $d1;
instance {Foo PrelBase.Bool} = $d2;
_declarations_
1 $d1 _:_ {Foo PrelBase.Int} ;;
1 $d2 _:_ {Foo PrelBase.Bool} ;;
1 class Foo a where {o_and :: a -> a -> a} ;
1 f _:_ _forall_ [ta] => PrelBase.Bool -> ta -> PrelBase.Bool ;;
1 g _:_ _forall_ [ta tb] {Foo tb, PrelBase.Num tb} => tb -> ta -> tb ;;
