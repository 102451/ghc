==================== Typechecked ====================
AbsBinds
[taCN, taCJ]
[d.Foo_aCP, d.Num_aCS]
[([taCN, taCJ], g{-r3F,x-}, g_aCt)]
    o_and_aE5 = o_and{-r3H,x-} taCJ d.Foo_aCP
    fromInt_aE4 = PrelBase.fromInt{-8R,p-} taCJ d.Num_aCS
    lit_aE3 = fromInt_aE4 PrelBase.I#{-5b,w-}{i} 1#
    g_aCt x_r3j y_r3k = o_and_aE5 x_r3j lit_aE3
AbsBinds [taDd] [] [([taDd], f{-r3G,x-}, f_aCU)]
    f_aCU x_r3g y_r3h = o_and_aE9 x_r3g PrelBase.False{-58,w-}{i}
AbsBinds [] [] [([], $d1{-rEb,x-}, d.Foo_aDk)]
    AbsBinds [] [] [([], o_and_aEc, o_and_aDo)]
	lit_aEh = lit_aE8
	==_aEg = ==_aE7
	==_aEf = ==_aE7
	lit_aEe = lit_aE6
	==_aEd = ==_aE7
	o_and_aDo x_r3p 0 = PrelBase.I#{-5b,w-}{i} 0#
	o_and_aDo 0 x_r3r = PrelBase.I#{-5b,w-}{i} 0#
	o_and_aDo 1 1 = PrelBase.I#{-5b,w-}{i} 1#
    d.Foo_aDk = ({-dict-} [] [o_and_aEc])
AbsBinds [] [] [([], $d2{-rEa,x-}, d.Foo_aDM)]
    AbsBinds [] [] [([], o_and_aEi, o_and_aDQ)]
	o_and_aDQ PrelBase.False{-58,w-}{i} x_r3y
		  = PrelBase.False{-58,w-}{i}
	o_and_aDQ x_r3A PrelBase.False{-58,w-}{i}
		  = PrelBase.False{-58,w-}{i}
	o_and_aDQ PrelBase.True{-5E,w-}{i} PrelBase.True{-5E,w-}{i}
		  = PrelBase.True{-5E,w-}{i}
    d.Foo_aDM = ({-dict-} [] [o_and_aEi])
o_and{-r3H,x-} = _/\_ t12 -> \ tpl_B1 -> tpl_B1
AbsBinds [taE2] [d.Foo_aDW] []
d.Foo_aDY = $d2{-rEa,x-}
o_and_aE9 = o_and{-r3H,x-} PrelBase.Bool{-34,W-} d.Foo_aDY
lit_aE8 = PrelBase.I#{-5b,w-}{i} 0#
d.Eq_aE1 = PrelBase.$d8{-rbh,p-}
==_aE7 = PrelBase.=={-8Y,p-} PrelBase.Int{-3g,W-} d.Eq_aE1
lit_aE6 = PrelBase.I#{-5b,w-}{i} 1#

ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d1 1 $d12 1 $d16 1 $d2 1 $d22 1 $d28 1 $d3 1 $d33 1 $d34 1 $d38 1 $d39 1 $d4 1 $d40 1 $d42 1 $d43 1 $d45 1 $d47 1 $d55 1 $d8 1 $d9 1 $m- 1 $m/= 1 $mfromInt 1 $mshowList 1 Eq 1 Eval 1 Num 1 Show 1 String 1;
PrelNum 1 :: $d10 1 $d16 1 $d18 1 $d29 1 $d33 1 $d35 1;
_exports_
ShouldSucceed f g Foo(o_and);
_instances_
instance {Foo PrelBase.Int} = $d1;
instance {Foo PrelBase.Bool} = $d2;
_declarations_
1 $d1 _:_ {Foo PrelBase.Int} ;;
1 $d2 _:_ {Foo PrelBase.Bool} ;;
1 class Foo a where {o_and :: a -> a -> a} ;
1 f _:_ _forall_ [ta] => PrelBase.Bool -> ta -> PrelBase.Bool ;;
1 g _:_ _forall_ [ta tb] {Foo tb, PrelBase.Num tb} => tb -> ta -> tb ;;
