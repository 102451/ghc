==================== Typechecked ====================
AbsBinds [talh] [] [([talh], $d1{-rlM,x-}, d.C_ala)]
    AbsBinds [] [] [([], op1_alN, op1_ale)]
	op1_ale xs_r3k = xs_r3k
    d.C_ala = ({-dict-} [] [op1_alN])
AbsBinds
[talv]
[d.B_aly, d.C_alz]
[([talv], $d2{-rlP,x-}, d.B_alo)]
    d.C_alA = d.C_alz
    AbsBinds [] [] [([], op2_alQ, op2_als)]
	op2_als xs_r3s ys_r3t = xs_r3s
    d.B_alo = ({-dict-} [d.C_alA] [op2_alQ])
scsel_BShouldSucceedC{-alO,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case tpl_B1 of { PrelTup.(,){-62,w-}{i} tpl_B1 tpl_B2  -> tpl_B1;}
op2{-r3B,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case tpl_B1 of { PrelTup.(,){-62,w-}{i} tpl_B1 tpl_B2  -> tpl_B2;}
AbsBinds [talK] [d.B_alG] []
op1{-r3C,x-} = _/\_ t12 -> \ tpl_B1 -> tpl_B1
AbsBinds [talL] [d.C_alJ] []

ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_exports_
ShouldSucceed B(op2) C(op1);
_instances_
instance _forall_ [a] => {C [a]} = $d1;
instance _forall_ [a] {B a} => {B [a]} = $d2;
_declarations_
1 $d1 _:_ _forall_ [a] => {C [a]} ;;
1 $d2 _:_ _forall_ [a] {B a, C [a]} => {B [a]} ;;
1 class {C a} => B a where {op2 :: a -> a -> a} ;
1 class C a where {op1 :: a -> a} ;
