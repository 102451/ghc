==================== Typechecked ====================
AbsBinds [] [] [([], $d1{-rlF,x-}, d.Eq1_akY)]
    AbsBinds [] [] [([], deq_alG, deq_al2)]
	deq_al2 x_r3h y_r3i = PrelBase.True{-5E,w-}{i}
    d.Eq1_akY = ({-dict-} [] [deq_alG])
AbsBinds [talm] [d.Eq1_alv] [([talm], $d2{-rlH,x-}, d.Eq1_alb)]
    d.Eq1_alz = d.Eq1_alv
    deq_alJ = deq{-r3x,x-} talm d.Eq1_alz
    AbsBinds [] [] [([], deq_alI, deq_alf)]
	deq_alf (a_r3q PrelBase.:{-55,w-}{i} as_r3r)
		(b_r3s PrelBase.:{-55,w-}{i} bs_r3t)
		= deq_alJ a_r3q b_r3s
    d.Eq1_alb = ({-dict-} [] [deq_alI])
deq{-r3x,x-} = _/\_ t12 -> \ tpl_B1 -> tpl_B1
AbsBinds [talE] [d.Eq1_alD] []

ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_exports_
ShouldSucceed Eq1(deq);
_instances_
instance {Eq1 PrelBase.Int} = $d1;
instance _forall_ [a] {Eq1 a} => {Eq1 [a]} = $d2;
_declarations_
1 $d1 _:_ {Eq1 PrelBase.Int} ;;
1 $d2 _:_ _forall_ [a] {Eq1 a} => {Eq1 [a]} ;;
1 class Eq1 a where {deq :: a -> a -> PrelBase.Bool} ;
