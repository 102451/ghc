==================== Typechecked ====================
scsel_RingShouldSucceedGroup{-aFR,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case tpl_B1 of { PrelTup.(,){-62,w-}{i} tpl_B1 tpl_B2  -> tpl_B1;}
*{-r6w,l-} =
    _/\_ t12 -> \ tpl_B1 ->
	case tpl_B1 of { PrelTup.(,){-62,w-}{i} tpl_B1 tpl_B2  -> tpl_B2;}
AbsBinds [taEd] [d.Ring_aFv] [([taEd], $m*{-rFS,x-}, *_aFT)]
    d.Group_aFs = scsel_RingShouldSucceedGroup{-aFR,x-} taEd d.Ring_aFv
    AbsBinds [] [] [([], *_aFT, *_aEa)]
	*_aEa a_r6L b_r6M
	      = multiply_aFW a_r6L b_r6M
	      where
		  {- rec -}
		  AbsBinds
		  [taEm]
		  [d.Group_aFb]
		  [([taEm], multiply_r6O, multiply_aEj)]
		      d.Group_aFd = d.Group_aFb
		      compare_aGa = compare{-r6D,l-} taEm d.Group_aFd
		      d.Group_aFf = d.Group_aFb
		      zero_aG9 = zero{-r6z,l-} taEm d.Group_aFf
		      zero_aG8 = zero_aG9
		      d.Group_aFh = d.Group_aFb
		      -_aG7 = -{-r6A,l-} taEm d.Group_aFh
		      zero_aG6 = zero_aG9
		      d.Group_aFj = d.Group_aFb
		      multiply_aG5 = multiply_r6O taEm d.Group_aFj
		      -_aG4 = -_aG7
		      zero_aG3 = zero_aG9
		      compare_aG2 = compare_aGa
		      d.Group_aFl = d.Group_aFb
		      one_aG1 = one{-r6y,l-} taEm d.Group_aFl
		      d.Group_aFn = d.Group_aFb
		      +_aG0 = +{-r6B,l-} taEm d.Group_aFn
		      multiply_aFZ = multiply_aG5
		      -_aFY = -_aG7
		      one_aFX = one_aG1
		      multiply_aEj a_r6S b_r6T
				   = case compare_aGa a_r6S zero_aG9 of
				       PrelBase.EQ{-r5J,p-}{i} -> zero_aG8
				       PrelBase.LT{-r5K,p-}{i}
				       -> zero_aG6 -_aG7 (multiply_aG5 zero_aG3 -_aG4 a_r6S b_r6T)
				       PrelBase.GT{-r5I,p-}{i}
				       -> case compare_aG2 a_r6S one_aG1 of
					    PrelBase.EQ{-r5J,p-}{i} -> b_r6T
					    _
					    -> b_r6T +_aG0 (multiply_aFZ a_r6S -_aFY one_aFX b_r6T)
		  {- nonrec -}
		  multiply_aFW = multiply_r6O taEd d.Group_aFs
		  {- nonrec -}
compare{-r6D,l-} =
    _/\_ t12 -> \ tpl_B1 ->
	case
	    tpl_B1
	of {
	PrelTup.(,,,,,){-66,w-}{i} tpl_B1 tpl_B2 tpl_B3 tpl_B4 tpl_B5 tpl_B6  ->
	tpl_B1;}
fromInteger{-r6C,l-} =
    _/\_ t12 -> \ tpl_B1 ->
	case
	    tpl_B1
	of {
	PrelTup.(,,,,,){-66,w-}{i} tpl_B1 tpl_B2 tpl_B3 tpl_B4 tpl_B5 tpl_B6  ->
	tpl_B2;}
+{-r6B,l-} =
    _/\_ t12 -> \ tpl_B1 ->
	case
	    tpl_B1
	of {
	PrelTup.(,,,,,){-66,w-}{i} tpl_B1 tpl_B2 tpl_B3 tpl_B4 tpl_B5 tpl_B6  ->
	tpl_B3;}
-{-r6A,l-} =
    _/\_ t12 -> \ tpl_B1 ->
	case
	    tpl_B1
	of {
	PrelTup.(,,,,,){-66,w-}{i} tpl_B1 tpl_B2 tpl_B3 tpl_B4 tpl_B5 tpl_B6  ->
	tpl_B4;}
zero{-r6z,l-} =
    _/\_ t12 -> \ tpl_B1 ->
	case
	    tpl_B1
	of {
	PrelTup.(,,,,,){-66,w-}{i} tpl_B1 tpl_B2 tpl_B3 tpl_B4 tpl_B5 tpl_B6  ->
	tpl_B5;}
one{-r6y,l-} =
    _/\_ t12 -> \ tpl_B1 ->
	case
	    tpl_B1
	of {
	PrelTup.(,,,,,){-66,w-}{i} tpl_B1 tpl_B2 tpl_B3 tpl_B4 tpl_B5 tpl_B6  ->
	tpl_B6;}
AbsBinds
[taFB]
[d.Group_aFO]
[([taFB], $mzero{-rFV,x-}, zero_aGb), ([taFB],
				       $mone{-rFU,x-},
				       one_aGc)]
    d.Group_aFQ = d.Group_aFO
    fromInteger_aGe = fromInteger{-r6C,l-} taFB d.Group_aFQ
    fromInteger_aGd = fromInteger_aGe
    AbsBinds [] [] [([], zero_aGb, zero_aFA)]
	zero_aFA = fromInteger_aGe 0
    AbsBinds [] [] [([], one_aGc, one_aFI)]
	one_aFI = fromInteger_aGd 1

ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d1 1 $d12 1 $d16 1 $d2 1 $d22 1 $d28 1 $d3 1 $d33 1 $d34 1 $d35 1 $d38 1 $d39 1 $d4 1 $d40 1 $d42 1 $d43 1 $d45 1 $d46 1 $d47 1 $d55 1 $d56 1 $d8 1 $d9 1 $m- 1 $m/= 1 $mfromInt 1 $mshowList 1 Eq 1 Eval 1 Num 1 Ordering 1 Ordering 1 Show 1 String 1;
PrelNum 1 :: $d10 1 $d16 1 $d18 1 $d29 1 $d33 1 $d35 1;
_exports_
ShouldSucceed Group Ring;
_declarations_
1 $m* _:_ _forall_ [a] {Ring a} => a -> a -> a ;;
1 $mone _:_ _forall_ [a] {Group a} => a ;;
1 $mzero _:_ _forall_ [a] {Group a} => a ;;
1 class Group a where {compare :: a -> a -> PrelBase.Ordering; fromInteger :: PrelBase.Integer -> a; + :: a -> a -> a; - :: a -> a -> a; zero = :: a; one = :: a} ;
1 class {Group a} => Ring a where {* = :: a -> a -> a} ;
