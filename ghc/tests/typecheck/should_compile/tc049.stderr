==================== Typechecked ====================
AbsBinds [] [] [([], main3{-r3W,x-}, main3_aT0)]
    main3_aT0
	= [[lit_aXN] (PrelBase.Int{-3g,W-}),
	   [lit_aXM] (PrelBase.Int{-3g,W-})] ([PrelBase.Int{-3g,W-}])
	  ==_aXO [[lit_aXL] (PrelBase.Int{-3g,W-})] ([PrelBase.Int{-3g,W-}])
AbsBinds [] [] [([], main2{-r3X,x-}, main2_aTs)]
    main2_aTs = "Hello" ==_aXP "Goodbye"
AbsBinds [] [] [([], main1{-r3Y,x-}, main1_aTB)]
    main1_aTB
	= [[(lit_aXR,
	     PrelBase.True{-5E,w-}{i})] ((PrelBase.Int{-3g,W-}, PrelBase.Bool{-34,W-}))] ([(PrelBase.Int{-3g,W-}, PrelBase.Bool{-34,W-})])
	  ==_aXS [[(lit_aXQ,
		    PrelBase.False{-58,w-}{i})] ((PrelBase.Int{-3g,W-}, PrelBase.Bool{-34,W-}))] ([(PrelBase.Int{-3g,W-}, PrelBase.Bool{-34,W-})])
AbsBinds
[taUC]
[d.Eq_aUX]
[([taUC], mem3{-r40,x-}, mem3_aU9), ([taUC],
				     mem4{-r3Z,x-},
				     mem4_aUa)]
    d.Eq_aUV = PrelBase.$d28{-rb4,p-} taUC d.Eq_aUX
    ==_aXT = PrelBase.=={-8Y,p-} [taUC] d.Eq_aUV
    mem3_aU9 x_r3N PrelBase.[]{-5i,w-}{i} = PrelBase.False{-58,w-}{i}
    mem3_aU9 x_r3P (y_r3Q PrelBase.:{-55,w-}{i} ys_r3R)
	     = if [x_r3P] (taUC) ==_aXT [y_r3Q] (taUC) then
		   mem4_aUa x_r3P ys_r3R
	       else
		   PrelBase.False{-58,w-}{i}
    mem4_aUa y_r3T (x_r3U PrelBase.:{-55,w-}{i} xs_r3V)
	     = mem3_aU9 y_r3T xs_r3V
AbsBinds [] [] [([], oR1{-r42,x-}, oR1_aUZ)]
    oR1_aUZ a_r3E b_r3F
	    = if a_r3E then PrelBase.True{-5E,w-}{i} else b_r3F
AbsBinds [] [] [([], oR{-r44,x-}, oR_aVf)]
    oR_aVf a_r3v b_r3w
	   = if a_r3v then PrelBase.True{-5E,w-}{i} else b_r3w
AbsBinds
[taWj]
[d.Eq_aWm]
[([taWj], mem2{-r41,x-}, mem2_aVv), ([taWj],
				     mem1{-r43,x-},
				     mem1_aVw)]
    ==_aXV = PrelBase.=={-8Y,p-} taWj d.Eq_aWm
    ==_aXU = ==_aXV
    mem2_aVv x_r3H PrelBase.[]{-5i,w-}{i} = PrelBase.False{-58,w-}{i}
    mem2_aVv x_r3J (y_r3K PrelBase.:{-55,w-}{i} ys_r3L)
	     = (x_r3J ==_aXV y_r3K) oR{-r44,x-} (mem1_aVw x_r3J ys_r3L)
    mem1_aVw x_r3y PrelBase.[]{-5i,w-}{i} = PrelBase.False{-58,w-}{i}
    mem1_aVw x_r3A (y_r3B PrelBase.:{-55,w-}{i} ys_r3C)
	     = (x_r3A ==_aXU y_r3B) oR1{-r42,x-} (mem2_aVv x_r3A ys_r3C)
AbsBinds [taWM] [d.Eq_aWP] [([taWM], mem{-r45,x-}, mem_aWo)]
    ==_aXW = PrelBase.=={-8Y,p-} taWM d.Eq_aWP
    mem_aWo x_r3p PrelBase.[]{-5i,w-}{i} = PrelBase.False{-58,w-}{i}
    mem_aWo x_r3r (y_r3s PrelBase.:{-55,w-}{i} ys_r3t)
	    = (x_r3r ==_aXW y_r3s) oR{-r44,x-} (mem_aWo x_r3r ys_r3t)
AbsBinds
[taXc]
[d.Ord_aXg, d.Num_aXj]
[([taXc], fib{-r46,x-}, fib_aWR)]
    <=_aY5 = PrelBase.<={-rgd,p-} taXc d.Ord_aXg
    fromInt_aY4 = PrelBase.fromInt{-8R,p-} taXc d.Num_aXj
    lit_aY3 = fromInt_aY4 PrelBase.I#{-5b,w-}{i} 2#
    d.Num_aXl = d.Num_aXj
    +_aY2 = PrelBase.+{-rg6,p-} taXc d.Num_aXl
    d.Num_aXn = d.Num_aXj
    -_aY1 = PrelBase.-{-817,p-} taXc d.Num_aXn
    fromInt_aY0 = fromInt_aY4
    lit_aXZ = fromInt_aY0 PrelBase.I#{-5b,w-}{i} 1#
    -_aXY = -_aY1
    lit_aXX = lit_aY3
    fib_aWR n_r3n
	    = if n_r3n <=_aY5 lit_aY3 then
		  n_r3n
	      else
		  (fib_aWR n_r3n -_aY1 lit_aXZ) +_aY2 (fib_aWR n_r3n -_aXY lit_aXX)
d.Eq_aXw = PrelBase.$d8{-rbE,p-}
d.Eq_aXx = PrelBase.$d33{-rba,p-}
d.Eq_aXu =
    PrelTup.$d9{-rwm,p-} [PrelBase.Int{-3g,W-}, PrelBase.Bool{-34,W-}]
	[d.Eq_aXw, d.Eq_aXx]
d.Eq_aXs =
    PrelBase.$d28{-rb4,p-}
	(PrelBase.Int{-3g,W-}, PrelBase.Bool{-34,W-})
	d.Eq_aXu
d.Eq_aXq =
    PrelBase.$d28{-rb4,p-}
	[(PrelBase.Int{-3g,W-}, PrelBase.Bool{-34,W-})]
	d.Eq_aXs
==_aXS =
    PrelBase.=={-8Y,p-}
	[[(PrelBase.Int{-3g,W-}, PrelBase.Bool{-34,W-})]]
	d.Eq_aXq
lit_aXR = PrelBase.I#{-5b,w-}{i} 1#
lit_aXQ = PrelBase.I#{-5b,w-}{i} 2#
d.Eq_aXD = PrelBase.$d34{-rbb,p-}
d.Eq_aXB = PrelBase.$d28{-rb4,p-} PrelBase.Char{-38,W-} d.Eq_aXD
==_aXP = PrelBase.=={-8Y,p-} [PrelBase.Char{-38,W-}] d.Eq_aXB
d.Eq_aXK = d.Eq_aXw
d.Eq_aXI = PrelBase.$d28{-rb4,p-} PrelBase.Int{-3g,W-} d.Eq_aXK
d.Eq_aXG = PrelBase.$d28{-rb4,p-} [PrelBase.Int{-3g,W-}] d.Eq_aXI
==_aXO = PrelBase.=={-8Y,p-} [[PrelBase.Int{-3g,W-}]] d.Eq_aXG
lit_aXN = lit_aXR
lit_aXM = lit_aXQ
lit_aXL = PrelBase.I#{-5b,w-}{i} 3#

ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d1 1 $d12 1 $d15 1 $d16 1 $d2 1 $d22 1 $d27 1 $d28 1 $d3 1 $d33 1 $d34 1 $d35 1 $d38 1 $d39 1 $d4 1 $d40 1 $d42 1 $d43 1 $d45 1 $d46 1 $d47 1 $d50 1 $d51 1 $d52 1 $d55 1 $d56 1 $d7 1 $d8 1 $d9 1 $m- 1 $m/= 1 $m< 1 $m<= 1 $m> 1 $m>= 1 $mcompare 1 $mfromInt 1 $mmax 1 $mmin 1 $mshowList 1 Eq 1 Eval 1 Num 1 Ord 1 Ordering 1 Show 1 String 1;
PrelNum 1 :: $d10 1 $d16 1 $d17 1 $d18 1 $d29 1 $d33 1 $d34 1 $d35 1;
PrelTup 1 :: $d13 1 $d4 1 $d49 1 $d9 1;
_exports_
ShouldSucceed fib main1 main2 main3 mem mem1 mem2 mem3 mem4 oR oR1;
_declarations_
1 fib _:_ _forall_ [ta] {PrelBase.Ord ta, PrelBase.Num ta} => ta -> ta ;;
1 main1 _:_ PrelBase.Bool ;;
1 main2 _:_ PrelBase.Bool ;;
1 main3 _:_ PrelBase.Bool ;;
1 mem _:_ _forall_ [ta] {PrelBase.Eq ta} => ta -> [ta] -> PrelBase.Bool ;;
1 mem1 _:_ _forall_ [ta] {PrelBase.Eq ta} => ta -> [ta] -> PrelBase.Bool ;;
1 mem2 _:_ _forall_ [ta] {PrelBase.Eq ta} => ta -> [ta] -> PrelBase.Bool ;;
1 mem3 _:_ _forall_ [ta] {PrelBase.Eq ta} => ta -> [ta] -> PrelBase.Bool ;;
1 mem4 _:_ _forall_ [ta] {PrelBase.Eq ta} => ta -> [ta] -> PrelBase.Bool ;;
1 oR _:_ PrelBase.Bool -> PrelBase.Bool -> PrelBase.Bool ;;
1 oR1 _:_ PrelBase.Bool -> PrelBase.Bool -> PrelBase.Bool ;;
