

================================================================================
Typechecked:
AbsBinds [] [] [([], main3{-r3W,x-}, main3_aSS)]
    main3_aSS
	= [[lit_aXD] (PrelBase.Int{-3g,W-}),
	   [lit_aXE] (PrelBase.Int{-3g,W-})] ([PrelBase.Int{-3g,W-}])
	  ==_aXC [[lit_aXF] (PrelBase.Int{-3g,W-})] ([PrelBase.Int{-3g,W-}])
AbsBinds [] [] [([], main2{-r3X,x-}, main2_aTq)]
    main2_aTq = "Hello" ==_aXB "Goodbye"
AbsBinds [] [] [([], main1{-r3Y,x-}, main1_aTz)]
    main1_aTz
	= [[(lit_aXz,
	     PrelBase.True{-5E,w-}{i})] ((PrelBase.Int{-3g,W-}, PrelBase.Bool{-34,W-}))] ([(PrelBase.Int{-3g,W-}, PrelBase.Bool{-34,W-})])
	  ==_aXy [[(lit_aXA,
		    PrelBase.False{-58,w-}{i})] ((PrelBase.Int{-3g,W-}, PrelBase.Bool{-34,W-}))] ([(PrelBase.Int{-3g,W-}, PrelBase.Bool{-34,W-})])
AbsBinds
[taUG]
[d.Eq_aUY]
[([taUG], mem3{-r40,x-}, mem3_aUe), ([taUG],
				     mem4{-r3Z,x-},
				     mem4_aUf)]
    d.Eq_aUW = PrelBase.$d28{-rb4,p-} taUG d.Eq_aUY
    ==_aXG = PrelBase.=={-8Y,p-} [taUG] d.Eq_aUW
    mem3_aUe x_r3N PrelBase.[]{-5i,w-}{i} = PrelBase.False{-58,w-}{i}
    mem3_aUe x_r3P (y_r3Q PrelBase.:{-55,w-}{i} ys_r3R)
	     = if [x_r3P] (taUG) ==_aXG [y_r3Q] (taUG) then
		   mem4_aUf x_r3P ys_r3R
	       else
		   PrelBase.False{-58,w-}{i}
    mem4_aUf y_r3T (x_r3U PrelBase.:{-55,w-}{i} xs_r3V)
	     = mem3_aUe y_r3T xs_r3V
AbsBinds [] [] [([], oR1{-r42,x-}, oR1_aV0)]
    oR1_aV0 a_r3E b_r3F
	    = if a_r3E then PrelBase.True{-5E,w-}{i} else b_r3F
AbsBinds [] [] [([], oR{-r44,x-}, oR_aVe)]
    oR_aVe a_r3v b_r3w
	   = if a_r3v then PrelBase.True{-5E,w-}{i} else b_r3w
AbsBinds
[taWa]
[d.Eq_aWd]
[([taWa], mem2{-r41,x-}, mem2_aVs), ([taWa],
				     mem1{-r43,x-},
				     mem1_aVt)]
    ==_aXH = PrelBase.=={-8Y,p-} taWa d.Eq_aWd
    ==_aXI = ==_aXH
    mem2_aVs x_r3H PrelBase.[]{-5i,w-}{i} = PrelBase.False{-58,w-}{i}
    mem2_aVs x_r3J (y_r3K PrelBase.:{-55,w-}{i} ys_r3L)
	     = (x_r3J ==_aXH y_r3K) oR{-r44,x-} (mem1_aVt x_r3J ys_r3L)
    mem1_aVt x_r3y PrelBase.[]{-5i,w-}{i} = PrelBase.False{-58,w-}{i}
    mem1_aVt x_r3A (y_r3B PrelBase.:{-55,w-}{i} ys_r3C)
	     = (x_r3A ==_aXI y_r3B) oR1{-r42,x-} (mem2_aVs x_r3A ys_r3C)
AbsBinds [taWA] [d.Eq_aWD] [([taWA], mem{-r45,x-}, mem_aWf)]
    ==_aXJ = PrelBase.=={-8Y,p-} taWA d.Eq_aWD
    mem_aWf x_r3p PrelBase.[]{-5i,w-}{i} = PrelBase.False{-58,w-}{i}
    mem_aWf x_r3r (y_r3s PrelBase.:{-55,w-}{i} ys_r3t)
	    = (x_r3r ==_aXJ y_r3s) oR{-r44,x-} (mem_aWf x_r3r ys_r3t)
AbsBinds
[taWZ]
[d.Ord_aX3, d.Num_aX6]
[([taWZ], fib{-r46,x-}, fib_aWF)]
    <=_aXK = PrelBase.<={-rgd,p-} taWZ d.Ord_aX3
    fromInt_aXL = PrelBase.fromInt{-8R,p-} taWZ d.Num_aX6
    lit_aXM = fromInt_aXL PrelBase.I#{-5b,w-}{i} 2#
    d.Num_aX8 = d.Num_aX6
    +_aXN = PrelBase.+{-rg6,p-} taWZ d.Num_aX8
    d.Num_aXa = d.Num_aX6
    -_aXO = PrelBase.-{-817,p-} taWZ d.Num_aXa
    fromInt_aXP = fromInt_aXL
    lit_aXQ = fromInt_aXP PrelBase.I#{-5b,w-}{i} 1#
    -_aXR = -_aXO
    lit_aXS = lit_aXM
    fib_aWF n_r3n
	    = if n_r3n <=_aXK lit_aXM then
		  n_r3n
	      else
		  (fib_aWF n_r3n -_aXO lit_aXQ) +_aXN (fib_aWF n_r3n -_aXR lit_aXS)
d.Eq_aXj = PrelBase.$d8{-rbE,p-}
d.Eq_aXk = PrelBase.$d33{-rba,p-}
d.Eq_aXh =
    PrelTup.$d9{-rwm,p-} [PrelBase.Int{-3g,W-}, PrelBase.Bool{-34,W-}]
	[d.Eq_aXj, d.Eq_aXk]
d.Eq_aXf =
    PrelBase.$d28{-rb4,p-}
	(PrelBase.Int{-3g,W-}, PrelBase.Bool{-34,W-})
	d.Eq_aXh
d.Eq_aXd =
    PrelBase.$d28{-rb4,p-}
	[(PrelBase.Int{-3g,W-}, PrelBase.Bool{-34,W-})]
	d.Eq_aXf
==_aXy =
    PrelBase.=={-8Y,p-}
	[[(PrelBase.Int{-3g,W-}, PrelBase.Bool{-34,W-})]]
	d.Eq_aXd
lit_aXz = PrelBase.I#{-5b,w-}{i} 1#
lit_aXA = PrelBase.I#{-5b,w-}{i} 2#
d.Eq_aXq = PrelBase.$d34{-rbb,p-}
d.Eq_aXo = PrelBase.$d28{-rb4,p-} PrelBase.Char{-38,W-} d.Eq_aXq
==_aXB = PrelBase.=={-8Y,p-} [PrelBase.Char{-38,W-}] d.Eq_aXo
d.Eq_aXx = d.Eq_aXj
d.Eq_aXv = PrelBase.$d28{-rb4,p-} PrelBase.Int{-3g,W-} d.Eq_aXx
d.Eq_aXt = PrelBase.$d28{-rb4,p-} [PrelBase.Int{-3g,W-}] d.Eq_aXv
==_aXC = PrelBase.=={-8Y,p-} [[PrelBase.Int{-3g,W-}]] d.Eq_aXt
lit_aXD = lit_aXz
lit_aXE = lit_aXA
lit_aXF = PrelBase.I#{-5b,w-}{i} 3#
ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d1 1 $d12 1 $d15 1 $d16 1 $d2 1 $d22 1 $d27 1 $d28 1 $d3 1 $d33 1 $d34 1 $d35 1 $d38 1 $d39 1 $d4 1 $d40 1 $d42 1 $d43 1 $d45 1 $d46 1 $d47 1 $d50 1 $d51 1 $d52 1 $d55 1 $d56 1 $d7 1 $d8 1 $d9 1 $m- 1 $m/= 1 $m< 1 $m<= 1 $m> 1 $m>= 1 $mcompare 1 $mfromInt 1 $mmax 1 $mmin 1 $mshowList 1 Eq 1 Eval 1 Num 1 Ord 1 Ordering 1 Show 1 String 1;
PrelNum 1 :: $d10 1 $d16 1 $d17 1 $d18 1 $d29 1 $d33 1 $d34 1 $d35 1;
PrelTup 1 :: $d13 1 $d4 1 $d49 1 $d9 1;
_exports_
ShouldSucceed fib main1 main2 main3 mem mem1 mem2 mem3 mem4 oR oR1;
_declarations_
1 fib _:_ _forall_ [ta] {PrelBase.Ord ta, PrelBase.Num ta} => ta -> ta ;;
1 main1 _:_ PrelBase.Bool ;;
1 main2 _:_ PrelBase.Bool ;;
1 main3 _:_ PrelBase.Bool ;;
1 mem _:_ _forall_ [ta] {PrelBase.Eq ta} => ta -> [ta] -> PrelBase.Bool ;;
1 mem1 _:_ _forall_ [ta] {PrelBase.Eq ta} => ta -> [ta] -> PrelBase.Bool ;;
1 mem2 _:_ _forall_ [ta] {PrelBase.Eq ta} => ta -> [ta] -> PrelBase.Bool ;;
1 mem3 _:_ _forall_ [ta] {PrelBase.Eq ta} => ta -> [ta] -> PrelBase.Bool ;;
1 mem4 _:_ _forall_ [ta] {PrelBase.Eq ta} => ta -> [ta] -> PrelBase.Bool ;;
1 oR _:_ PrelBase.Bool -> PrelBase.Bool -> PrelBase.Bool ;;
1 oR1 _:_ PrelBase.Bool -> PrelBase.Bool -> PrelBase.Bool ;;
