

================================================================================
Typechecked:
AbsBinds
[taCQ, taCN]
[d.Ord2_aCV, d.Num_aCY]
[([taCQ, taCN], f{-r3M,x-}, f_aCx)]
    d.Eq2_aCU = scsel_Ord2ShouldSucceedEq2{-aDW,x-} taCN d.Ord2_aCV
    d.Eq2_aCS = $d1{-rDT,x-} taCN [d.Eq2_aCU, d.Ord2_aCV]
    doubleeq_aDX = doubleeq{-r3N,x-} [taCN] d.Eq2_aCS
    fromInt_aDY = PrelBase.fromInt{-8R,p-} taCN d.Num_aCY
    lit_aDZ = fromInt_aDY PrelBase.I#{-5b,w-}{i} 1#
    f_aCx x_r3h y_r3i = doubleeq_aDX x_r3h [lit_aDZ] (taCN)
AbsBinds
[taDc]
[d.Eq2_aDf, d.Ord2_aDg]
[([taDc], $d1{-rDT,x-}, d.Eq2_aD5)]
    AbsBinds [] [] [([], doubleeq_aE0, doubleeq_aD9)]
	doubleeq_aD9 xs_r3q ys_r3r = PrelBase.True{-5E,w-}{i}
    d.Eq2_aD5 = ({-dict-} [] [doubleeq_aE0])
AbsBinds [] [] [([], $d2{-rDU,x-}, d.Ord2_aDo)]
    d.Eq2_aDt = $d3{-rDV,x-}
    AbsBinds [] [] [([], lt_aE1, lt_aDs)]
	lt_aDs x_r3x y_r3y = PrelBase.True{-5E,w-}{i}
    d.Ord2_aDo = ({-dict-} [d.Eq2_aDt] [lt_aE1])
AbsBinds [] [] [([], $d3{-rDV,x-}, d.Eq2_aDD)]
    AbsBinds [] [] [([], doubleeq_aE2, doubleeq_aDH)]
	doubleeq_aDH x_r3E y_r3F = PrelBase.True{-5E,w-}{i}
    d.Eq2_aDD = ({-dict-} [] [doubleeq_aE2])
scsel_Ord2ShouldSucceedEq2{-aDW,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case tpl_B1 of { PrelTup.(,){-62,w-}{i} tpl_B1 tpl_B2  -> tpl_B1;}
lt{-r3O,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case tpl_B1 of { PrelTup.(,){-62,w-}{i} tpl_B1 tpl_B2  -> tpl_B2;}
AbsBinds [taDR] [d.Ord2_aDN] []
doubleeq{-r3N,x-} = _/\_ t12 -> \ tpl_B1 -> tpl_B1
AbsBinds [taDS] [d.Eq2_aDQ] []
ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d1 1 $d12 1 $d16 1 $d2 1 $d22 1 $d28 1 $d3 1 $d33 1 $d34 1 $d38 1 $d39 1 $d4 1 $d40 1 $d42 1 $d43 1 $d45 1 $d47 1 $d55 1 $d8 1 $d9 1 $m- 1 $m/= 1 $mfromInt 1 $mshowList 1 Eq 1 Eval 1 Num 1 Show 1 String 1;
PrelNum 1 :: $d10 1 $d16 1 $d18 1 $d29 1 $d33 1 $d35 1;
_exports_
ShouldSucceed f Eq2(doubleeq) Ord2(lt);
_instances_
instance _forall_ [a] {Eq2 a, Ord2 a} => {Eq2 [a]} = $d1;
instance {Ord2 PrelBase.Int} = $d2;
instance {Eq2 PrelBase.Int} = $d3;
_declarations_
1 $d1 _:_ _forall_ [a] {Eq2 a, Ord2 a} => {Eq2 [a]} ;;
1 $d2 _:_ {Ord2 PrelBase.Int} ;;
1 $d3 _:_ {Eq2 PrelBase.Int} ;;
1 class Eq2 a where {doubleeq :: a -> a -> PrelBase.Bool} ;
1 class {Eq2 a} => Ord2 a where {lt :: a -> a -> PrelBase.Bool} ;
1 f _:_ _forall_ [ta tb] {Ord2 tb, PrelBase.Num tb} => [tb] -> ta -> PrelBase.Bool ;;
