==================== Typechecked ====================
AbsBinds
[taD1, taCY]
[d.Ord2_aD6, d.Num_aD9]
[([taD1, taCY], f{-r3M,x-}, f_aCF)]
    d.Eq2_aD5 = scsel_Ord2ShouldSucceedEq2{-aE7,x-} taCY d.Ord2_aD6
    d.Eq2_aD3 = $d1{-rEa,x-} taCY [d.Eq2_aD5, d.Ord2_aD6]
    doubleeq_aE6 = doubleeq{-r3O,x-} [taCY] d.Eq2_aD3
    fromInt_aE5 = PrelBase.fromInt{-8R,p-} taCY d.Num_aD9
    lit_aE4 = fromInt_aE5 PrelBase.I#{-5b,w-}{i} 1#
    f_aCF x_r3h y_r3i = doubleeq_aE6 x_r3h [lit_aE4] (taCY)
AbsBinds
[taDn]
[d.Eq2_aDq, d.Ord2_aDr]
[([taDn], $d1{-rEa,x-}, d.Eq2_aDg)]
    AbsBinds [] [] [([], doubleeq_aEb, doubleeq_aDk)]
	doubleeq_aDk xs_r3q ys_r3r = PrelBase.True{-5E,w-}{i}
    d.Eq2_aDg = ({-dict-} [] [doubleeq_aEb])
AbsBinds [] [] [([], $d2{-rE9,x-}, d.Ord2_aDz)]
    d.Eq2_aDE = $d3{-rE8,x-}
    AbsBinds [] [] [([], lt_aEc, lt_aDD)]
	lt_aDD x_r3x y_r3y = PrelBase.True{-5E,w-}{i}
    d.Ord2_aDz = ({-dict-} [d.Eq2_aDE] [lt_aEc])
AbsBinds [] [] [([], $d3{-rE8,x-}, d.Eq2_aDO)]
    AbsBinds [] [] [([], doubleeq_aEd, doubleeq_aDS)]
	doubleeq_aDS x_r3E y_r3F = PrelBase.True{-5E,w-}{i}
    d.Eq2_aDO = ({-dict-} [] [doubleeq_aEd])
scsel_Ord2ShouldSucceedEq2{-aE7,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case tpl_B1 of { PrelTup.(,){-62,w-}{i} tpl_B1 tpl_B2  -> tpl_B1;}
lt{-r3N,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case tpl_B1 of { PrelTup.(,){-62,w-}{i} tpl_B1 tpl_B2  -> tpl_B2;}
AbsBinds [taE2] [d.Ord2_aDY] []
doubleeq{-r3O,x-} = _/\_ t12 -> \ tpl_B1 -> tpl_B1
AbsBinds [taE3] [d.Eq2_aE1] []

ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d1 1 $d12 1 $d16 1 $d2 1 $d22 1 $d28 1 $d3 1 $d33 1 $d34 1 $d38 1 $d39 1 $d4 1 $d40 1 $d42 1 $d43 1 $d45 1 $d47 1 $d55 1 $d8 1 $d9 1 $m- 1 $m/= 1 $mfromInt 1 $mshowList 1 Eq 1 Eval 1 Num 1 Show 1 String 1;
PrelNum 1 :: $d10 1 $d16 1 $d18 1 $d29 1 $d33 1 $d35 1;
_exports_
ShouldSucceed f Eq2(doubleeq) Ord2(lt);
_instances_
instance _forall_ [a] {Eq2 a, Ord2 a} => {Eq2 [a]} = $d1;
instance {Ord2 PrelBase.Int} = $d2;
instance {Eq2 PrelBase.Int} = $d3;
_declarations_
1 $d1 _:_ _forall_ [a] {Eq2 a, Ord2 a} => {Eq2 [a]} ;;
1 $d2 _:_ {Ord2 PrelBase.Int} ;;
1 $d3 _:_ {Eq2 PrelBase.Int} ;;
1 class Eq2 a where {doubleeq :: a -> a -> PrelBase.Bool} ;
1 class {Eq2 a} => Ord2 a where {lt :: a -> a -> PrelBase.Bool} ;
1 f _:_ _forall_ [ta tb] {Ord2 tb, PrelBase.Num tb} => [tb] -> ta -> PrelBase.Bool ;;
