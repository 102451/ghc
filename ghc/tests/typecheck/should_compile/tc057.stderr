

================================================================================
Typechecked:
AbsBinds [] [] [([], dand{-r3j,x-}, dand_aCq)]
    dand_aCq PrelBase.True{-5E,w-}{i} PrelBase.True{-5E,w-}{i}
	     = PrelBase.True{-5E,w-}{i}
    dand_aCq x_r3m y_r3n = PrelBase.False{-58,w-}{i}
AbsBinds [taCI] [d.Eq'_aCY] [([taCI], f{-r3i,x-}, f_aCF)]
    d.Eq'_aD0 = d.Eq'_aCY
    deq_aE1 = deq{-r3M,x-} taCI d.Eq'_aD0
    f_aCF p_r3p q_r3q
	  = dand{-r3j,x-} deq_aE1 p_r3p q_r3q
			  deq_aDZ [lit_aE0] (PrelBase.Int{-3g,W-})
				  [PrelBase.I#{-5b,w-}{i} 2#] (PrelBase.Int{-3g,W-})
AbsBinds [taDj] [d.Eq'_aDv] [([taDj], $d1{-rDX,x-}, d.Eq'_aD8)]
    d.Eq'_aDz = d.Eq'_aDv
    f_aE2 = f{-r3i,x-} taDj d.Eq'_aDz
    d.Eq'_aDB = d.Eq'_aD8
    f_aE3 = f{-r3i,x-} [taDj] d.Eq'_aDB
    AbsBinds [] [] [([], deq_aE4, deq_aDc)]
	deq_aDc (a_r3y PrelBase.:{-55,w-}{i} as_r3z)
		(b_r3A PrelBase.:{-55,w-}{i} bs_r3B)
		= dand{-r3j,x-} f_aE2 a_r3y b_r3A f_aE3 as_r3z bs_r3B
    d.Eq'_aD8 = ({-dict-} [] [deq_aE4])
AbsBinds [] [] [([], $d2{-rDY,x-}, d.Eq'_aDH)]
    AbsBinds [] [] [([], deq_aE5, deq_aDL)]
	deq_aDL x_r3H y_r3I = PrelBase.True{-5E,w-}{i}
    d.Eq'_aDH = ({-dict-} [] [deq_aE5])
deq{-r3M,x-} = _/\_ t12 -> \ tpl_B1 -> tpl_B1
AbsBinds [taDW] [d.Eq'_aDR] []
d.Eq'_aDV = $d2{-rDY,x-}
d.Eq'_aDT = $d1{-rDX,x-} PrelBase.Int{-3g,W-} d.Eq'_aDV
deq_aDZ = deq{-r3M,x-} [PrelBase.Int{-3g,W-}] d.Eq'_aDT
lit_aE0 = PrelBase.I#{-5b,w-}{i} 1#

NOTE: Simplifier still going after 4 iterations; bailing out.
ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d1 1 $d12 1 $d16 1 $d2 1 $d22 1 $d28 1 $d3 1 $d33 1 $d34 1 $d38 1 $d39 1 $d4 1 $d40 1 $d42 1 $d43 1 $d45 1 $d47 1 $d55 1 $d8 1 $d9 1 $m- 1 $m/= 1 $mfromInt 1 $mshowList 1 Eq 1 Eval 1 Num 1 Show 1 String 1;
PrelNum 1 :: $d10 1 $d16 1 $d18 1 $d29 1 $d33 1 $d35 1;
_exports_
ShouldSucceed dand f Eq'(deq);
_instances_
instance _forall_ [a] {Eq' a} => {Eq' [a]} = $d1;
instance {Eq' PrelBase.Int} = $d2;
_declarations_
1 $d1 _:_ _forall_ [a] {Eq' a} => {Eq' [a]} ;;
1 $d2 _:_ {Eq' PrelBase.Int} ;;
1 class Eq' a where {deq :: a -> a -> PrelBase.Bool} ;
1 dand _:_ PrelBase.Bool -> PrelBase.Bool -> PrelBase.Bool ;;
1 f _:_ _forall_ [ta] {Eq' ta} => ta -> ta -> PrelBase.Bool ;;
