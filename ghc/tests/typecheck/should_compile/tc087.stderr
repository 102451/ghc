ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1 302
_instance_modules_
IO PrelAddr PrelArr PrelBounded PrelCCall PrelForeign PrelNum
_usages_
PrelBase 1 :: $dEnum0 1 $dEnumBool0 1 $dEnumChar0 1 $dEnumInt0 1 $dEnumOrdering0 1 $dEq0 1 $dEq1 1 $dEqBool0 1 $dEqChar0 1 $dEqInt0 1 $dEqOrdering0 1 $dEval0 1 $dEval1 1 $dEval2 1 $dEvalBool0 1 $dEvalChar0 1 $dEvalDouble0 1 $dEvalInt0 1 $dEvalInteger0 1 $dEvalOrdering0 1 $dMonad0 1 $dMonadZero0 1 $dNumInt0 1 $dOrd0 1 $dOrd1 1 $dOrdBool0 1 $dOrdChar0 1 $dOrdInt0 1 $dOrdOrdering0 1 $dShow0 1 $dShow1 1 $dShow2 1 $dShowBool0 1 $dShowChar0 1 $dShowInt0 1 $dShowOrdering0 1 $m- 1 $m/= 1 $m< 1 $m<= 1 $m> 1 $m>= 1 $m>> 1 $mcompare 1 $menumFromThenTo 1 $menumFromTo 1 $mfromInt 1 $mmax 1 $mmin 1 $mshowList 1 otherwise 1 Enum 1 Eq 1 Eval 1 Monad 1 MonadZero 1 Num 1 Ord 1 Ordering 1 Show 1 String 1;
PrelIO 1 :: putStr 1;
PrelIOBase 1 :: $dEvalIO0 1 $dMonadIO0 1 $dShowIO0 1 IO 1;
PrelList 1 :: sum 1;
PrelNum 1 :: $dEnumDouble0 1 $dEnumInteger0 1 $dEnumRatio0 1 $dEqDouble0 1 $dEqInteger0 1 $dEqRatio0 1 $dEvalRatio0 1 $dFractionalDouble0 1 $dFractionalRatio0 1 $dIntegralInt0 1 $dIntegralInteger0 1 $dNumDouble0 1 $dNumInteger0 1 $dNumRatio0 1 $dOrdDouble0 1 $dOrdInteger0 1 $dOrdRatio0 1 $dRealDouble0 1 $dRealInt0 1 $dRealInteger0 1 $dRealRatio0 1 $dShowDouble0 1 $dShowInteger0 1 $dShowRatio0 1 $mdiv 1 $mdivMod 1 $mmod 1 $mquot 1 $mrecip 1 $mrem 1 Fractional 1 Integral 1 Ratio 1 Rational 1 Real 1;
PrelTup 1 :: $dEq0 1 $dEval0 1 $dOrd0 1 $dShow3 1;
_exports_
ShouldSucceed check insertMany out pqSort toOrderedList PriorityQueue(:PriorityQueue :PriorityQueue splitMin meld insert single empty) SeqView(Null Cons);
_instances_
instance _forall_ [a :: (* -> *) b] => {PrelBase.Eval (SeqView a b)} = $dEvalSeqView0;
_declarations_
1 $dEvalSeqView0 _:_ _forall_ [a :: (* -> *) b] => {PrelBase.Eval (SeqView a b)} ;;
1 $minsert _:_ _forall_ [a :: (* -> *)] {PriorityQueue a} => _forall_ [b] {PrelBase.Ord b} => b -> a b -> a b ;;
1 check _:_ _forall_ [a :: (* -> *)] {PriorityQueue a} => (_forall_ [b] {PrelBase.Ord b} => a b) -> PrelIOBase.IO PrelBase.() ;;
1 class PriorityQueue q :: (* -> *) where {splitMin :: _forall_ [a] {PrelBase.Ord a} => q a -> SeqView q a; meld :: _forall_ [a] {PrelBase.Ord a} => q a -> q a -> q a; insert = :: _forall_ [a] {PrelBase.Ord a} => a -> q a -> q a; single :: _forall_ [a] {PrelBase.Ord a} => a -> q a; empty :: _forall_ [a] {PrelBase.Ord a} => q a} ;
1 data SeqView t :: (* -> *) a = Null |  Cons a (t a) ;
1 insertMany _:_ _forall_ [a b :: (* -> *)] {PriorityQueue b, PrelBase.Ord a} => [a] -> b a -> b a ;;
1 out _:_ _forall_ [a] {PrelBase.Num a} => [a] -> PrelIOBase.IO PrelBase.() ;;
1 pqSort _:_ _forall_ [a :: (* -> *) b] {PrelBase.Ord b, PriorityQueue a} => a b -> [b] -> [b] ;;
1 toOrderedList _:_ _forall_ [a :: (* -> *) b] {PriorityQueue a, PrelBase.Ord b} => a b -> [b] ;;
