==================== Typechecked ====================
Null{-rf,x-}{i} =
    _/\_ t_ar59 a_tr5a -> Null{-rf,x-}{i} {_@_ t_ar59 _@_ a_tr5a}
Cons{-re,x-}{i} =
    _/\_ t_ar59 a_tr5a -> \ tpl_B1 tpl_B2 ->
	Cons{-re,x-}{i} {_@_ t_ar59 _@_ a_tr5a tpl_B1 tpl_B2}
AbsBinds [ta13Q] [d.Num_a141] [([ta13Q], out{-r4v,x-}, out_a13N)]
    d.Eq_a143 = PrelBase.scsel_NumPrelBaseEq{-a19j,p-} ta13Q d.Num_a141
    ==_a18Z = PrelBase.=={-8Y,p-} ta13Q d.Eq_a143
    d.Num_a145 = d.Num_a141
    sum_a18Y = PrelList.sum{-ro0,p-} ta13Q d.Num_a145
    d.Num_a148 = d.Num_a141
    fromInt_a18X = PrelBase.fromInt{-8R,p-} ta13Q d.Num_a148
    lit_a18W = fromInt_a18X PrelBase.I#{-5b,w-}{i} 0#
    out_a13N x_r4O
	     | (sum_a18Y x_r4O) ==_a18Z lit_a18W = PrelIO.putStr{-riO,p-} "ok\n"
	     | PrelBase.otherwise{-818,p-} = PrelIO.putStr{-riO,p-} "ok\n"
out_a19i = out{-r4v,x-} PrelBase.Int{-3g,W-} d.Num_a18w
out_a19h = out{-r4v,x-} PrelBase.Double{-3a,W-} d.Num_a18x
AbsBinds
[ta14z, aa14A]
[d.PriorityQueue_a14E, d.Ord_a14G]
[([ta14z, aa14A], insertMany{-r4x,x-}, insertMany_a14b)]
    insert_a14B = insert{-r5d,x-} aa14A d.PriorityQueue_a14E
    insert_a19k = insert_a14B ta14z d.Ord_a14G
    insertMany_a14b x_r4G q_r4H
		    = PrelBase.foldr{-89,w-} [ta14z, aa14A ta14z] insert_a19k
								  q_r4H
								  x_r4G
AbsBinds
[aa15e, ta15g]
[d.PriorityQueue_a15j, d.Ord_a15l]
[([aa15e, ta15g], toOrderedList{-r4y,x-}, toOrderedList_a14I)]
    splitMin_a15h = splitMin{-r5b,x-} aa15e d.PriorityQueue_a15j
    splitMin_a19l = splitMin_a15h ta15g d.Ord_a15l
    toOrderedList_a14I q_r4A
		       = case splitMin_a19l q_r4A of
			   Null{-rf,x-}{i} -> PrelBase.[]{-5i,w-}{i} ta15g
			   (Cons{-re,x-}{i} a_r4D q_r4E)
			   -> PrelBase.:{-55,w-}{i} ta15g a_r4D (toOrderedList_a14I q_r4E)
AbsBinds
[aa15J, ta15K]
[d.PriorityQueue_a15N, d.Ord_a15O]
[([aa15J, ta15K], pqSort{-r4w,x-}, pqSort_a15n)]
    toOrderedList_a19n =
	toOrderedList{-r4y,x-} [aa15J, ta15K]
	    [d.PriorityQueue_a15N, d.Ord_a15O]
    d.PriorityQueue_a15Q = d.PriorityQueue_a15N
    d.Ord_a15R = d.Ord_a15O
    insertMany_a19m =
	insertMany{-r4x,x-} [ta15K, aa15J]
	    [d.PriorityQueue_a15Q, d.Ord_a15R]
    pqSort_a15n q_r4J x_r4K
		= toOrderedList_a19n insertMany_a19m x_r4K q_r4J
AbsBinds
[aa164]
[d.PriorityQueue_a16P]
[([aa164], check{-r4u,x-}, check_a160)]
    d.PriorityQueue_a17m = d.PriorityQueue_a16P
    d.Ord_a17n = PrelBase.$d7{-rcM,p-}
    pqSort_a19p =
	pqSort{-r4w,x-} [aa164, PrelBase.Int{-3g,W-}]
	    [d.PriorityQueue_a17m, d.Ord_a17n]
    d.Ord_a16Q = d.Ord_a17n
    d.PriorityQueue_a17u = d.PriorityQueue_a16P
    d.Ord_a17v = PrelNum.$d17{-rwV,p-}
    pqSort_a19o =
	pqSort{-r4w,x-} [aa164, PrelBase.Double{-3a,W-}]
	    [d.PriorityQueue_a17u, d.Ord_a17v]
    d.Ord_a16R = d.Ord_a17v
    check_a160 empty_r4M
	       = do
		   PrelIO.putStr{-riO,p-} "*** sorting\n"
		   out_a19i pqSort_a19p empty_a19r
					[(enumFromTo_a199) lit_a19b .. lit_a19a]
		   out_a19h pqSort_a19o empty_a19q
					[(enumFromThenTo_a192) lit_a197, lit_a195 .. lit_a193]
	       where
		   {- nonrec -}
		   empty_a19r = empty_r4M PrelBase.Int{-3g,W-} d.Ord_a16Q
		   empty_a19q = empty_r4M PrelBase.Double{-3a,W-} d.Ord_a16R
		   {- nonrec -}
AbsBinds
[aa18R, ta18S]
[]
[([aa18R, ta18S], $d1{-r19g,x-}, d.Eval_a17O)]
    d.Eval_a17O = ({-dict-} [] [])
empty{-r5f,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case
	    tpl_B1
	of {
	PrelTup.(,,,,){-65,w-}{i} tpl_B1 tpl_B2 tpl_B3 tpl_B4 tpl_B5  ->
	tpl_B1;}
single{-r5e,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case
	    tpl_B1
	of {
	PrelTup.(,,,,){-65,w-}{i} tpl_B1 tpl_B2 tpl_B3 tpl_B4 tpl_B5  ->
	tpl_B2;}
insert{-r5d,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case
	    tpl_B1
	of {
	PrelTup.(,,,,){-65,w-}{i} tpl_B1 tpl_B2 tpl_B3 tpl_B4 tpl_B5  ->
	tpl_B3;}
meld{-r5c,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case
	    tpl_B1
	of {
	PrelTup.(,,,,){-65,w-}{i} tpl_B1 tpl_B2 tpl_B3 tpl_B4 tpl_B5  ->
	tpl_B4;}
splitMin{-r5b,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case
	    tpl_B1
	of {
	PrelTup.(,,,,){-65,w-}{i} tpl_B1 tpl_B2 tpl_B3 tpl_B4 tpl_B5  ->
	tpl_B5;}
AbsBinds
[aa17W]
[d.PriorityQueue_a18r]
[([aa17W], $minsert{-r19c,x-}, insert_a19s)]
    d.PriorityQueue_a18t = d.PriorityQueue_a18r
    meld_a18i = meld{-r5c,x-} aa17W d.PriorityQueue_a18t
    d.PriorityQueue_a18v = d.PriorityQueue_a18r
    single_a18h = single{-r5e,x-} aa17W d.PriorityQueue_a18v
    AbsBinds [ta17Z] [d.Ord_a18l] [([ta17Z], insert_a19s, insert_a17U)]
	d.Ord_a18n = d.Ord_a18l
	meld_a19u = meld_a18i ta17Z d.Ord_a18n
	d.Ord_a18p = d.Ord_a18l
	single_a19t = single_a18h ta17Z d.Ord_a18p
	insert_a17U a_r56 q_r57 = (single_a19t a_r56) meld_a19u q_r57
d.Num_a18w = PrelBase.$d4{-rcq,p-}
lit_a19b = PrelBase.I#{-5b,w-}{i} 1#
lit_a19a = PrelBase.I#{-5b,w-}{i} 99#
d.Enum_a18A = PrelBase.$d6{-rcL,p-}
enumFromTo_a199 =
    PrelBase.enumFromTo{-8W,p-} PrelBase.Int{-3g,W-} d.Enum_a18A
d.Num_a18x = PrelNum.$d16{-rwU,p-}
d.Fractional_a18F = PrelNum.$d14{-rwS,p-}
fromRational_a198 =
    PrelNum.fromRational{-8T,p-} PrelBase.Double{-3a,W-}
	d.Fractional_a18F
lit_a197 = fromRational_a198 1.0
fromRational_a196 = fromRational_a198
lit_a195 = fromRational_a196 1.1
fromRational_a194 = fromRational_a198
lit_a193 = fromRational_a194 99.9
d.Enum_a18K = PrelNum.$d8{-rxr,p-}
enumFromThenTo_a192 =
    PrelBase.enumFromThenTo{-8X,p-} PrelBase.Double{-3a,W-} d.Enum_a18K
d.Monad_a18N = IOBase.$d3{-rm9,p-}
>>=_a191 = PrelBase.>>={-811,p-} IOBase.IO{-3e,p-} d.Monad_a18N
d.Monad_a18Q = d.Monad_a18N
return_a190 =
    PrelBase.return{-816,p-} IOBase.IO{-3e,p-} d.Monad_a18Q

ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
IOBase 1 :: $d2 1 $d3 1 $d7 1 IO 1;
PrelBase 1 :: $d1 1 $d11 1 $d12 1 $d14 1 $d15 1 $d16 1 $d2 1 $d22 1 $d24 1 $d25 1 $d27 1 $d28 1 $d3 1 $d31 1 $d32 1 $d33 1 $d34 1 $d35 1 $d38 1 $d39 1 $d4 1 $d40 1 $d42 1 $d43 1 $d45 1 $d46 1 $d47 1 $d50 1 $d51 1 $d52 1 $d55 1 $d56 1 $d6 1 $d7 1 $d8 1 $d9 1 $m- 1 $m/= 1 $m< 1 $m<= 1 $m> 1 $m>= 1 $m>> 1 $mcompare 1 $menumFromThenTo 1 $menumFromTo 1 $mfromInt 1 $mmax 1 $mmin 1 $mshowList 1 otherwise 1 Enum 1 Eq 1 Eval 1 Monad 1 MonadZero 1 Num 1 Ord 1 Ordering 1 Show 1 String 1;
PrelIO 1 :: putStr 1;
PrelList 1 :: sum 1;
PrelNum 1 :: $d1 1 $d10 1 $d14 1 $d15 1 $d16 1 $d17 1 $d18 1 $d2 1 $d29 1 $d30 1 $d31 1 $d32 1 $d33 1 $d34 1 $d35 1 $d36 1 $d37 1 $d38 1 $d39 1 $d4 1 $d5 1 $d6 1 $d7 1 $d8 1 $mdiv 1 $mdivMod 1 $mmod 1 $mquot 1 $mrecip 1 $mrem 1 Fractional 1 Integral 1 Ratio 1 Rational 1 Real 1;
PrelTup 1 :: $d13 1 $d4 1 $d49 1 $d9 1;
_exports_
ShouldSucceed check insertMany out pqSort toOrderedList PriorityQueue(empty single insert meld splitMin) SeqView(Null Cons);
_instances_
instance _forall_ [t :: (* -> *) a] => {PrelBase.Eval (SeqView t a)} = $d1;
_declarations_
1 $d1 _:_ _forall_ [t :: (* -> *) a] => {PrelBase.Eval (SeqView t a)} ;;
1 $minsert _:_ _forall_ [q :: (* -> *)] {PriorityQueue q} => _forall_ [a] {PrelBase.Ord a} => a -> q a -> q a ;;
1 class PriorityQueue q :: (* -> *) where {empty :: _forall_ [a] {PrelBase.Ord a} => q a; single :: _forall_ [a] {PrelBase.Ord a} => a -> q a; insert = :: _forall_ [a] {PrelBase.Ord a} => a -> q a -> q a; meld :: _forall_ [a] {PrelBase.Ord a} => q a -> q a -> q a; splitMin :: _forall_ [a] {PrelBase.Ord a} => q a -> SeqView q a} ;
1 data SeqView t :: (* -> *) a = Null |  Cons a (t a) ;
1 check _:_ _forall_ [aa :: (* -> *)] {PriorityQueue aa} => (_forall_ [tb] {PrelBase.Ord tb} => aa tb) -> IOBase.IO PrelBase.() ;;
1 insertMany _:_ _forall_ [ta ab :: (* -> *)] {PriorityQueue ab, PrelBase.Ord ta} => [ta] -> ab ta -> ab ta ;;
1 out _:_ _forall_ [ta] {PrelBase.Num ta} => [ta] -> IOBase.IO PrelBase.() ;;
1 pqSort _:_ _forall_ [aa :: (* -> *) tb] {PriorityQueue aa, PrelBase.Ord tb} => aa tb -> [tb] -> [tb] ;;
1 toOrderedList _:_ _forall_ [aa :: (* -> *) tb] {PriorityQueue aa, PrelBase.Ord tb} => aa tb -> [tb] ;;
