

================================================================================
Typechecked:
AbsBinds
[]
[]
[([], al{-r3i,x-}, al_aS2), ([], am{-r3h,x-}, am_aS3)]
    lit_aTo = lit_aTp
    (al_aS2 PrelBase.:{-55,w-}{i} am_aS3)
	= [y_r3e +_aTr lit_aTo |
	       (y_r3e, z_r3f) <- [(lit_aTp,
				   lit_aTq)] ((PrelBase.Int{-3g,W-}, PrelBase.Int{-3g,W-}))]
lit_aTp = PrelBase.I#{-5b,w-}{i} 1#
lit_aTq = PrelBase.I#{-5b,w-}{i} 2#
d.Num_aTe = PrelBase.$d4{-rat,p-}
+_aTr = PrelBase.+{-r3g,p-} PrelBase.Int{-3g,W-} d.Num_aTe
d.Monad_aTh = PrelBase.$d25{-rad,p-}
>>=_aTs = PrelBase.>>={-811,p-} PrelBase.[]{-3j,W-} d.Monad_aTh
d.Monad_aTk = d.Monad_aTh
return_aTt =
    PrelBase.return{-816,p-} PrelBase.[]{-3j,W-} d.Monad_aTk
ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d1 1 $d12 1 $d16 1 $d2 1 $d22 1 $d24 1 $d25 1 $d28 1 $d3 1 $d33 1 $d34 1 $d38 1 $d39 1 $d4 1 $d40 1 $d42 1 $d43 1 $d45 1 $d47 1 $d55 1 $d8 1 $d9 1 $m- 1 $m/= 1 $m>> 1 $mfromInt 1 $mshowList 1 Eq 1 Eval 1 Monad 1 MonadZero 1 Num 1 Show 1 String 1;
PrelNum 1 :: $d10 1 $d16 1 $d18 1 $d29 1 $d33 1 $d35 1;
PrelTup 1 :: $d13 1 $d4 1 $d9 1;
_exports_
ShouldSucceed al am;
_declarations_
1 al _:_ PrelBase.Int ;;
1 am _:_ [PrelBase.Int] ;;
