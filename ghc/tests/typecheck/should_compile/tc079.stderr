==================== Typechecked ====================
AbsBinds [taCa] [d.Foo_aCy] [([taCa], $d1{-rDY,x-}, d.Foo_aC0)]
    d.Foo_aCA = d.Foo_aC0
    $mop1_aE2 = $mop1{-rC3,x-} [taCa] d.Foo_aCA
    d.Foo_aCC = d.Foo_aC0
    $mop2_aE1 = $mop2{-rC7,x-} [taCa] d.Foo_aCC
    AbsBinds [] [] [([], op1_aE0, op1_aC6)]
	op1_aC6 = $mop1_aE2
    AbsBinds [taCs] [d.Ord_aCv] [([taCs], op2_aDZ, op2_aCj)]
	d.Ord_aCx = d.Ord_aCv
	$mop2_aE6 = $mop2_aE1 taCs d.Ord_aCx
	op2_aCj = $mop2_aE6
    d.Foo_aC0 = ({-dict-} [] [op1_aE0, op2_aDZ])
AbsBinds [] [] [([], $d2{-rE5,x-}, d.Foo_aCI)]
    AbsBinds [] [] [([], op1_aE8, op1_aCN)]
	op1_aCN = $mop1_aE4
    AbsBinds [taD8] [d.Ord_aDb] [([taD8], op2_aE7, op2_aCZ)]
	d.Ord_aDf = d.Ord_aDb
	$mop2_aE9 = $mop2_aE3 taD8 d.Ord_aDf
	op2_aCZ = $mop2_aE9
    d.Foo_aCI = ({-dict-} [] [op1_aE8, op2_aE7])
op1{-r3D,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case tpl_B1 of { PrelTup.(,){-62,w-}{i} tpl_B1 tpl_B2  -> tpl_B1;}
op2{-r3C,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case tpl_B1 of { PrelTup.(,){-62,w-}{i} tpl_B1 tpl_B2  -> tpl_B2;}
AbsBinds
[taDq]
[d.Foo_aDQ]
[([taDq], $mop1{-rC3,x-}, op1_aEa), ([taDq],
				     $mop2{-rC7,x-},
				     op2_aEb)]
    d.Foo_aDS = d.Foo_aDQ
    op1_aEc = op1{-r3D,x-} taDq d.Foo_aDS
    AbsBinds [] [] [([], op1_aEa, op1_aDn)]
	op1_aDn x_r3u = PrelBase.True{-5E,w-}{i}
    AbsBinds [taDC] [d.Ord_aDM] [([taDC], op2_aEb, op2_aDw)]
	d.Ord_aDO = d.Ord_aDM
	<_aEd = PrelBase.<{-rfI,p-} taDC d.Ord_aDO
	op2_aDw x_r3y y_r3z z_r3A
		= if (op1_aEc x_r3y) PrelBase.&&{-r3B,p-} (y_r3z <_aEd z_r3A) then
		      y_r3z
		  else
		      z_r3A
d.Foo_aDU = $d2{-rE5,x-}
$mop1_aE4 = $mop1{-rC3,x-} PrelBase.Int{-3g,W-} d.Foo_aDU
d.Foo_aDX = d.Foo_aDU
$mop2_aE3 = $mop2{-rC7,x-} PrelBase.Int{-3g,W-} d.Foo_aDX

ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d15 1 $d16 1 $d27 1 $d28 1 $d33 1 $d35 1 $d50 1 $d52 1 $d7 1 $d8 1 $m/= 1 $m< 1 $m<= 1 $m> 1 $m>= 1 $mcompare 1 $mmax 1 $mmin 1 && 1 Eq 1 Ord 1 Ordering 1;
PrelNum 1 :: $d17 1 $d18 1;
_exports_
ShouldSucceed Foo(op1 op2);
_instances_
instance _forall_ [a] {Foo a} => {Foo [a]} = $d1;
instance {Foo PrelBase.Int} = $d2;
_declarations_
1 $d1 _:_ _forall_ [a] {Foo a} => {Foo [a]} ;;
1 $d2 _:_ {Foo PrelBase.Int} ;;
1 $mop1 _:_ _forall_ [a] {Foo a} => a -> PrelBase.Bool ;;
1 $mop2 _:_ _forall_ [a] {Foo a} => _forall_ [b] {PrelBase.Ord b} => a -> b -> b -> b ;;
1 class Foo a where {op1 = :: a -> PrelBase.Bool; op2 = :: _forall_ [b] {PrelBase.Ord b} => a -> b -> b -> b} ;
