==================== Typechecked ====================
AbsBinds [tarE] [] [([tarE], f{-r3p,x-}, f_arp)]
    d.Normal_arG = $d1{-rs3,x-} [GHC.Void{-3T,W-}, GHC.Void{-3T,W-}]
    normal_as2 =
	normal{-r3q,x-} (GHC.Void{-3T,W-} -> GHC.Void{-3T,W-}) d.Normal_arG
    f_arp x_r3f = normal_as2 PrelBase.id{-r9U,p-} GHC.Void{-3T,W-}
AbsBinds
[tarV, tarW]
[]
[([tarV, tarW], $d1{-rs3,x-}, d.Normal_arO)]
    AbsBinds [] [] [([], normal_as4, normal_arS)]
	normal_arS _ = PrelBase.True{-5E,w-}{i}
    d.Normal_arO = ({-dict-} [] [normal_as4])
normal{-r3q,x-} = _/\_ t12 -> \ tpl_B1 -> tpl_B1
AbsBinds [tas1] [d.Normal_as0] []

ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: id 1;
_exports_
ShouldSucceed f Normal(normal);
_instances_
instance _forall_ [a b] => {Normal (a -> b)} = $d1;
_declarations_
1 $d1 _:_ _forall_ [a b] => {Normal (a -> b)} ;;
1 class Normal a where {normal :: a -> PrelBase.Bool} ;
1 f _:_ _forall_ [ta] => ta -> PrelBase.Bool ;;
