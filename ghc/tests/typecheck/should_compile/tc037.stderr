

================================================================================
Typechecked:
AbsBinds [takZ] [d.Eq'_alo] [([takZ], $d1{-rlx,x-}, d.Eq'_akS)]
    d.Eq'_alr = d.Eq'_alo
    deq_aly = deq{-r3u,x-} takZ d.Eq'_alr
    deq_alz = deq_alA
    AbsBinds [] [] [([], deq_alA, deq_akW)]
	deq_akW PrelBase.[]{-5i,w-}{i} PrelBase.[]{-5i,w-}{i}
		= PrelBase.True{-5E,w-}{i}
	deq_akW (x_r3k PrelBase.:{-55,w-}{i} xs_r3l)
		(y_r3m PrelBase.:{-55,w-}{i} ys_r3n)
		= if x_r3k deq_aly y_r3m then
		      deq_alz xs_r3l ys_r3n
		  else
		      PrelBase.False{-58,w-}{i}
	deq_akW other1_r3p other2_r3q = PrelBase.False{-58,w-}{i}
    d.Eq'_akS = ({-dict-} [] [deq_alA])
deq{-r3u,x-} = _/\_ t12 -> \ tpl_B1 -> tpl_B1
AbsBinds [talw] [d.Eq'_alv] []
ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_exports_
ShouldSucceed Eq'(deq);
_instances_
instance _forall_ [a] {Eq' a} => {Eq' [a]} = $d1;
_declarations_
1 $d1 _:_ _forall_ [a] {Eq' a} => {Eq' [a]} ;;
1 class Eq' a where {deq :: a -> a -> PrelBase.Bool} ;
