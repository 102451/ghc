 
tc056.hs:15:warning:
    Duplicated class assertion `Eq' a' in context: `(Eq' a, Eq' a)'


================================================================================
Typechecked:
AbsBinds
[taCJ, taCG]
[d.Eq'_aCN, d.Num_aCR]
[([taCJ, taCG], f{-r3E,x-}, f_aCq)]
    d.Eq'_aCO = d.Eq'_aCN
    d.Eq'_aCL = $d1{-rDw,x-} taCG [d.Eq'_aCN, d.Eq'_aCO]
    doubleeq_aDz = doubleeq{-r3G,x-} [taCG] d.Eq'_aCL
    fromInt_aDA = PrelBase.fromInt{-8R,p-} taCG d.Num_aCR
    lit_aDB = fromInt_aDA PrelBase.I#{-5b,w-}{i} 1#
    f_aCq x_r3h y_r3i = doubleeq_aDz x_r3h [lit_aDB] (taCG)
AbsBinds
[taD4]
[d.Eq'_aD7, d.Eq'_aD8]
[([taD4], $d1{-rDw,x-}, d.Eq'_aCX)]
    AbsBinds [] [] [([], doubleeq_aDC, doubleeq_aD1)]
	doubleeq_aD1 x_r3p y_r3q = PrelBase.True{-5E,w-}{i}
    d.Eq'_aCX = ({-dict-} [] [doubleeq_aDC])
AbsBinds [] [] [([], $d2{-rDx,x-}, d.Eq'_aDg)]
    AbsBinds [] [] [([], doubleeq_aDD, doubleeq_aDk)]
	doubleeq_aDk x_r3w y_r3x = PrelBase.True{-5E,w-}{i}
    d.Eq'_aDg = ({-dict-} [] [doubleeq_aDD])
scsel_Ord'ShouldSucceedEq'{-aDy,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case tpl_B1 of { PrelTup.(,){-62,w-}{i} tpl_B1 tpl_B2  -> tpl_B1;}
lt{-r3H,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case tpl_B1 of { PrelTup.(,){-62,w-}{i} tpl_B1 tpl_B2  -> tpl_B2;}
AbsBinds [taDu] [d.Ord'_aDq] []
doubleeq{-r3G,x-} = _/\_ t12 -> \ tpl_B1 -> tpl_B1
AbsBinds [taDv] [d.Eq'_aDt] []
ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d1 1 $d12 1 $d16 1 $d2 1 $d22 1 $d28 1 $d3 1 $d33 1 $d34 1 $d38 1 $d39 1 $d4 1 $d40 1 $d42 1 $d43 1 $d45 1 $d47 1 $d55 1 $d8 1 $d9 1 $m- 1 $m/= 1 $mfromInt 1 $mshowList 1 Eq 1 Eval 1 Num 1 Show 1 String 1;
PrelNum 1 :: $d10 1 $d16 1 $d18 1 $d29 1 $d33 1 $d35 1;
_exports_
ShouldSucceed f Eq'(doubleeq) Ord'(lt);
_instances_
instance _forall_ [a] {Eq' a, Eq' a} => {Eq' [a]} = $d1;
instance {Eq' PrelBase.Int} = $d2;
_declarations_
1 $d1 _:_ _forall_ [a] {Eq' a, Eq' a} => {Eq' [a]} ;;
1 $d2 _:_ {Eq' PrelBase.Int} ;;
1 class Eq' a where {doubleeq :: a -> a -> PrelBase.Bool} ;
1 class {Eq' a} => Ord' a where {lt :: a -> a -> PrelBase.Bool} ;
1 f _:_ _forall_ [ta tb] {Eq' tb, PrelBase.Num tb} => [tb] -> ta -> PrelBase.Bool ;;
