

================================================================================
Typechecked:
AbsBinds [taC6] [d.Num_aCa] [([taC6], a{-r3h,x-}, a_aBO)]
    +_aCe = PrelBase.+{-r3g,p-} taC6 d.Num_aCa
    d.Num_aCd = d.Num_aCa
    fromInt_aCf = PrelBase.fromInt{-8R,p-} taC6 d.Num_aCd
    lit_aCg = fromInt_aCf PrelBase.I#{-5b,w-}{i} 2#
    +_aCh = +_aCe
    fromInt_aCj = fromInt_aCf
    lit_aCk = fromInt_aCj PrelBase.I#{-5b,w-}{i} 3#
    a_aBO x_r3d
	  = y_r3f +_aCe lit_aCg
	  where
	      {- nonrec -}
	      AbsBinds [] [] [([], y_r3f, y_aBW)]
		  y_aBW = x_r3d +_aCh lit_aCk
	      {- nonrec -}
	      {- nonrec -}
ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d1 1 $d12 1 $d16 1 $d2 1 $d22 1 $d28 1 $d3 1 $d33 1 $d34 1 $d38 1 $d39 1 $d4 1 $d40 1 $d42 1 $d43 1 $d45 1 $d47 1 $d55 1 $d8 1 $d9 1 $m- 1 $m/= 1 $mfromInt 1 $mshowList 1 Eq 1 Eval 1 Num 1 Show 1 String 1;
PrelNum 1 :: $d10 1 $d16 1 $d18 1 $d29 1 $d33 1 $d35 1;
_exports_
ShouldSucceed a;
_declarations_
1 a _:_ _forall_ [ta] {PrelBase.Num ta} => ta -> ta ;;
