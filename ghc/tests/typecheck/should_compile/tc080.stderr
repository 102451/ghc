ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1 302
_instance_modules_
IO PrelAddr PrelArr PrelBounded PrelCCall PrelForeign PrelNum
_usages_
PrelBase 1 :: $dEnum0 1 $dEnumBool0 1 $dEnumChar0 1 $dEnumInt0 1 $dEnumOrdering0 1 $dEq0 1 $dEq1 1 $dEqBool0 1 $dEqChar0 1 $dEqInt0 1 $dEqOrdering0 1 $dEval0 1 $dEval1 1 $dEval2 1 $dEvalBool0 1 $dEvalChar0 1 $dEvalDouble0 1 $dEvalInt0 1 $dEvalInteger0 1 $dEvalOrdering0 1 $dFunctor0 1 $dMonad0 1 $dMonadPlus0 1 $dMonadZero0 1 $dNumInt0 1 $dOrd0 1 $dOrd1 1 $dOrdBool0 1 $dOrdChar0 1 $dOrdInt0 1 $dOrdOrdering0 1 $dShow0 1 $dShow1 1 $dShow2 1 $dShowBool0 1 $dShowChar0 1 $dShowInt0 1 $dShowOrdering0 1 $m- 1 $m/= 1 $m< 1 $m<= 1 $m> 1 $m>= 1 $m>> 1 $mcompare 1 $menumFromThenTo 1 $menumFromTo 1 $mfromInt 1 $mmax 1 $mmin 1 $mshowList 1 . 1 dropWhile 1 isDigit 1 isSpace 1 ord 1 Enum 1 Eq 1 Eval 1 Functor 1 Monad 1 MonadPlus 1 MonadZero 1 Num 1 Ord 1 Ordering 1 Show 1 String 1;
PrelList 1 :: all 1 length 1 null 1 tail 1;
PrelNum 1 :: $dEnumDouble0 1 $dEnumInteger0 1 $dEnumRatio0 1 $dEqDouble0 1 $dEqInteger0 1 $dEqRatio0 1 $dEvalRatio0 1 $dIntegralInt0 1 $dIntegralInteger0 1 $dNumDouble0 1 $dNumInteger0 1 $dNumRatio0 1 $dOrdDouble0 1 $dOrdInteger0 1 $dOrdRatio0 1 $dRealDouble0 1 $dRealInt0 1 $dRealInteger0 1 $dRealRatio0 1 $dShowDouble0 1 $dShowInteger0 1 $dShowRatio0 1 $mdiv 1 $mdivMod 1 $mmod 1 $mquot 1 $mrem 1 ^ 1 Integral 1 Ratio 1 Rational 1 Real 1;
PrelTup 1 :: $dEq0 1 $dEval0 1 $dOrd0 1 $dShow3 1;
_exports_
ShouldSucceed charToInt lines' seperatedBy span' strToInt whiteSpace Parse(:Parse :Parse forced parse parseType parseLine parseFile);
_instances_
instance _forall_ [a] {Parse a} => {Parse [a]} = $dParse0;
instance {Parse PrelBase.Char} = $dParseChar0;
instance {Parse PrelBase.Int} = $dParseInt0;
_declarations_
1 $dParse0 _:_ _forall_ [a] {Parse a} => {Parse [a]} ;;
1 $dParseChar0 _:_ {Parse PrelBase.Char} ;;
1 $dParseInt0 _:_ {Parse PrelBase.Int} ;;
1 $mforced _:_ _forall_ [a] {Parse a} => a -> PrelBase.Bool ;;
1 $mparse _:_ _forall_ [a] {Parse a} => PrelBase.String -> (a, PrelBase.String) ;;
1 $mparseFile _:_ _forall_ [a] {Parse a} => PrelBase.String -> [a] ;;
1 $mparseLine _:_ _forall_ [a] {Parse a} => PrelBase.String -> a ;;
1 charToInt _:_ PrelBase.Char -> PrelBase.Int ;;
1 class Parse a where {forced = :: a -> PrelBase.Bool; parse = :: PrelBase.String -> (a, PrelBase.String); parseType :: PrelBase.String -> (a, PrelBase.String); parseLine = :: PrelBase.String -> a; parseFile = :: PrelBase.String -> [a]} ;
1 lines' _:_ [PrelBase.Char] -> [[PrelBase.Char]] ;;
1 seperatedBy _:_ PrelBase.Char -> PrelBase.String -> [PrelBase.String] ;;
1 span' _:_ _forall_ [a] => (a -> PrelBase.Bool) -> [a] -> ([a], [a]) ;;
1 strToInt _:_ PrelBase.String -> PrelBase.Int ;;
1 whiteSpace _:_ PrelBase.String -> PrelBase.String ;;
