__export ShouldSucceed Parse{parseFile parseLine parseType parse forced} charToInt lineszq seperatedBy spanzq strToInt whiteSpace;
instance {Parse PrelBase.Char} = zdfParseChar;
instance {Parse PrelBase.Int} = zdfParseInt;
instance __forall [a] => {Parse a} -> {Parse [a]} = zdfParseZMZN;
1 charToInt :: PrelBase.Char -> PrelBase.Int ;
1 class Parse a where {parseFile = :: PrelBase.String -> [a]; parseLine = :: PrelBase.String -> a; parseType :: PrelBase.String -> (a, PrelBase.String); parse = :: PrelBase.String -> (a, PrelBase.String); forced = :: a -> PrelBase.Bool} ;
1 lineszq :: [PrelBase.Char] -> [[PrelBase.Char]] ;
1 seperatedBy :: PrelBase.Char -> PrelBase.String -> [PrelBase.String] ;
1 spanzq :: __forall [a] => (a -> PrelBase.Bool) -> [a] -> ([a], [a]) ;
1 strToInt :: PrelBase.String -> PrelBase.Int ;
1 whiteSpace :: PrelBase.String -> PrelBase.String ;
1 zddmforced :: __forall [a] => {Parse a} -> a -> PrelBase.Bool ;
1 zddmparse :: __forall [a] => {Parse a} -> PrelBase.String -> (a, PrelBase.String) ;
1 zddmparseFile :: __forall [a] => {Parse a} -> PrelBase.String -> [a] ;
1 zddmparseLine :: __forall [a] => {Parse a} -> PrelBase.String -> a ;
1 zddmparseType :: __forall [a] => {Parse a} -> PrelBase.String -> (a, PrelBase.String) ;
1 zdfParseChar :: {Parse PrelBase.Char} ;
1 zdfParseInt :: {Parse PrelBase.Int} ;
1 zdfParseZMZN :: __forall [a] => {Parse a} -> {Parse [a]} ;
