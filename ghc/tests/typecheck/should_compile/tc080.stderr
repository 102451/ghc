==================== Typechecked ====================
AbsBinds [] [] [([], charToInt{-r3R,x-}, charToInt_aZI)]
    charToInt_aZI x_r4E
		  = (PrelBase.ord{-riq,p-} x_r4E) -_a1a9 (PrelBase.ord{-riq,p-} '0')
AbsBinds [] [] [([], strToInt{-r3Q,x-}, strToInt_aZQ)]
    d.Integral_a10U = PrelNum.$d36{-rI6,p-}
    strToInt_aZQ x_r4v
		 = strToInt'_a1am (PrelList.length{-rz0,p-}
				       PrelBase.Char{-38,W-} x_r4v)
				  -_a1af lit_a1ae
				  x_r4v
		 where
		     {- rec -}
		     AbsBinds
		     [ta10t]
		     [d.Integral_a10D]
		     [([ta10t], strToInt'_r4x, strToInt'_aZT)]
			 d.Real_a19W =
			     PrelNum.scsel_IntegralPrelNumReal{-a1ar,p-} ta10t d.Integral_a10D
			 d.Num_a10G =
			     PrelNum.scsel_RealPrelBaseNum{-a1as,p-} ta10t d.Real_a19W
			 d.Num_a10C = PrelBase.$d4{-rcO,p-}
			 ^_a1aq =
			     PrelNum.^{-rAz,p-} [ta10t, PrelBase.Int{-3g,W-}]
				 [d.Num_a10C, d.Integral_a10D]
			 -_a1ap = PrelBase.-{-817,p-} ta10t d.Num_a10G
			 d.Num_a10J = d.Num_a10G
			 fromInt_a1ao = PrelBase.fromInt{-8R,p-} ta10t d.Num_a10J
			 lit_a1an = fromInt_a1ao PrelBase.I#{-5b,w-}{i} 1#
			 strToInt'_aZT _ PrelBase.[]{-5i,w-}{i} = lit_a1ad
			 strToInt'_aZT x_r4A (a_r4B PrelBase.:{-55,w-}{i} l_r4C)
				       = ((charToInt{-r3R,x-} a_r4B) *_a1ab (lit_a1aa ^_a1aq x_r4A))
					 +_a1ac (strToInt'_aZT x_r4A -_a1ap lit_a1an l_r4C)
		     {- nonrec -}
		     strToInt'_a1am = strToInt'_r4x PrelBase.Int{-3g,W-} d.Integral_a10U
		     {- nonrec -}
AbsBinds [ta119] [] [([ta119], span'{-r3O,x-}, span'_a116)]
    span'_a116 p_r49 PrelBase.[]{-5i,w-}{i}
	       = (PrelBase.[]{-5i,w-}{i} ta119, PrelBase.[]{-5i,w-}{i} ta119)
    span'_a116 p_r4b (x_r4c PrelBase.:{-55,w-}{i} xs'_r4d)
	       | p_r4b x_r4c
	       = fixLeak_r4f [[ta119], ta119] x_r4c
					      span'{-r3O,x-} ta119 p_r4b xs'_r4d
	       where
		   {- nonrec -}
		   AbsBinds
		   [ta11N, ta11P]
		   []
		   [([ta11N, ta11P], fixLeak_r4f, fixLeak_a11p)]
		       fixLeak_a11p x_r4h (xs_r4i, ys_r4j)
				    = (PrelBase.:{-55,w-}{i} ta11P x_r4h xs_r4i, ys_r4j)
		   {- nonrec -}
		   {- nonrec -}
    span'_a116 _ xs_r4l = (PrelBase.[]{-5i,w-}{i} ta119, xs_r4l)
AbsBinds [] [] [([], lines'{-r3P,x-}, lines'_a125)]
    lines'_a125 "" = PrelBase.[]{-5i,w-}{i} [PrelBase.Char{-38,W-}]
    lines'_a125 s_r4o
		= plumb_r4q span'{-r3O,x-} PrelBase.Char{-38,W-} /=_a1ag '\n' s_r4o
		where
		    {- nonrec -}
		    AbsBinds [] [] [([], plumb_r4q, plumb_a12a)]
			plumb_a12a (l_r4s, s'_r4t)
				   = PrelBase.:{-55,w-}{i} [PrelBase.Char{-38,W-}]
					 l_r4s
					 (if PrelList.null{-rz6,p-}
						 PrelBase.Char{-38,W-} s'_r4t then
					      PrelBase.[]{-5i,w-}{i} [PrelBase.Char{-38,W-}]
					  else
					      lines'{-r3P,x-} PrelList.tail{-rzj,p-}
								  PrelBase.Char{-38,W-} s'_r4t)
		    {- nonrec -}
		    {- nonrec -}
AbsBinds [] [] [([], whiteSpace{-r3N,x-}, whiteSpace_a12H)]
    whiteSpace_a12H
	= PrelBase.dropWhile{-rhV,p-}
	      PrelBase.Char{-38,W-} PrelBase.isSpace{-rig,p-}
AbsBinds [] [] [([], seperatedBy{-r3M,x-}, seperatedBy_a12L)]
    seperatedBy_a12L ch_r3W PrelBase.[]{-5i,w-}{i}
		     = PrelBase.[]{-5i,w-}{i} PrelBase.String{-r5n,p-}
    seperatedBy_a12L ch_r3Y xs_r3Z
		     = twaddle_r41 ch_r3Y
				   span'{-r3O,x-} PrelBase.Char{-38,W-} \ x_r47
									  -> x_r47 /=_a1ai ch_r3Y
									xs_r3Z
		     where
			 {- nonrec -}
			 AbsBinds [] [] [([], twaddle_r41, twaddle_a12S)]
			     twaddle_a12S ch_r43 (l_r44, (_ PrelBase.:{-55,w-}{i} r_r45))
					  = PrelBase.:{-55,w-}{i} PrelBase.String{-r5n,p-}
						l_r44 (seperatedBy{-r3M,x-} ch_r43 r_r45)
			 {- nonrec -}
			 {- nonrec -}
AbsBinds
[ta13L]
[d.Parse_a158]
[([ta13L], $d1{-r1al,x-}, d.Parse_a13z)]
    d.Parse_a15c = d.Parse_a13z
    $mparseFile_a1aC = $mparseFile{-r13C,x-} [ta13L] d.Parse_a15c
    d.Parse_a15e = d.Parse_a13z
    $mparseLine_a1aB = $mparseLine{-r13I,x-} [ta13L] d.Parse_a15e
    d.Parse_a15i = d.Parse_a158
    parseLine_a1aA = parseLine{-r4R,x-} ta13L d.Parse_a15i
    d.Parse_a15o = d.Parse_a13z
    $mparse_a1az = $mparse{-r13H,x-} [ta13L] d.Parse_a15o
    d.Parse_a15q = d.Parse_a158
    forced_a1ay = forced{-r5P,x-} ta13L d.Parse_a15q
    AbsBinds [] [] [([], parseFile_a1ax, parseFile_a13F)]
	parseFile_a13F = $mparseFile_a1aC
    AbsBinds [] [] [([], parseLine_a1aw, parseLine_a13S)]
	parseLine_a13S = $mparseLine_a1aB
    AbsBinds [] [] [([], parseType_a1av, parseType_a140)]
	parseType_a140 more_r4L
		       = (map_a1a8 [PrelBase.String{-r5n,p-}, ta13L] parseLine_a1aA
								     seperatedBy{-r3M,x-} ','
											  ++_a1a7
											      PrelBase.Char{-38,W-}
											      l_r4N
											      ",",
			  out_r4O)
		       where
			   {- nonrec -}
			   AbsBinds [] [] [([], l_r4N, l_a143), ([], out_r4O, out_a144)]
			       (l_a143, (']' PrelBase.:{-55,w-}{i} out_a144))
				   = span'{-r3O,x-} PrelBase.Char{-38,W-} \ x_r4Q
									    -> x_r4Q /=_a1a6 ']'
									  PrelList.tail{-rzj,p-}
									      PrelBase.Char{-38,W-} more_r4L
			   {- nonrec -}
			   {- nonrec -}
    AbsBinds [] [] [([], parse_a1au, parse_a14V)]
	parse_a14V = $mparse_a1az
    AbsBinds [] [] [([], forced_a1at, forced_a153)]
	forced_a153 = PrelList.all{-rwP,p-} ta13L forced_a1ay
    d.Parse_a13z =
	({-dict-}
	 []
	 [parseFile_a1ax, parseLine_a1aw, parseType_a1av, parse_a1au, forced_a1at])
AbsBinds [] [] [([], $d2{-r1ak,x-}, d.Parse_a15w)]
    AbsBinds [] [] [([], parseFile_a1aH, parseFile_a15B)]
	parseFile_a15B = $mparseFile_a1a5
    AbsBinds [] [] [([], parseLine_a1aG, parseLine_a15L)]
	parseLine_a15L = $mparseLine_a1a4
    AbsBinds [] [] [([], parseType_a1aF, parseType_a15U)]
	parseType_a15U (ch_r4Z PrelBase.:{-55,w-}{i} str_r50)
		       = (ch_r4Z, str_r50)
    AbsBinds [] [] [([], parse_a1aE, parse_a166)]
	parse_a166 = $mparse_a1a3
    AbsBinds [] [] [([], forced_a1aD, forced_a16f)]
	forced_a16f n_r54 = PrelBase.True{-5E,w-}{i}
    d.Parse_a15w =
	({-dict-}
	 []
	 [parseFile_a1aH, parseLine_a1aG, parseType_a1aF, parse_a1aE, forced_a1aD])
AbsBinds [] [] [([], $d3{-r1aj,x-}, d.Parse_a16s)]
    AbsBinds [] [] [([], parseFile_a1aM, parseFile_a16x)]
	parseFile_a16x = $mparseFile_a1a2
    AbsBinds [] [] [([], parseLine_a1aL, parseLine_a16H)]
	parseLine_a16H = $mparseLine_a1a1
    AbsBinds [] [] [([], parseType_a1aK, parseType_a16Q)]
	parseType_a16Q str_r5a
		       = pl_r5c PrelBase.String{-r5n,p-} span'{-r3O,x-}
							     PrelBase.Char{-38,W-} PrelBase.isDigit{-ria,p-}
										   str_r5a
		       where
			   {- nonrec -}
			   AbsBinds [ta17b] [] [([ta17b], pl_r5c, pl_a16T)]
			       pl_a16T (l_r5e, r_r5f) = (strToInt{-r3Q,x-} l_r5e, r_r5f)
			   {- nonrec -}
			   {- nonrec -}
    AbsBinds [] [] [([], parse_a1aJ, parse_a17k)]
	parse_a17k = $mparse_a1a0
    AbsBinds [] [] [([], forced_a1aI, forced_a17t)]
	forced_a17t n_r5j
		    | n_r5j >=_a19Z lit_a19Y = PrelBase.True{-5E,w-}{i}
    d.Parse_a16s =
	({-dict-}
	 []
	 [parseFile_a1aM, parseLine_a1aL, parseType_a1aK, parse_a1aJ, forced_a1aI])
parseFile{-r5S,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case
	    tpl_B1
	of {
	PrelTup.(,,,,){-65,w-}{i} tpl_B1 tpl_B2 tpl_B3 tpl_B4 tpl_B5  ->
	tpl_B1;}
parseLine{-r4R,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case
	    tpl_B1
	of {
	PrelTup.(,,,,){-65,w-}{i} tpl_B1 tpl_B2 tpl_B3 tpl_B4 tpl_B5  ->
	tpl_B2;}
parseType{-r5R,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case
	    tpl_B1
	of {
	PrelTup.(,,,,){-65,w-}{i} tpl_B1 tpl_B2 tpl_B3 tpl_B4 tpl_B5  ->
	tpl_B3;}
parse{-r5Q,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case
	    tpl_B1
	of {
	PrelTup.(,,,,){-65,w-}{i} tpl_B1 tpl_B2 tpl_B3 tpl_B4 tpl_B5  ->
	tpl_B4;}
forced{-r5P,x-} =
    _/\_ t12 -> \ tpl_B1 ->
	case
	    tpl_B1
	of {
	PrelTup.(,,,,){-65,w-}{i} tpl_B1 tpl_B2 tpl_B3 tpl_B4 tpl_B5  ->
	tpl_B5;}
AbsBinds
[ta186]
[d.Parse_a19b]
[([ta186], $mparseFile{-r13C,x-}, parseFile_a1aN), ([ta186],
						    $mparseLine{-r13I,x-},
						    parseLine_a1aQ), ([ta186],
								      $mparse{-r13H,x-},
								      parse_a1aP), ([ta186],
										    $mforced{-r13G,x-},
										    forced_a1aO)]
    d.Parse_a19d = d.Parse_a19b
    forced_a1aU = forced{-r5P,x-} ta186 d.Parse_a19d
    d.Parse_a19h = d.Parse_a19b
    parseLine_a1aT = parseLine{-r4R,x-} ta186 d.Parse_a19h
    d.Parse_a19j = d.Parse_a19b
    parse_a1aS = parse{-r5Q,x-} ta186 d.Parse_a19j
    d.Parse_a19l = d.Parse_a19b
    parseType_a1aR = parseType{-r5R,x-} ta186 d.Parse_a19l
    AbsBinds [] [] [([], parseFile_a1aN, parseFile_a17N)]
	parseFile_a17N string_r5A
		       | PrelList.all{-rwP,p-} ta186 forced_a1aU x_r5C = x_r5C
		       where
			   {- nonrec -}
			   AbsBinds [] [] [([], x_r5C, x_a17Q)]
			       x_a17Q
				   = map_a19X [PrelBase.String{-r5n,p-}, ta186] parseLine_a1aT
										lines'{-r3P,x-} string_r5A
			   {- nonrec -}
			   {- nonrec -}
    AbsBinds [] [] [([], parseLine_a1aQ, parseLine_a18r)]
	parseLine_a18r
	    = PrelBase..{-rc2,p-}
		  [(ta186, PrelBase.String{-r5n,p-}), PrelBase.String{-r5n,p-}, ta186]
		  (pl_r5G [ta186, PrelBase.String{-r5n,p-}]) parse_a1aS
	    where
		{- nonrec -}
		AbsBinds [ta18B, ta18E] [] [([ta18B, ta18E], pl_r5G, pl_a18q)]
		    pl_a18q (a_r5I, _) = a_r5I
		{- nonrec -}
		{- nonrec -}
    AbsBinds [] [] [([], parse_a1aP, parse_a18V)]
	parse_a18V
	    = PrelBase..{-rc2,p-}
		  [PrelBase.String{-r5n,p-}, PrelBase.String{-r5n,p-}, (ta186, PrelBase.String{-r5n,p-})]
		  parseType_a1aR whiteSpace{-r3N,x-}
    AbsBinds [] [] [([], forced_a1aO, forced_a196)]
	forced_a196 x_r5O = PrelBase.True{-5E,w-}{i}
d.Eq_a19n = PrelBase.$d34{-rcI,p-}
/=_a1ai = PrelBase./={-rhx,p-} PrelBase.Char{-38,W-} d.Eq_a19n
d.Eq_a19s = d.Eq_a19n
d.Eq_a19q = PrelBase.$d28{-rcB,p-} PrelBase.Char{-38,W-} d.Eq_a19s
==_a1ah = PrelBase.=={-8Y,p-} [PrelBase.Char{-38,W-}] d.Eq_a19q
/=_a1ag = /=_a1ai
d.Num_a19u = PrelBase.$d4{-rcO,p-}
-_a1af = PrelBase.-{-817,p-} PrelBase.Int{-3g,W-} d.Num_a19u
lit_a1ae = PrelBase.I#{-5b,w-}{i} 1#
lit_a1ad = PrelBase.I#{-5b,w-}{i} 0#
d.Num_a19x = d.Num_a19u
+_a1ac = PrelBase.+{-rhC,p-} PrelBase.Int{-3g,W-} d.Num_a19x
d.Num_a19z = d.Num_a19u
*_a1ab = PrelBase.*{-rhD,p-} PrelBase.Int{-3g,W-} d.Num_a19z
lit_a1aa = PrelBase.I#{-5b,w-}{i} 10#
-_a1a9 = -_a1af
d.Functor_a19B = PrelBase.$d26{-rcz,p-}
map_a1a8 = PrelBase.map{-rhy,p-} PrelBase.[]{-3j,W-} d.Functor_a19B
d.MonadPlus_a19E = PrelBase.$d23{-rcw,p-}
++_a1a7 = PrelBase.++{-rhB,p-} PrelBase.[]{-3j,W-} d.MonadPlus_a19E
/=_a1a6 = /=_a1ai
d.Parse_a19H = $d2{-r1ak,x-}
$mparseFile_a1a5 =
    $mparseFile{-r13C,x-} PrelBase.Char{-38,W-} d.Parse_a19H
d.Parse_a19K = d.Parse_a19H
$mparseLine_a1a4 =
    $mparseLine{-r13I,x-} PrelBase.Char{-38,W-} d.Parse_a19K
d.Parse_a19M = d.Parse_a19H
$mparse_a1a3 = $mparse{-r13H,x-} PrelBase.Char{-38,W-} d.Parse_a19M
d.Parse_a19O = $d3{-r1aj,x-}
$mparseFile_a1a2 =
    $mparseFile{-r13C,x-} PrelBase.Int{-3g,W-} d.Parse_a19O
d.Parse_a19R = d.Parse_a19O
$mparseLine_a1a1 =
    $mparseLine{-r13I,x-} PrelBase.Int{-3g,W-} d.Parse_a19R
d.Parse_a19T = d.Parse_a19O
$mparse_a1a0 = $mparse{-r13H,x-} PrelBase.Int{-3g,W-} d.Parse_a19T
d.Ord_a19V = PrelBase.$d7{-rda,p-}
>=_a19Z = PrelBase.>={-8Z,p-} PrelBase.Int{-3g,W-} d.Ord_a19V
lit_a19Y = lit_a1ad
map_a19X = map_a1a8


NOTE: Simplifier still going after 4 iterations; bailing out.
ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d1 1 $d11 1 $d12 1 $d14 1 $d15 1 $d16 1 $d2 1 $d22 1 $d23 1 $d24 1 $d25 1 $d26 1 $d27 1 $d28 1 $d3 1 $d31 1 $d32 1 $d33 1 $d34 1 $d35 1 $d38 1 $d39 1 $d4 1 $d40 1 $d42 1 $d43 1 $d45 1 $d46 1 $d47 1 $d50 1 $d51 1 $d52 1 $d55 1 $d56 1 $d6 1 $d7 1 $d8 1 $d9 1 $m- 1 $m/= 1 $m< 1 $m<= 1 $m> 1 $m>= 1 $m>> 1 $mcompare 1 $menumFromThenTo 1 $menumFromTo 1 $mfromInt 1 $mmax 1 $mmin 1 $mshowList 1 . 1 dropWhile 1 isDigit 1 isSpace 1 ord 1 Enum 1 Eq 1 Eval 1 Functor 1 Monad 1 MonadPlus 1 MonadZero 1 Num 1 Ord 1 Ordering 1 Show 1 String 1;
PrelList 1 :: all 1 length 1 null 1 tail 1;
PrelNum 1 :: $d1 1 $d10 1 $d15 1 $d16 1 $d17 1 $d18 1 $d2 1 $d29 1 $d30 1 $d31 1 $d32 1 $d33 1 $d34 1 $d35 1 $d36 1 $d37 1 $d38 1 $d39 1 $d5 1 $d6 1 $d7 1 $d8 1 $mdiv 1 $mdivMod 1 $mmod 1 $mquot 1 $mrem 1 ^ 1 Integral 1 Ratio 1 Rational 1 Real 1;
PrelTup 1 :: $d13 1 $d4 1 $d49 1 $d9 1;
_exports_
ShouldSucceed charToInt lines' seperatedBy span' strToInt whiteSpace Parse(parseFile parseLine parseType parse forced);
_instances_
instance _forall_ [a] {Parse a} => {Parse [a]} = $d1;
instance {Parse PrelBase.Char} = $d2;
instance {Parse PrelBase.Int} = $d3;
_declarations_
1 $d1 _:_ _forall_ [a] {Parse a} => {Parse [a]} ;;
1 $d2 _:_ {Parse PrelBase.Char} ;;
1 $d3 _:_ {Parse PrelBase.Int} ;;
1 $mforced _:_ _forall_ [a] {Parse a} => a -> PrelBase.Bool ;;
1 $mparse _:_ _forall_ [a] {Parse a} => PrelBase.String -> (a, PrelBase.String) ;;
1 $mparseFile _:_ _forall_ [a] {Parse a} => PrelBase.String -> [a] ;;
1 $mparseLine _:_ _forall_ [a] {Parse a} => PrelBase.String -> a ;;
1 class Parse a where {parseFile = :: PrelBase.String -> [a]; parseLine = :: PrelBase.String -> a; parseType :: PrelBase.String -> (a, PrelBase.String); parse = :: PrelBase.String -> (a, PrelBase.String); forced = :: a -> PrelBase.Bool} ;
1 charToInt _:_ PrelBase.Char -> PrelBase.Int ;;
1 lines' _:_ [PrelBase.Char] -> [[PrelBase.Char]] ;;
1 seperatedBy _:_ PrelBase.Char -> PrelBase.String -> [PrelBase.String] ;;
1 span' _:_ _forall_ [ta] => (ta -> PrelBase.Bool) -> [ta] -> ([ta], [ta]) ;;
1 strToInt _:_ PrelBase.String -> PrelBase.Int ;;
1 whiteSpace _:_ PrelBase.String -> PrelBase.String ;;
