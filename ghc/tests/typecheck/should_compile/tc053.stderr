==================== Typechecked ====================
AbsBinds
[taCA]
[d.Eq'_aCF, d.Num_aCI]
[([taCA], f{-r3A,x-}, f_aCn)]
    d.Eq'_aCD = $d1{-rDB,x-} taCA d.Eq'_aCF
    deq_aDz = deq{-r3B,x-} [taCA] d.Eq'_aCD
    fromInt_aDy = PrelBase.fromInt{-8R,p-} taCA d.Num_aCI
    lit_aDx = fromInt_aDy PrelBase.I#{-5b,w-}{i} 1#
    f_aCn x_r3f = deq_aDz x_r3f [lit_aDx] (taCA)
AbsBinds [taCZ] [d.Eq'_aDb] [([taCZ], $d1{-rDB,x-}, d.Eq'_aCO)]
    d.Eq'_aDf = d.Eq'_aDb
    deq_aDE = deq{-r3B,x-} taCZ d.Eq'_aDf
    deq_aDD = deq_aDC
    AbsBinds [] [] [([], deq_aDC, deq_aCS)]
	deq_aCS (a_r3m PrelBase.:{-55,w-}{i} as_r3n)
		(b_r3o PrelBase.:{-55,w-}{i} bs_r3p)
		= if deq_aDE a_r3m b_r3o then
		      deq_aDD as_r3n bs_r3p
		  else
		      PrelBase.False{-58,w-}{i}
    d.Eq'_aCO = ({-dict-} [] [deq_aDC])
AbsBinds [] [] [([], $d2{-rDA,x-}, d.Eq'_aDl)]
    AbsBinds [] [] [([], deq_aDF, deq_aDp)]
	deq_aDp x_r3v y_r3w = PrelBase.True{-5E,w-}{i}
    d.Eq'_aDl = ({-dict-} [] [deq_aDF])
deq{-r3B,x-} = _/\_ t12 -> \ tpl_B1 -> tpl_B1
AbsBinds [taDw] [d.Eq'_aDv] []

ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d1 1 $d12 1 $d16 1 $d2 1 $d22 1 $d28 1 $d3 1 $d33 1 $d34 1 $d38 1 $d39 1 $d4 1 $d40 1 $d42 1 $d43 1 $d45 1 $d47 1 $d55 1 $d8 1 $d9 1 $m- 1 $m/= 1 $mfromInt 1 $mshowList 1 Eq 1 Eval 1 Num 1 Show 1 String 1;
PrelNum 1 :: $d10 1 $d16 1 $d18 1 $d29 1 $d33 1 $d35 1;
_exports_
ShouldSucceed f Eq'(deq);
_instances_
instance _forall_ [a] {Eq' a} => {Eq' [a]} = $d1;
instance {Eq' PrelBase.Int} = $d2;
_declarations_
1 $d1 _:_ _forall_ [a] {Eq' a} => {Eq' [a]} ;;
1 $d2 _:_ {Eq' PrelBase.Int} ;;
1 class Eq' a where {deq :: a -> a -> PrelBase.Bool} ;
1 f _:_ _forall_ [ta] {Eq' ta, PrelBase.Num ta} => [ta] -> PrelBase.Bool ;;
