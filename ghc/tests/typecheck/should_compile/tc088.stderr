==================== Typechecked ====================
AbsBinds
[taD8, taD9]
[d.Num_aEE, d.Eq_aEF, d.Show_aEG, d.Eval_aEH]
[([taD8, taD9], $d1{-rFF,x-}, d.Num_aD1)]
    d.Eq_aEI = d.Eq_aEF
    d.Show_aEJ = d.Show_aEG
    d.Eval_aEK = d.Eval_aEH
    d.Num_aEO = d.Num_aEE
    +_aFV = PrelBase.+{-rgc,p-} taD9 d.Num_aEO
    d.Num_aEQ = d.Num_aEE
    -_aFU = PrelBase.-{-817,p-} taD9 d.Num_aEQ
    d.Num_aES = d.Num_aEE
    *_aFT = PrelBase.*{-rgd,p-} taD9 d.Num_aES
    d.Num_aEU = d.Num_aEE
    negate_aFS = PrelBase.negate{-rge,p-} taD9 d.Num_aEU
    d.Num_aEW = d.Num_aEE
    abs_aFR = PrelBase.abs{-rgf,p-} taD9 d.Num_aEW
    d.Num_aEY = d.Num_aEE
    signum_aFQ = PrelBase.signum{-rgg,p-} taD9 d.Num_aEY
    d.Num_aF0 = d.Num_aEE
    fromInteger_aFP = PrelBase.fromInteger{-8S,p-} taD9 d.Num_aF0
    d.Num_aF2 = d.Num_aEE
    fromInt_aFO = PrelBase.fromInt{-8R,p-} taD9 d.Num_aF2
    AbsBinds [] [] [([], +_aFN, +_aD5)]
	+_aD5 f_r3h g_r3i = \ a_r3k -> (f_r3h a_r3k) +_aFV (g_r3i a_r3k)
    AbsBinds [] [] [([], -_aFM, -_aDl)]
	-_aDl f_r3o g_r3p = \ a_r3r -> (f_r3o a_r3r) -_aFU (g_r3p a_r3r)
    AbsBinds [] [] [([], *_aFL, *_aDz)]
	*_aDz f_r3v g_r3w = \ a_r3y -> (f_r3v a_r3y) *_aFT (g_r3w a_r3y)
    AbsBinds [] [] [([], negate_aFK, negate_aDN)]
	negate_aDN f_r3C = \ a_r3E -> negate_aFS f_r3C a_r3E
    AbsBinds [] [] [([], abs_aFJ, abs_aDZ)]
	abs_aDZ f_r3I = \ a_r3K -> abs_aFR f_r3I a_r3K
    AbsBinds [] [] [([], signum_aFI, signum_aEb)]
	signum_aEb f_r3O = \ a_r3Q -> signum_aFQ f_r3O a_r3Q
    AbsBinds [] [] [([], fromInteger_aFH, fromInteger_aEn)]
	fromInteger_aEn n_r3U = \ a_r3W -> fromInteger_aFP n_r3U
    AbsBinds [] [] [([], fromInt_aFG, fromInt_aEy)]
	fromInt_aEy n_r40 = \ a_r42 -> fromInt_aFO n_r40
    d.Num_aD1 =
	({-dict-}
	 [d.Eq_aEI, d.Show_aEJ, d.Eval_aEK]
	 [+_aFN, -_aFM, *_aFL, negate_aFK, abs_aFJ, signum_aFI, fromInteger_aFH, fromInt_aFG])
AbsBinds
[taFm, taFn]
[d.Eq_aFz]
[([taFm, taFn], $d2{-rFW,x-}, d.Eq_aFf)]
    d.Eq_aFD = d.Eq_aFf
    $m/=_aFZ = PrelBase.$m/={-rfO,p-} (taFm -> taFn) d.Eq_aFD
    AbsBinds [] [] [([], ==_aFY, ==_aFj)]
	==_aFj f_r4a g_r4b
	       = IOBase.error{-87,w-}
		     PrelBase.Bool{-34,W-} "attempt to compare functions"
    AbsBinds [] [] [([], /=_aFX, /=_aFw)]
	/=_aFw = $m/=_aFZ
    d.Eq_aFf = ({-dict-} [] [==_aFY, /=_aFX])

ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum ShouldSucceed
_usages_
PrelBase 1 :: $d1 1 $d12 1 $d16 1 $d2 1 $d22 1 $d28 1 $d3 1 $d33 1 $d34 1 $d38 1 $d39 1 $d4 1 $d40 1 $d42 1 $d43 1 $d45 1 $d47 1 $d55 1 $d8 1 $d9 1 $m- 1 $m/= 1 $mfromInt 1 $mshowList 1 Eq 1 Eval 1 Num 1 Show 1 String 1;
PrelNum 1 :: $d10 1 $d16 1 $d18 1 $d29 1 $d33 1 $d35 1;
_exports_
_instances_
instance _forall_ [a b] {PrelBase.Num b} => {PrelBase.Num (a -> b)} = $d1;
instance _forall_ [a b] {PrelBase.Eq b} => {PrelBase.Eq (a -> b)} = $d2;
_declarations_
1 $d1 _:_ _forall_ [a b] {PrelBase.Num b, PrelBase.Eq (a -> b), PrelBase.Show (a -> b), PrelBase.Eval (a -> b)} => {PrelBase.Num (a -> b)} ;;
1 $d2 _:_ _forall_ [a b] {PrelBase.Eq b} => {PrelBase.Eq (a -> b)} ;;
