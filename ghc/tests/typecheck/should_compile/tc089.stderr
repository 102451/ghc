ghc: module version changed to 1; reason: no old .hi file
__export ShouldSucceed absAnd absIf bottom f f_rec f_rec0 f_rec1 f_rec2 fac fac_rec fac_rec0 fac_rec1 fac_rec2 fac_rec3 fac_rec4 g g_rec g_rec0 g_rec1 g_rec2 g_rec3 g_rec4 g_rec5 g_rec6 g_rec7 g_rec8 head one s_1_0 s_2_0 s_2_1 s_3_0 s_3_1 s_3_2;
1 absAnd :: __forall [t] => t -> t -> t ;
1 absIf :: __forall [t t1 t2] => t -> t1 -> t2 -> t ;
1 bottom :: __forall [t] => [t] -> t ;
1 f :: __forall [t] => t -> t ;
1 f_rec :: __forall [t t1] => (t -> t1) -> t -> t1 ;
1 f_rec0 :: __forall [t] => t -> t ;
1 f_rec1 :: __forall [t] => t -> t ;
1 f_rec2 :: __forall [t] => t -> t ;
1 fac :: __forall [t t1 t2 t3 t4 t5 t6 t7 t8 t9 t10] => (t, (t9, (t2, (t3, (t4, t5)))), (t1, (t2, (t3, (t4, t5))), (t6, (t3, (t4, t5)), (t7, (t4, t5), (t8, t5, t5))))) -> (t10, (t9, (t2, (t3, (t4, t5))))) -> t ;
1 fac_rec :: __forall [t t1 t2 t3 t4] => (t4 -> t2 -> t3) -> (t, t2, t4) -> (t1, t2) -> t ;
1 fac_rec0 :: __forall [t] => t -> t -> t ;
1 fac_rec1 :: __forall [t t1 t2] => (t, t1, t1) -> (t2, t1) -> t ;
1 fac_rec2 :: __forall [t t1 t2 t3 t4] => (t, (t3, t2), (t1, t2, t2)) -> (t4, (t3, t2)) -> t ;
1 fac_rec3 :: __forall [t t1 t2 t3 t4 t5 t6] => (t, (t5, (t2, t3)), (t1, (t2, t3), (t4, t3, t3))) -> (t6, (t5, (t2, t3))) -> t ;
1 fac_rec4 :: __forall [t t1 t2 t3 t4 t5 t6 t7 t8] => (t, (t7, (t2, (t3, t4))), (t1, (t2, (t3, t4)), (t5, (t3, t4), (t6, t4, t4)))) -> (t8, (t7, (t2, (t3, t4)))) -> t ;
1 g :: __forall [t t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20 t21 t22 t23 t24 t25 t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59 t60 t61 t62 t63 t64 t65 t66 t67 t68 t69 t70 t71 t72 t73 t74 t75 t76 t77 t78 t79 t80 t81 t82 t83 t84 t85 t86 t87 t88 t89 t90 t91 t92 t93 t94 t95 t96 t97 t98 t99 t100 t101 t102 t103 t104 t105 t106 t107 t108 t109 t110 t111 t112 t113 t114 t115 t116 t117 t118 t119 t120 t121 t122 t123 t124 t125 t126 t127 t128 t129 t130 t131 t132 t133 t134 t135 t136 t137 t138 t139 t140 t141 t142 t143 t144 t145 t146 t147 t148 t149 t150 t151 t152 t153 t154 t155 t156 t157 t158 t159 t160 t161 t162 t163 t164 t165 t166 t167 t168 t169 t170 t171 t172 t173 t174 t175 t176 t177 t178 t179 t180 t181 t182 t183 t184 t185 t186 t187 t188 t189 t190 t191 t192 t193 t194 t195 t196 t197 t198 t199 t200 t201 t202 t203 t204 t205 t206 t207 t208 t209 t210 t211 t212 t213 t214 t215 t216 t217 t218 t219 t220 t221 t222 t223 t224 t225 t226 t227 t228 t229 t230 t231 t232 t233 t234 t235 t236 t237 t238 t239 t240 t241 t242 t243 t244 t245 t246 t247 t248 t249 t250 t251 t252 t253 t254 t255 t256 t257 t258 t259 t260 t261 t262 t263 t264 t265 t266 t267 t268 t269 t270 t271 t272 t273 t274 t275 t276 t277 t278 t279 t280 t281 t282 t283 t284 t285 t286 t287 t288 t289 t290 t291 t292 t293 t294 t295 t296 t297 t298 t299 t300 t301 t302 t303 t304 t305 t306 t307 t308 t309 t310 t311 t312 t313 t314 t315 t316 t317 t318 t319 t320 t321 t322 t323 t324 t325 t326 t327 t328 t329 t330 t331 t332 t333 t334 t335 t336 t337 t338 t339 t340 t341 t342 t343 t344 t345 t346 t347 t348 t349 t350 t351 t352 t353 t354 t355 t356 t357 t358 t359 t360 t361 t362 t363 t364 t365 t366 t367 t368 t369 t370 t371 t372 t373 t374 t375 t376 t377 t378 t379 t380 t381 t382 t383 t384 t385 t386 t387 t388 t389 t390 t391 t392 t393 t394 t395 t396 t397 t398 t399 t400 t401 t402 t403 t404 t405 t406 t407 t408 t409 t410 t411 t412 t413 t414 t415 t416 t417 t418 t419 t420 t421 t422 t423 t424 t425 t426 t427 t428 t429 t430 t431 t432 t433 t434 t435 t436 t437 t438 t439 t440 t441 t442 t443 t444 t445 t446 t447 t448 t449 t450 t451 t452 t453 t454 t455 t456 t457 t458 t459 t460 t461 t462 t463 t464 t465 t466 t467 t468 t469 t470 t471 t472 t473 t474 t475 t476 t477 t478 t479 t480 t481 t482 t483 t484 t485 t486 t487 t488 t489 t490 t491 t492 t493 t494 t495 t496 t497 t498 t499 t500 t501 t502 t503 t504 t505 t506 t507 t508 t509 t510 t511 t512 t513 t514 t515] => t -> t1 -> (t, t259, t258) -> (t2, (t260, (t3, (t4, (t5, (t6, (t7, (t8, (t9, t10, t10), (t9, t11, t11)), (t8, (t12, t13, t13), (t12, t14, t14))), (t7, (t15, (t16, t17, t17), (t16, t18, t18)), (t15, (t19, t20, t20), (t19, t21, t21)))), (t6, (t22, (t23, (t24, t25, t25), (t24, t26, t26)), (t23, (t27, t28, t28), (t27, t29, t29))), (t22, (t30, (t31, t32, t32), (t31, t33, t33)), (t30, (t34, t35, t35), (t34, t36, t36))))), (t5, (t37, (t38, (t39, (t40, t41, t41), (t40, t42, t42)), (t39, (t43, t44, t44), (t43, t45, t45))), (t38, (t46, (t47, t48, t48), (t47, t49, t49)), (t46, (t50, t51, t51), (t50, t52, t52)))), (t37, (t53, (t54, (t55, t56, t56), (t55, t57, t57)), (t54, (t58, t59, t59), (t58, t60, t60))), (t53, (t61, (t62, t63, t63), (t62, t64, t64)), (t61, (t65, t66, t66), (t65, t67, t67)))))), (t4, (t68, (t69, (t70, (t71, (t72, t73, t73), (t72, t74, t74)), (t71, (t75, t76, t76), (t75, t77, t77))), (t70, (t78, (t79, t80, t80), (t79, t81, t81)), (t78, (t82, t83, t83), (t82, t84, t84)))), (t69, (t85, (t86, (t87, t88, t88), (t87, t89, t89)), (t86, (t90, t91, t91), (t90, t92, t92))), (t85, (t93, (t94, t95, t95), (t94, t96, t96)), (t93, (t97, t98, t98), (t97, t99, t99))))), (t68, (t100, (t101, (t102, (t103, t104, t104), (t103, t105, t105)), (t102, (t106, t107, t107), (t106, t108, t108))), (t101, (t109, (t110, t111, t111), (t110, t112, t112)), (t109, (t113, t114, t114), (t113, t115, t115)))), (t100, (t116, (t117, (t118, t119, t119), (t118, t120, t120)), (t117, (t121, t122, t122), (t121, t123, t123))), (t116, (t124, (t125, t126, t126), (t125, t127, t127)), (t124, (t128, t129, t129), (t128, t130, t130))))))), (t3, (t131, (t132, (t133, (t134, (t135, (t136, t137, t137), (t136, t138, t138)), (t135, (t139, t140, t140), (t139, t141, t141))), (t134, (t142, (t143, t144, t144), (t143, t145, t145)), (t142, (t146, t147, t147), (t146, t148, t148)))), (t133, (t149, (t150, (t151, t152, t152), (t151, t153, t153)), (t150, (t154, t155, t155), (t154, t156, t156))), (t149, (t157, (t158, t159, t159), (t158, t160, t160)), (t157, (t161, t162, t162), (t161, t163, t163))))), (t132, (t164, (t165, (t166, (t167, t168, t168), (t167, t169, t169)), (t166, (t170, t171, t171), (t170, t172, t172))), (t165, (t173, (t174, t175, t175), (t174, t176, t176)), (t173, (t177, t178, t178), (t177, t179, t179)))), (t164, (t180, (t181, (t182, t183, t183), (t182, t184, t184)), (t181, (t185, t186, t186), (t185, t187, t187))), (t180, (t188, (t189, t190, t190), (t189, t191, t191)), (t188, (t192, t193, t193), (t192, t194, t194)))))), (t131, (t195, (t196, (t197, (t198, (t199, t200, t200), (t199, t201, t201)), (t198, (t202, t203, t203), (t202, t204, t204))), (t197, (t205, (t206, t207, t207), (t206, t208, t208)), (t205, (t209, t210, t210), (t209, t211, t211)))), (t196, (t212, (t213, (t214, t215, t215), (t214, t216, t216)), (t213, (t217, t218, t218), (t217, t219, t219))), (t212, (t220, (t221, t222, t222), (t221, t223, t223)), (t220, (t224, t225, t225), (t224, t226, t226))))), (t195, (t227, (t228, (t229, (t230, t231, t231), (t230, t232, t232)), (t229, (t233, t234, t234), (t233, t235, t235))), (t228, (t236, (t237, t238, t238), (t237, t239, t239)), (t236, (t240, t241, t241), (t240, t242, t242)))), (t227, (t243, (t244, (t245, t246, t246), (t245, t247, t247)), (t244, (t248, t249, t249), (t248, t250, t250))), (t243, (t251, (t252, t253, t253), (t252, t254, t254)), (t251, (t255, t256, t256), (t255, t257, t257)))))))), (t260, (t261, (t262, (t263, (t264, (t265, (t266, (t267, t268, t268), (t267, t269, t269)), (t266, (t270, t271, t271), (t270, t272, t272))), (t265, (t273, (t274, t275, t275), (t274, t276, t276)), (t273, (t277, t278, t278), (t277, t279, t279)))), (t264, (t280, (t281, (t282, t283, t283), (t282, t284, t284)), (t281, (t285, t286, t286), (t285, t287, t287))), (t280, (t288, (t289, t290, t290), (t289, t291, t291)), (t288, (t292, t293, t293), (t292, t294, t294))))), (t263, (t295, (t296, (t297, (t298, t299, t299), (t298, t300, t300)), (t297, (t301, t302, t302), (t301, t303, t303))), (t296, (t304, (t305, t306, t306), (t305, t307, t307)), (t304, (t308, t309, t309), (t308, t310, t310)))), (t295, (t311, (t312, (t313, t314, t314), (t313, t315, t315)), (t312, (t316, t317, t317), (t316, t318, t318))), (t311, (t319, (t320, t321, t321), (t320, t322, t322)), (t319, (t323, t324, t324), (t323, t325, t325)))))), (t262, (t326, (t327, (t328, (t329, (t330, t331, t331), (t330, t332, t332)), (t329, (t333, t334, t334), (t333, t335, t335))), (t328, (t336, (t337, t338, t338), (t337, t339, t339)), (t336, (t340, t341, t341), (t340, t342, t342)))), (t327, (t343, (t344, (t345, t346, t346), (t345, t347, t347)), (t344, (t348, t349, t349), (t348, t350, t350))), (t343, (t351, (t352, t353, t353), (t352, t354, t354)), (t351, (t355, t356, t356), (t355, t357, t357))))), (t326, (t358, (t359, (t360, (t361, t362, t362), (t361, t363, t363)), (t360, (t364, t365, t365), (t364, t366, t366))), (t359, (t367, (t368, t369, t369), (t368, t370, t370)), (t367, (t371, t372, t372), (t371, t373, t373)))), (t358, (t374, (t375, (t376, t377, t377), (t376, t378, t378)), (t375, (t379, t380, t380), (t379, t381, t381))), (t374, (t382, (t383, t384, t384), (t383, t385, t385)), (t382, (t386, t387, t387), (t386, t388, t388))))))), (t261, (t389, (t390, (t391, (t392, (t393, (t394, t395, t395), (t394, t396, t396)), (t393, (t397, t398, t398), (t397, t399, t399))), (t392, (t400, (t401, t402, t402), (t401, t403, t403)), (t400, (t404, t405, t405), (t404, t406, t406)))), (t391, (t407, (t408, (t409, t410, t410), (t409, t411, t411)), (t408, (t412, t413, t413), (t412, t414, t414))), (t407, (t415, (t416, t417, t417), (t416, t418, t418)), (t415, (t419, t420, t420), (t419, t421, t421))))), (t390, (t422, (t423, (t424, (t425, t426, t426), (t425, t427, t427)), (t424, (t428, t429, t429), (t428, t430, t430))), (t423, (t431, (t432, t433, t433), (t432, t434, t434)), (t431, (t435, t436, t436), (t435, t437, t437)))), (t422, (t438, (t439, (t440, t441, t441), (t440, t442, t442)), (t439, (t443, t444, t444), (t443, t445, t445))), (t438, (t446, (t447, t448, t448), (t447, t449, t449)), (t446, (t450, t451, t451), (t450, t452, t452)))))), (t389, (t453, (t454, (t455, (t456, (t457, t458, t458), (t457, t459, t459)), (t456, (t460, t461, t461), (t460, t462, t462))), (t455, (t463, (t464, t465, t465), (t464, t466, t466)), (t463, (t467, t468, t468), (t467, t469, t469)))), (t454, (t470, (t471, (t472, t473, t473), (t472, t474, t474)), (t471, (t475, t476, t476), (t475, t477, t477))), (t470, (t478, (t479, t480, t480), (t479, t481, t481)), (t478, (t482, t483, t483), (t482, t484, t484))))), (t453, (t485, (t486, (t487, (t488, t489, t489), (t488, t490, t490)), (t487, (t491, t492, t492), (t491, t493, t493))), (t486, (t494, (t495, t496, t496), (t495, t497, t497)), (t494, (t498, t499, t499), (t498, t500, t500)))), (t485, (t501, (t502, (t503, t504, t504), (t503, t505, t505)), (t502, (t506, t507, t507), (t506, t508, t508))), (t501, (t509, (t510, t511, t511), (t510, t512, t512)), (t509, (t513, t514, t514), (t513, t515, t515))))))))) -> t2 ;
1 g_rec :: __forall [t t1 t2 t3 t4 t5 t6 t7 t8 t9 t10] => (t -> t5 -> t6 -> t7 -> t8) -> (t4 -> t3 -> t9 -> t10 -> t8) -> t2 -> t -> (t2, t3, t4) -> (t1, t7, t10) -> t1 ;
1 g_rec0 :: __forall [t] => t -> t -> t -> t -> t ;
1 g_rec1 :: __forall [t t1 t2] => t -> t1 -> (t, t1, t1) -> (t2, t1, t1) -> t2 ;
1 g_rec2 :: __forall [t t1 t2 t3 t4 t5 t6] => t -> t1 -> (t, t5, t4) -> (t2, (t6, t3, t3), (t6, t5, t5)) -> t2 ;
1 g_rec3 :: __forall [t t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11] => t -> t1 -> (t, t7, t6) -> (t2, (t9, (t4, t5, t5), (t4, t3, t3)), (t9, (t10, t11, t11), (t10, t8, t8))) -> t2 ;
1 g_rec4 :: __forall [t t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19] => t -> t1 -> (t, t11, t10) -> (t2, (t12, (t3, (t4, t5, t5), (t4, t6, t6)), (t3, (t7, t8, t8), (t7, t9, t9))), (t12, (t13, (t14, t15, t15), (t14, t16, t16)), (t13, (t17, t18, t18), (t17, t19, t19)))) -> t2 ;
1 g_rec5 :: __forall [t t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20 t21 t22 t23 t24 t25 t26 t27 t28 t29 t30 t31 t32 t33 t34 t35] => t -> t1 -> (t, t19, t18) -> (t2, (t20, (t3, (t4, (t5, t6, t6), (t5, t7, t7)), (t4, (t8, t9, t9), (t8, t10, t10))), (t3, (t11, (t12, t13, t13), (t12, t14, t14)), (t11, (t15, t16, t16), (t15, t17, t17)))), (t20, (t21, (t22, (t23, t24, t24), (t23, t25, t25)), (t22, (t26, t27, t27), (t26, t28, t28))), (t21, (t29, (t30, t31, t31), (t30, t32, t32)), (t29, (t33, t34, t34), (t33, t35, t35))))) -> t2 ;
1 g_rec6 :: __forall [t t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20 t21 t22 t23 t24 t25 t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59 t60 t61 t62 t63 t64 t65 t66 t67] => t -> t1 -> (t, t35, t34) -> (t2, (t36, (t3, (t4, (t5, (t6, t7, t7), (t6, t8, t8)), (t5, (t9, t10, t10), (t9, t11, t11))), (t4, (t12, (t13, t14, t14), (t13, t15, t15)), (t12, (t16, t17, t17), (t16, t18, t18)))), (t3, (t19, (t20, (t21, t22, t22), (t21, t23, t23)), (t20, (t24, t25, t25), (t24, t26, t26))), (t19, (t27, (t28, t29, t29), (t28, t30, t30)), (t27, (t31, t32, t32), (t31, t33, t33))))), (t36, (t37, (t38, (t39, (t40, t41, t41), (t40, t42, t42)), (t39, (t43, t44, t44), (t43, t45, t45))), (t38, (t46, (t47, t48, t48), (t47, t49, t49)), (t46, (t50, t51, t51), (t50, t52, t52)))), (t37, (t53, (t54, (t55, t56, t56), (t55, t57, t57)), (t54, (t58, t59, t59), (t58, t60, t60))), (t53, (t61, (t62, t63, t63), (t62, t64, t64)), (t61, (t65, t66, t66), (t65, t67, t67)))))) -> t2 ;
1 g_rec7 :: __forall [t t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20 t21 t22 t23 t24 t25 t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59 t60 t61 t62 t63 t64 t65 t66 t67 t68 t69 t70 t71 t72 t73 t74 t75 t76 t77 t78 t79 t80 t81 t82 t83 t84 t85 t86 t87 t88 t89 t90 t91 t92 t93 t94 t95 t96 t97 t98 t99 t100 t101 t102 t103 t104 t105 t106 t107 t108 t109 t110 t111 t112 t113 t114 t115 t116 t117 t118 t119 t120 t121 t122 t123 t124 t125 t126 t127 t128 t129 t130 t131] => t -> t1 -> (t, t67, t66) -> (t2, (t68, (t3, (t4, (t5, (t6, (t7, t8, t8), (t7, t9, t9)), (t6, (t10, t11, t11), (t10, t12, t12))), (t5, (t13, (t14, t15, t15), (t14, t16, t16)), (t13, (t17, t18, t18), (t17, t19, t19)))), (t4, (t20, (t21, (t22, t23, t23), (t22, t24, t24)), (t21, (t25, t26, t26), (t25, t27, t27))), (t20, (t28, (t29, t30, t30), (t29, t31, t31)), (t28, (t32, t33, t33), (t32, t34, t34))))), (t3, (t35, (t36, (t37, (t38, t39, t39), (t38, t40, t40)), (t37, (t41, t42, t42), (t41, t43, t43))), (t36, (t44, (t45, t46, t46), (t45, t47, t47)), (t44, (t48, t49, t49), (t48, t50, t50)))), (t35, (t51, (t52, (t53, t54, t54), (t53, t55, t55)), (t52, (t56, t57, t57), (t56, t58, t58))), (t51, (t59, (t60, t61, t61), (t60, t62, t62)), (t59, (t63, t64, t64), (t63, t65, t65)))))), (t68, (t69, (t70, (t71, (t72, (t73, t74, t74), (t73, t75, t75)), (t72, (t76, t77, t77), (t76, t78, t78))), (t71, (t79, (t80, t81, t81), (t80, t82, t82)), (t79, (t83, t84, t84), (t83, t85, t85)))), (t70, (t86, (t87, (t88, t89, t89), (t88, t90, t90)), (t87, (t91, t92, t92), (t91, t93, t93))), (t86, (t94, (t95, t96, t96), (t95, t97, t97)), (t94, (t98, t99, t99), (t98, t100, t100))))), (t69, (t101, (t102, (t103, (t104, t105, t105), (t104, t106, t106)), (t103, (t107, t108, t108), (t107, t109, t109))), (t102, (t110, (t111, t112, t112), (t111, t113, t113)), (t110, (t114, t115, t115), (t114, t116, t116)))), (t101, (t117, (t118, (t119, t120, t120), (t119, t121, t121)), (t118, (t122, t123, t123), (t122, t124, t124))), (t117, (t125, (t126, t127, t127), (t126, t128, t128)), (t125, (t129, t130, t130), (t129, t131, t131))))))) -> t2 ;
1 g_rec8 :: __forall [t t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 t16 t17 t18 t19 t20 t21 t22 t23 t24 t25 t26 t27 t28 t29 t30 t31 t32 t33 t34 t35 t36 t37 t38 t39 t40 t41 t42 t43 t44 t45 t46 t47 t48 t49 t50 t51 t52 t53 t54 t55 t56 t57 t58 t59 t60 t61 t62 t63 t64 t65 t66 t67 t68 t69 t70 t71 t72 t73 t74 t75 t76 t77 t78 t79 t80 t81 t82 t83 t84 t85 t86 t87 t88 t89 t90 t91 t92 t93 t94 t95 t96 t97 t98 t99 t100 t101 t102 t103 t104 t105 t106 t107 t108 t109 t110 t111 t112 t113 t114 t115 t116 t117 t118 t119 t120 t121 t122 t123 t124 t125 t126 t127 t128 t129 t130 t131 t132 t133 t134 t135 t136 t137 t138 t139 t140 t141 t142 t143 t144 t145 t146 t147 t148 t149 t150 t151 t152 t153 t154 t155 t156 t157 t158 t159 t160 t161 t162 t163 t164 t165 t166 t167 t168 t169 t170 t171 t172 t173 t174 t175 t176 t177 t178 t179 t180 t181 t182 t183 t184 t185 t186 t187 t188 t189 t190 t191 t192 t193 t194 t195 t196 t197 t198 t199 t200 t201 t202 t203 t204 t205 t206 t207 t208 t209 t210 t211 t212 t213 t214 t215 t216 t217 t218 t219 t220 t221 t222 t223 t224 t225 t226 t227 t228 t229 t230 t231 t232 t233 t234 t235 t236 t237 t238 t239 t240 t241 t242 t243 t244 t245 t246 t247 t248 t249 t250 t251 t252 t253 t254 t255 t256 t257 t258 t259] => t -> t1 -> (t, t131, t130) -> (t2, (t132, (t3, (t4, (t5, (t6, (t7, (t8, t9, t9), (t8, t10, t10)), (t7, (t11, t12, t12), (t11, t13, t13))), (t6, (t14, (t15, t16, t16), (t15, t17, t17)), (t14, (t18, t19, t19), (t18, t20, t20)))), (t5, (t21, (t22, (t23, t24, t24), (t23, t25, t25)), (t22, (t26, t27, t27), (t26, t28, t28))), (t21, (t29, (t30, t31, t31), (t30, t32, t32)), (t29, (t33, t34, t34), (t33, t35, t35))))), (t4, (t36, (t37, (t38, (t39, t40, t40), (t39, t41, t41)), (t38, (t42, t43, t43), (t42, t44, t44))), (t37, (t45, (t46, t47, t47), (t46, t48, t48)), (t45, (t49, t50, t50), (t49, t51, t51)))), (t36, (t52, (t53, (t54, t55, t55), (t54, t56, t56)), (t53, (t57, t58, t58), (t57, t59, t59))), (t52, (t60, (t61, t62, t62), (t61, t63, t63)), (t60, (t64, t65, t65), (t64, t66, t66)))))), (t3, (t67, (t68, (t69, (t70, (t71, t72, t72), (t71, t73, t73)), (t70, (t74, t75, t75), (t74, t76, t76))), (t69, (t77, (t78, t79, t79), (t78, t80, t80)), (t77, (t81, t82, t82), (t81, t83, t83)))), (t68, (t84, (t85, (t86, t87, t87), (t86, t88, t88)), (t85, (t89, t90, t90), (t89, t91, t91))), (t84, (t92, (t93, t94, t94), (t93, t95, t95)), (t92, (t96, t97, t97), (t96, t98, t98))))), (t67, (t99, (t100, (t101, (t102, t103, t103), (t102, t104, t104)), (t101, (t105, t106, t106), (t105, t107, t107))), (t100, (t108, (t109, t110, t110), (t109, t111, t111)), (t108, (t112, t113, t113), (t112, t114, t114)))), (t99, (t115, (t116, (t117, t118, t118), (t117, t119, t119)), (t116, (t120, t121, t121), (t120, t122, t122))), (t115, (t123, (t124, t125, t125), (t124, t126, t126)), (t123, (t127, t128, t128), (t127, t129, t129))))))), (t132, (t133, (t134, (t135, (t136, (t137, (t138, t139, t139), (t138, t140, t140)), (t137, (t141, t142, t142), (t141, t143, t143))), (t136, (t144, (t145, t146, t146), (t145, t147, t147)), (t144, (t148, t149, t149), (t148, t150, t150)))), (t135, (t151, (t152, (t153, t154, t154), (t153, t155, t155)), (t152, (t156, t157, t157), (t156, t158, t158))), (t151, (t159, (t160, t161, t161), (t160, t162, t162)), (t159, (t163, t164, t164), (t163, t165, t165))))), (t134, (t166, (t167, (t168, (t169, t170, t170), (t169, t171, t171)), (t168, (t172, t173, t173), (t172, t174, t174))), (t167, (t175, (t176, t177, t177), (t176, t178, t178)), (t175, (t179, t180, t180), (t179, t181, t181)))), (t166, (t182, (t183, (t184, t185, t185), (t184, t186, t186)), (t183, (t187, t188, t188), (t187, t189, t189))), (t182, (t190, (t191, t192, t192), (t191, t193, t193)), (t190, (t194, t195, t195), (t194, t196, t196)))))), (t133, (t197, (t198, (t199, (t200, (t201, t202, t202), (t201, t203, t203)), (t200, (t204, t205, t205), (t204, t206, t206))), (t199, (t207, (t208, t209, t209), (t208, t210, t210)), (t207, (t211, t212, t212), (t211, t213, t213)))), (t198, (t214, (t215, (t216, t217, t217), (t216, t218, t218)), (t215, (t219, t220, t220), (t219, t221, t221))), (t214, (t222, (t223, t224, t224), (t223, t225, t225)), (t222, (t226, t227, t227), (t226, t228, t228))))), (t197, (t229, (t230, (t231, (t232, t233, t233), (t232, t234, t234)), (t231, (t235, t236, t236), (t235, t237, t237))), (t230, (t238, (t239, t240, t240), (t239, t241, t241)), (t238, (t242, t243, t243), (t242, t244, t244)))), (t229, (t245, (t246, (t247, t248, t248), (t247, t249, t249)), (t246, (t250, t251, t251), (t250, t252, t252))), (t245, (t253, (t254, t255, t255), (t254, t256, t256)), (t253, (t257, t258, t258), (t257, t259, t259)))))))) -> t2 ;
1 head :: __forall [t] => [t] -> t ;
1 one :: __forall [t] => t ;
1 s_1_0 :: __forall [t] => t -> t ;
1 s_2_0 :: __forall [t t1] => (t, t1) -> t ;
1 s_2_1 :: __forall [t t1] => (t, t1) -> t1 ;
1 s_3_0 :: __forall [t t1 t2] => (t, t1, t2) -> t ;
1 s_3_1 :: __forall [t t1 t2] => (t, t1, t2) -> t1 ;
1 s_3_2 :: __forall [t t1 t2] => (t, t1, t2) -> t2 ;
