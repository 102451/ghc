{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface GenSpecEtc where
import Bag(Bag)
import CharSeq(CSeq)
import Class(Class)
import CmdLineOpts(GlobalSwitch)
import E(E)
import ErrUtils(Error(..))
import ErrsTc(UnifyErrContext)
import HsBinds(Bind, Binds, MonoBinds, Sig)
import HsExpr(Expr)
import HsLit(Literal)
import HsPat(TypecheckedPat)
import Id(Id)
import Inst(Inst, InstOrigin, OverloadedLit)
import LIE(LIE)
import Maybes(Labda)
import Name(Name)
import NameTypes(FullName, ShortName)
import PreludePS(_PackedString)
import Pretty(Delay, PprStyle, Pretty(..), PrettyRep)
import SimplEnv(UnfoldingGuidance)
import SplitUniq(SplitUniqSupply)
import SrcLoc(SrcLoc)
import Subst(Subst)
import TcMonad(TcResult)
import TyCon(TyCon)
import TyVar(TyVar)
import UniType(UniType)
import Unique(Unique, UniqueSupply)
data Bag a 
data E 
type Error = PprStyle -> Int -> Bool -> PrettyRep
data Bind a b 
data Binds a b 
data TypecheckedPat 
data Id 
data Inst 
data LIE 
data Name 
data PprStyle 
type Pretty = Int -> Bool -> PrettyRep
data PrettyRep 
data SignatureInfo   = TySigInfo Id [TyVar] [Inst] UniType SrcLoc | ValSpecInfo Name UniType (Labda Name) SrcLoc | ValInlineInfo Name UnfoldingGuidance SrcLoc | ValDeforestInfo Name SrcLoc | ValMagicUnfoldingInfo Name _PackedString SrcLoc
data SrcLoc 
data Subst 
data TcResult a 
data TyVar 
data UniType 
data UniqueSupply 
checkSigTyVars :: [TyVar] -> [TyVar] -> UniType -> UniType -> UnifyErrContext -> (GlobalSwitch -> Bool) -> [UniType] -> Subst -> SplitUniqSupply -> Bag (PprStyle -> Int -> Bool -> PrettyRep) -> SrcLoc -> TcResult [TyVar]
genBinds :: Bool -> E -> Bind Id TypecheckedPat -> LIE -> [(Name, Id)] -> [SignatureInfo] -> (GlobalSwitch -> Bool) -> [UniType] -> Subst -> SplitUniqSupply -> Bag (PprStyle -> Int -> Bool -> PrettyRep) -> SrcLoc -> TcResult (Binds Id TypecheckedPat, LIE, [(Name, Id)])

