{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface TcModule where
import AbsSyn(Module)
import Bag(Bag)
import CE(CE(..))
import CharSeq(CSeq)
import Class(Class)
import CmdLineOpts(GlobalSwitch)
import E(E)
import ErrUtils(Error(..))
import FiniteMap(FiniteMap)
import HsBinds(Bind, Binds, MonoBinds, Sig)
import HsDecls(ClassDecl, DataTypeSig, DefaultDecl, FixityDecl, InstDecl, SpecialisedInstanceSig, TyDecl)
import HsExpr(ArithSeqInfo, Expr, Qual)
import HsImpExp(IE, ImportedInterface)
import HsLit(Literal)
import HsMatches(Match)
import HsPat(InPat, RenamedPat(..), TypecheckedPat)
import HsTypes(PolyType)
import Id(Id)
import Inst(Inst)
import Maybes(Labda)
import Name(Name)
import NameTypes(FullName, ShortName)
import PreludePS(_PackedString)
import Pretty(Delay, PprStyle, Pretty(..), PrettyRep)
import ProtoName(ProtoName)
import SplitUniq(SplitUniqSupply)
import SrcLoc(SrcLoc)
import Subst(Subst)
import TCE(TCE(..))
import TcInstDcls(InstInfo)
import TcMonad(TcResult)
import TyCon(TyCon)
import TyVar(TyVar, TyVarTemplate)
import UniType(UniType)
import UniqFM(UniqFM)
import Unique(Unique)
data Module a b 
data Bag a 
type CE = UniqFM Class
data E 
type Error = PprStyle -> Int -> Bool -> PrettyRep
data Binds a b 
data FixityDecl a 
data Expr a b 
data InPat a 
type RenamedPat = InPat Name
data TypecheckedPat 
data Id 
data Inst 
data Labda a 
data Name 
data PprStyle 
type Pretty = Int -> Bool -> PrettyRep
data PrettyRep 
data ProtoName 
data SrcLoc 
data Subst 
type TCE = UniqFM TyCon
data InstInfo 
data TcResult a 
data UniqFM a 
tcModule :: E -> (ProtoName -> Labda Name, ProtoName -> Labda Name) -> Module Name (InPat Name) -> (GlobalSwitch -> Bool) -> [UniType] -> Subst -> SplitUniqSupply -> Bag (PprStyle -> Int -> Bool -> PrettyRep) -> SrcLoc -> TcResult ((Binds Id TypecheckedPat, Binds Id TypecheckedPat, Binds Id TypecheckedPat, [(Inst, Expr Id TypecheckedPat)]), ([FixityDecl Name], [Id], UniqFM Class, UniqFM TyCon, Bag InstInfo), FiniteMap TyCon [[Labda UniType]], E, PprStyle -> Int -> Bool -> PrettyRep)

