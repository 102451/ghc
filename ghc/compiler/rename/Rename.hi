{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface Rename where
import AbsSyn(Module)
import Bag(Bag)
import CmdLineOpts(GlobalSwitch)
import ErrUtils(Error(..))
import HsBinds(Binds, Sig)
import HsDecls(ClassDecl, DataTypeSig, DefaultDecl, FixityDecl, InstDecl, SpecialisedInstanceSig, TyDecl)
import HsImpExp(IE, ImportedInterface)
import HsLit(Literal)
import HsPat(InPat, ProtoNamePat(..), RenamedPat(..))
import Id(Id)
import Maybes(Labda)
import Name(Name)
import NameTypes(FullName, ShortName)
import PreludePS(_PackedString)
import Pretty(PprStyle, Pretty(..), PrettyRep)
import ProtoName(ProtoName)
import RenameAuxFuns(GlobalNameFun(..), GlobalNameFuns(..), PreludeNameFun(..), PreludeNameFuns(..))
import SplitUniq(SplitUniqSupply)
import SrcLoc(SrcLoc)
import TyCon(TyCon)
import Unique(Unique)
data Module a b 
data Bag a 
data GlobalSwitch 
type Error = PprStyle -> Int -> Bool -> PrettyRep
data InPat a 
type ProtoNamePat = InPat ProtoName
type RenamedPat = InPat Name
data Labda a 
data Name 
data PprStyle 
type Pretty = Int -> Bool -> PrettyRep
data PrettyRep 
data ProtoName 
type GlobalNameFun = ProtoName -> Labda Name
type GlobalNameFuns = (ProtoName -> Labda Name, ProtoName -> Labda Name)
type PreludeNameFun = _PackedString -> Labda Name
type PreludeNameFuns = (_PackedString -> Labda Name, _PackedString -> Labda Name)
data SplitUniqSupply 
renameModule :: (GlobalSwitch -> Bool) -> (_PackedString -> Labda Name, _PackedString -> Labda Name) -> Module ProtoName (InPat ProtoName) -> SplitUniqSupply -> (Module Name (InPat Name), [_PackedString], (ProtoName -> Labda Name, ProtoName -> Labda Name), Bag (PprStyle -> Int -> Bool -> PrettyRep))

