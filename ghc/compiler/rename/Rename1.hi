{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface Rename1 where
import AbsSyn(Module)
import Bag(Bag)
import CharSeq(CSeq)
import CmdLineOpts(GlobalSwitch)
import HsBinds(Binds, Sig)
import HsDecls(ClassDecl, DataTypeSig, DefaultDecl, FixityDecl, InstDecl, SpecialisedInstanceSig, TyDecl)
import HsImpExp(IE, ImportedInterface)
import HsLit(Literal)
import HsPat(InPat, ProtoNamePat(..))
import Id(Id)
import Maybes(Labda)
import Name(Name)
import NameTypes(FullName, ShortName)
import PreludePS(_PackedString)
import Pretty(Delay, PprStyle, Pretty(..), PrettyRep)
import ProtoName(ProtoName)
import RenameAuxFuns(PreludeNameFun(..), PreludeNameFuns(..))
import SrcLoc(SrcLoc)
import TyCon(TyCon)
import Unique(Unique)
data Module a b 
data Bag a 
data InPat a 
type ProtoNamePat = InPat ProtoName
data Labda a 
data Name 
data PprStyle 
type Pretty = Int -> Bool -> PrettyRep
data PrettyRep 
data ProtoName 
type PreludeNameFun = _PackedString -> Labda Name
type PreludeNameFuns = (_PackedString -> Labda Name, _PackedString -> Labda Name)
rnModule1 :: (_PackedString -> Labda Name, _PackedString -> Labda Name) -> Bool -> Module ProtoName (InPat ProtoName) -> _PackedString -> Bag (PprStyle -> Int -> Bool -> PrettyRep) -> ((Module ProtoName (InPat ProtoName), [_PackedString]), Bag (PprStyle -> Int -> Bool -> PrettyRep))

