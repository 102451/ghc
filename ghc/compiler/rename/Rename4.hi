{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface Rename4 where
import AbsSyn(Module)
import Bag(Bag)
import CharSeq(CSeq)
import CmdLineOpts(GlobalSwitch)
import ErrUtils(Error(..))
import FiniteMap(FiniteMap)
import HsBinds(Binds, Sig)
import HsDecls(ClassDecl, DataTypeSig, DefaultDecl, FixityDecl, InstDecl, SpecialisedInstanceSig, TyDecl)
import HsImpExp(IE, ImportedInterface)
import HsLit(Literal)
import HsPat(InPat, ProtoNamePat(..), RenamedPat(..))
import HsPragmas(GenPragmas)
import HsTypes(MonoType, PolyType)
import Id(Id)
import Maybes(Labda)
import Name(Name)
import NameTypes(FullName, ShortName)
import PreludePS(_PackedString)
import Pretty(Delay, PprStyle, Pretty(..), PrettyRep)
import ProtoName(ProtoName)
import RenameAuxFuns(GlobalNameFun(..))
import RenameMonad4(Rn4M(..), TyVarNamesEnv(..), initRn4)
import SplitUniq(SplitUniqSupply)
import SrcLoc(SrcLoc)
import TyCon(TyCon)
import Unique(Unique)
data Module a b 
data Bag a 
type Error = PprStyle -> Int -> Bool -> PrettyRep
data InPat a 
type ProtoNamePat = InPat ProtoName
type RenamedPat = InPat Name
data PolyType a 
data Labda a 
data Name 
data PprStyle 
type Pretty = Int -> Bool -> PrettyRep
data PrettyRep 
data ProtoName 
type GlobalNameFun = ProtoName -> Labda Name
type Rn4M a = (GlobalSwitch -> Bool) -> (ProtoName -> Labda Name, ProtoName -> Labda Name) -> FiniteMap _PackedString Name -> Bag (PprStyle -> Int -> Bool -> PrettyRep) -> SplitUniqSupply -> SrcLoc -> (a, Bag (PprStyle -> Int -> Bool -> PrettyRep))
type TyVarNamesEnv = [(ProtoName, Name)]
data SplitUniqSupply 
data SrcLoc 
initRn4 :: (GlobalSwitch -> Bool) -> (ProtoName -> Labda Name, ProtoName -> Labda Name) -> ((GlobalSwitch -> Bool) -> (ProtoName -> Labda Name, ProtoName -> Labda Name) -> FiniteMap _PackedString Name -> Bag (PprStyle -> Int -> Bool -> PrettyRep) -> SplitUniqSupply -> SrcLoc -> (a, Bag (PprStyle -> Int -> Bool -> PrettyRep))) -> SplitUniqSupply -> (a, Bag (PprStyle -> Int -> Bool -> PrettyRep))
rnGenPragmas4 :: GenPragmas ProtoName -> (GlobalSwitch -> Bool) -> (ProtoName -> Labda Name, ProtoName -> Labda Name) -> FiniteMap _PackedString Name -> Bag (PprStyle -> Int -> Bool -> PrettyRep) -> SplitUniqSupply -> SrcLoc -> (GenPragmas Name, Bag (PprStyle -> Int -> Bool -> PrettyRep))
rnModule4 :: Module ProtoName (InPat ProtoName) -> (GlobalSwitch -> Bool) -> (ProtoName -> Labda Name, ProtoName -> Labda Name) -> FiniteMap _PackedString Name -> Bag (PprStyle -> Int -> Bool -> PrettyRep) -> SplitUniqSupply -> SrcLoc -> (Module Name (InPat Name), Bag (PprStyle -> Int -> Bool -> PrettyRep))
rnPolyType4 :: Bool -> Bool -> [(ProtoName, Name)] -> PolyType ProtoName -> (GlobalSwitch -> Bool) -> (ProtoName -> Labda Name, ProtoName -> Labda Name) -> FiniteMap _PackedString Name -> Bag (PprStyle -> Int -> Bool -> PrettyRep) -> SplitUniqSupply -> SrcLoc -> (PolyType Name, Bag (PprStyle -> Int -> Bool -> PrettyRep))

