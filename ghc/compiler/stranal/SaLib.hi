{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface SaLib where
import BasicLit(BasicLit)
import CoreSyn(CoreAtom, CoreBinding, CoreCaseAlternatives, CoreExpr)
import CostCentre(CostCentre)
import Id(Id)
import IdEnv(IdEnv(..))
import IdInfo(Demand, StrictnessInfo)
import Maybes(Labda)
import Outputable(Outputable)
import PlainCore(PlainCoreExpr(..))
import PrimOps(PrimOp)
import TyVar(TyVar)
import UniType(UniType)
import UniqFM(UniqFM)
import Unique(Unique)
data AbsVal   = AbsTop | AbsBot | AbsProd [AbsVal] | AbsFun [Id] (CoreExpr Id Id) AbsValEnv | AbsApproxFun [Demand]
data AbsValEnv 
type AbsenceEnv = AbsValEnv
data AnalysisKind   = StrAnal | AbsAnal
data CoreExpr a b 
data Id 
type IdEnv a = UniqFM a
data Demand 
type PlainCoreExpr = CoreExpr Id Id
type StrAnalFlags = (Bool, Bool)
type StrictEnv = AbsValEnv
data UniqFM a 
data Unique 
absValFromStrictness :: AnalysisKind -> StrictnessInfo -> AbsVal
addOneToAbsValEnv :: AbsValEnv -> Id -> AbsVal -> AbsValEnv
getStrAnalFlags :: AbsValEnv -> (Bool, Bool)
growAbsValEnvList :: AbsValEnv -> [(Id, AbsVal)] -> AbsValEnv
lookupAbsValEnv :: AbsValEnv -> Id -> Labda AbsVal
nullAbsValEnv :: (Bool, Bool) -> AbsValEnv
instance Outputable AbsVal
instance Text AnalysisKind

