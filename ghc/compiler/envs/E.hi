{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface E where
import CE(CE(..))
import Class(Class)
import Id(Id)
import Maybes(Labda)
import Name(Name)
import NameTypes(FullName, ShortName)
import PreludePS(_PackedString)
import TCE(TCE(..))
import TyCon(TyCon)
import TyVar(TyVar)
import UniqFM(UniqFM)
import Unique(Unique)
type CE = UniqFM Class
data E 
type GVE = [(Name, Id)]
data Id 
type LVE = [(Name, Id)]
data Labda a 
data Name 
type TCE = UniqFM TyCon
data TyVar 
data UniqFM a 
getE_CE :: E -> UniqFM Class
getE_GlobalVals :: E -> [Id]
getE_TCE :: E -> UniqFM TyCon
growE_LVE :: E -> [(Name, Id)] -> E
lookupE_Binder :: E -> Name -> Id
lookupE_ClassOpByKey :: E -> Unique -> _PackedString -> Id
lookupE_Value :: E -> Name -> Id
lookupE_ValueQuietly :: E -> Name -> Labda Id
mkE :: UniqFM TyCon -> UniqFM Class -> E
nullE :: E
nullGVE :: [(Name, Id)]
nullLVE :: [(Name, Id)]
plusE_CE :: E -> UniqFM Class -> E
plusE_GVE :: E -> [(Name, Id)] -> E
plusE_TCE :: E -> UniqFM TyCon -> E
plusGVE :: [a] -> [a] -> [a]
plusLVE :: [a] -> [a] -> [a]
tvOfE :: E -> [TyVar]
unitGVE :: Name -> Id -> [(Name, Id)]

