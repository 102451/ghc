{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface SpecTyFuns where
import Bag(Bag)
import Class(Class)
import Id(Id)
import Maybes(Labda(..))
import PreludePS(_PackedString)
import Pretty(Pretty(..), PrettyRep)
import TyCon(TyCon)
import TyVar(TyVarTemplate)
import UniType(UniType)
type ConstraintVector = [Bool]
data Labda a   = Hamna | Ni a
type Pretty = Int -> Bool -> PrettyRep
data UniType 
argTysMatchSpecTys_error :: [Labda UniType] -> [UniType] -> Labda (Int -> Bool -> PrettyRep)
getIdOverloading :: Id -> ([TyVarTemplate], [(Class, TyVarTemplate)])
isUnboxedSpecialisation :: [Labda UniType] -> Bool
mkConstraintVector :: Id -> [Bool]
mkSpecialisedCon :: Id -> [UniType] -> Id
pprSpecErrs :: _PackedString -> Bag (Id, [Labda UniType]) -> Bag (Id, [Labda UniType]) -> Bag (TyCon, [Labda UniType]) -> Int -> Bool -> PrettyRep
specialiseCallTys :: Bool -> Bool -> Bool -> [Bool] -> [UniType] -> [Labda UniType]
specialiseConstrTys :: [UniType] -> [Labda UniType]

