{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface HsImpExp where
import FiniteMap(FiniteMap)
import HsBinds(Sig)
import HsDecls(ClassDecl, FixityDecl, InstDecl, TyDecl)
import HsPat(InPat)
import Name(Name)
import Outputable(ExportFlag, NamedThing, Outputable)
import PreludePS(_PackedString)
import Pretty(PprStyle, PrettyRep)
import ProtoName(ProtoName)
import SrcLoc(SrcLoc)
data IE   = IEVar _PackedString | IEThingAbs _PackedString | IEThingAll _PackedString | IEConWithCons _PackedString [_PackedString] | IEClsWithOps _PackedString [_PackedString] | IEModuleContents _PackedString
data IfaceImportDecl   = IfaceImportDecl _PackedString [IE] [Renaming] SrcLoc
type ImExportListInfo = (FiniteMap _PackedString ExportFlag, FiniteMap _PackedString ())
data ImportedInterface a b   = ImportAll (Interface a b) [Renaming] | ImportSome (Interface a b) [IE] [Renaming] | ImportButHide (Interface a b) [IE] [Renaming]
data Interface a b   = MkInterface _PackedString [IfaceImportDecl] [FixityDecl a] [TyDecl a] [ClassDecl a b] [InstDecl a b] [Sig a] SrcLoc
type ProtoNameImportedInterface = ImportedInterface ProtoName (InPat ProtoName)
type ProtoNameInterface = Interface ProtoName (InPat ProtoName)
type RenamedImportedInterface = ImportedInterface Name (InPat Name)
type RenamedInterface = Interface Name (InPat Name)
data Renaming   = MkRenaming _PackedString _PackedString
getIEStrings :: [IE] -> (FiniteMap _PackedString ExportFlag, FiniteMap _PackedString ())
getRawIEStrings :: [IE] -> ([(_PackedString, ExportFlag)], [_PackedString])
pprRenamings :: PprStyle -> [Renaming] -> Int -> Bool -> PrettyRep
instance Outputable IE
instance Outputable IfaceImportDecl
instance (NamedThing a, Outputable a, NamedThing b, Outputable b) => Outputable (ImportedInterface a b)
instance (NamedThing a, Outputable a, NamedThing b, Outputable b) => Outputable (Interface a b)
instance Outputable Renaming

