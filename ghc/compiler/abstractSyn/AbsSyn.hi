{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface AbsSyn where
import AbsSynFuns(cmpInstanceTypes, collectBinders, collectMonoBinders, collectMonoBindersAndLocs, collectPatBinders, collectQualBinders, collectTopLevelBinders, collectTypedBinders, collectTypedPatBinders, extractMonoTyNames, getNonPrelOuterTyCon, mkDictApp, mkDictLam, mkTyApp, mkTyLam)
import Bag(Bag)
import BasicLit(BasicLit)
import BinderInfo(BinderInfo)
import CharSeq(CSeq)
import Class(Class, ClassOp)
import CmdLineOpts(GlobalSwitch)
import CoreSyn(CoreAtom, CoreExpr)
import FiniteMap(FiniteMap)
import HsBinds(Bind(..), Binds(..), MonoBinds(..), ProtoNameBind(..), ProtoNameBinds(..), ProtoNameClassOpSig(..), ProtoNameMonoBinds(..), ProtoNameSig(..), RenamedBind(..), RenamedBinds(..), RenamedClassOpSig(..), RenamedMonoBinds(..), RenamedSig(..), Sig(..), TypecheckedBind(..), TypecheckedBinds(..), TypecheckedMonoBinds(..), nullBinds, nullMonoBinds)
import HsCore(UfCostCentre, UfId, UnfoldingCoreAlts, UnfoldingCoreAtom, UnfoldingCoreBinding, UnfoldingCoreExpr, UnfoldingPrimOp)
import HsDecls(ClassDecl(..), ConDecl(..), DataTypeSig(..), DefaultDecl(..), FixityDecl(..), InstDecl(..), ProtoNameClassDecl(..), ProtoNameConDecl(..), ProtoNameDataTypeSig(..), ProtoNameDefaultDecl(..), ProtoNameFixityDecl(..), ProtoNameInstDecl(..), ProtoNameSpecialisedInstanceSig(..), ProtoNameTyDecl(..), RenamedClassDecl(..), RenamedConDecl(..), RenamedDataTypeSig(..), RenamedDefaultDecl(..), RenamedFixityDecl(..), RenamedInstDecl(..), RenamedSpecialisedInstanceSig(..), RenamedTyDecl(..), SpecialisedInstanceSig(..), TyDecl(..), eqConDecls)
import HsExpr(ArithSeqInfo(..), Expr(..), ProtoNameArithSeqInfo(..), ProtoNameExpr(..), ProtoNameQual(..), Qual(..), RenamedArithSeqInfo(..), RenamedExpr(..), RenamedQual(..), TypecheckedArithSeqInfo(..), TypecheckedExpr(..), TypecheckedQual(..))
import HsImpExp(IE(..), IfaceImportDecl(..), ImExportListInfo(..), ImportedInterface(..), Interface(..), ProtoNameImportedInterface(..), ProtoNameInterface(..), RenamedImportedInterface(..), RenamedInterface(..), Renaming(..), getIEStrings, getRawIEStrings)
import HsLit(Literal(..), negLiteral)
import HsMatches(GRHS(..), GRHSsAndBinds(..), Match(..), ProtoNameGRHS(..), ProtoNameGRHSsAndBinds(..), ProtoNameMatch(..), RenamedGRHS(..), RenamedGRHSsAndBinds(..), RenamedMatch(..), TypecheckedGRHS(..), TypecheckedGRHSsAndBinds(..), TypecheckedMatch(..))
import HsPat(InPat(..), ProtoNamePat(..), RenamedPat(..), TypecheckedPat(..), irrefutablePat, isConPat, isLitPat, patsAreAllCons, patsAreAllLits, typeOfPat, unfailablePat, unfailablePats)
import HsPragmas(ClassOpPragmas, ClassPragmas, DataPragmas, GenPragmas, ImpStrictness, ImpUnfolding, InstancePragmas, ProtoNameClassOpPragmas(..), ProtoNameClassPragmas(..), ProtoNameDataPragmas(..), ProtoNameGenPragmas(..), ProtoNameInstancePragmas(..), RenamedClassOpPragmas(..), RenamedClassPragmas(..), RenamedDataPragmas(..), RenamedGenPragmas(..), RenamedInstancePragmas(..), TypePragmas)
import HsTypes(ClassAssertion(..), Context(..), MonoType(..), PolyType(..), ProtoNameContext(..), ProtoNameMonoType(..), ProtoNamePolyType(..), RenamedContext(..), RenamedMonoType(..), RenamedPolyType(..), cmpPolyType, eqMonoType, pprContext)
import Id(DictVar(..), Id)
import IdEnv(IdEnv(..))
import IdInfo(ArgUsage, ArgUsageInfo, ArityInfo, DeforestInfo, Demand, DemandInfo, FBConsum, FBProd, FBType, FBTypeInfo, IdInfo, OptIdInfo(..), SpecEnv, StrictnessInfo, UpdateInfo)
import Inst(Inst)
import Maybes(Labda)
import Name(Name(..))
import NameTypes(FullName, ShortName)
import Outputable(ExportFlag, NamedThing(..), Outputable(..))
import PreludePS(_PackedString)
import PreludeRatio(Ratio(..))
import Pretty(Delay, PprStyle, Pretty(..), PrettyRep)
import PrimKind(PrimKind)
import PrimOps(PrimOp)
import ProtoName(ProtoName)
import RenameAuxFuns(PreludeNameFun(..))
import SimplEnv(UnfoldingGuidance)
import SrcLoc(SrcLoc)
import TyCon(Arity(..), TyCon)
import TyVar(TyVar)
import UniType(TauType(..), UniType)
import UniqFM(UniqFM)
import Unique(Unique)
class OptIdInfo a where
	noInfo :: a
	getInfo :: IdInfo -> a
	addInfo :: IdInfo -> a -> IdInfo
	ppInfo :: PprStyle -> (Id -> Id) -> a -> Int -> Bool -> PrettyRep
class NamedThing a where
	getExportFlag :: a -> ExportFlag
	isLocallyDefined :: a -> Bool
	getOrigName :: a -> (_PackedString, _PackedString)
	getOccurrenceName :: a -> _PackedString
	getInformingModules :: a -> [_PackedString]
	getSrcLoc :: a -> SrcLoc
	getTheUnique :: a -> Unique
	hasType :: a -> Bool
	getType :: a -> UniType
	fromPreludeCore :: a -> Bool
class Outputable a where
	ppr :: PprStyle -> a -> Int -> Bool -> PrettyRep
data Bag a 
data BasicLit 
data BinderInfo 
data Class 
data ClassOp 
data CoreAtom a 
data CoreExpr a b 
data FiniteMap a b 
data Bind a b   = EmptyBind | NonRecBind (MonoBinds a b) | RecBind (MonoBinds a b)
data Binds a b   = EmptyBinds | ThenBinds (Binds a b) (Binds a b) | SingleBind (Bind a b) | BindWith (Bind a b) [Sig a] | AbsBinds [TyVar] [Id] [(Id, Id)] [(Inst, Expr a b)] (Bind a b)
data MonoBinds a b   = EmptyMonoBinds | AndMonoBinds (MonoBinds a b) (MonoBinds a b) | PatMonoBind b (GRHSsAndBinds a b) SrcLoc | VarMonoBind Id (Expr a b) | FunMonoBind a [Match a b] SrcLoc
type ProtoNameBind = Bind ProtoName (InPat ProtoName)
type ProtoNameBinds = Binds ProtoName (InPat ProtoName)
type ProtoNameClassOpSig = Sig ProtoName
type ProtoNameMonoBinds = MonoBinds ProtoName (InPat ProtoName)
type ProtoNameSig = Sig ProtoName
type RenamedBind = Bind Name (InPat Name)
type RenamedBinds = Binds Name (InPat Name)
type RenamedClassOpSig = Sig Name
type RenamedMonoBinds = MonoBinds Name (InPat Name)
type RenamedSig = Sig Name
data Sig a   = Sig a (PolyType a) (GenPragmas a) SrcLoc | ClassOpSig a (PolyType a) (ClassOpPragmas a) SrcLoc | SpecSig a (PolyType a) (Labda a) SrcLoc | InlineSig a UnfoldingGuidance SrcLoc | DeforestSig a SrcLoc | MagicUnfoldingSig a _PackedString SrcLoc
type TypecheckedBind = Bind Id TypecheckedPat
type TypecheckedBinds = Binds Id TypecheckedPat
type TypecheckedMonoBinds = MonoBinds Id TypecheckedPat
data UfCostCentre a 
data UnfoldingCoreAtom a 
data UnfoldingCoreExpr a 
data UnfoldingPrimOp a 
data ClassDecl a b   = ClassDecl [(a, a)] a a [Sig a] (MonoBinds a b) (ClassPragmas a) SrcLoc
data ConDecl a   = ConDecl a [MonoType a] SrcLoc
data DataTypeSig a   = AbstractTypeSig a SrcLoc | SpecDataSig a (MonoType a) SrcLoc
data DefaultDecl a   = DefaultDecl [MonoType a] SrcLoc
data FixityDecl a   = InfixL a Int | InfixR a Int | InfixN a Int
data InstDecl a b   = InstDecl [(a, a)] a (MonoType a) (MonoBinds a b) Bool _PackedString _PackedString [Sig a] (InstancePragmas a) SrcLoc
type ProtoNameClassDecl = ClassDecl ProtoName (InPat ProtoName)
type ProtoNameConDecl = ConDecl ProtoName
type ProtoNameDataTypeSig = DataTypeSig ProtoName
type ProtoNameDefaultDecl = DefaultDecl ProtoName
type ProtoNameFixityDecl = FixityDecl ProtoName
type ProtoNameInstDecl = InstDecl ProtoName (InPat ProtoName)
type ProtoNameSpecialisedInstanceSig = SpecialisedInstanceSig ProtoName
type ProtoNameTyDecl = TyDecl ProtoName
type RenamedClassDecl = ClassDecl Name (InPat Name)
type RenamedConDecl = ConDecl Name
type RenamedDataTypeSig = DataTypeSig Name
type RenamedDefaultDecl = DefaultDecl Name
type RenamedFixityDecl = FixityDecl Name
type RenamedInstDecl = InstDecl Name (InPat Name)
type RenamedSpecialisedInstanceSig = SpecialisedInstanceSig Name
type RenamedTyDecl = TyDecl Name
data SpecialisedInstanceSig a   = InstSpecSig a (MonoType a) SrcLoc
data TyDecl a   = TyData [(a, a)] a [a] [ConDecl a] [a] (DataPragmas a) SrcLoc | TySynonym a [a] (MonoType a) TypePragmas SrcLoc
data ArithSeqInfo a b   = From (Expr a b) | FromThen (Expr a b) (Expr a b) | FromTo (Expr a b) (Expr a b) | FromThenTo (Expr a b) (Expr a b) (Expr a b)
data Expr a b   = Var a | Lit Literal | Lam (Match a b) | App (Expr a b) (Expr a b) | OpApp (Expr a b) (Expr a b) (Expr a b) | SectionL (Expr a b) (Expr a b) | SectionR (Expr a b) (Expr a b) | CCall _PackedString [Expr a b] Bool Bool UniType | SCC _PackedString (Expr a b) | Case (Expr a b) [Match a b] | If (Expr a b) (Expr a b) (Expr a b) | Let (Binds a b) (Expr a b) | ListComp (Expr a b) [Qual a b] | ExplicitList [Expr a b] | ExplicitListOut UniType [Expr a b] | ExplicitTuple [Expr a b] | ExprWithTySig (Expr a b) (PolyType a) | ArithSeqIn (ArithSeqInfo a b) | ArithSeqOut (Expr a b) (ArithSeqInfo a b) | TyLam [TyVar] (Expr a b) | TyApp (Expr a b) [UniType] | DictLam [Id] (Expr a b) | DictApp (Expr a b) [Id] | ClassDictLam [Id] [Id] (Expr a b) | Dictionary [Id] [Id] | SingleDict Id
type ProtoNameArithSeqInfo = ArithSeqInfo ProtoName (InPat ProtoName)
type ProtoNameExpr = Expr ProtoName (InPat ProtoName)
type ProtoNameQual = Qual ProtoName (InPat ProtoName)
data Qual a b   = GeneratorQual b (Expr a b) | FilterQual (Expr a b)
type RenamedArithSeqInfo = ArithSeqInfo Name (InPat Name)
type RenamedExpr = Expr Name (InPat Name)
type RenamedQual = Qual Name (InPat Name)
type TypecheckedArithSeqInfo = ArithSeqInfo Id TypecheckedPat
type TypecheckedExpr = Expr Id TypecheckedPat
type TypecheckedQual = Qual Id TypecheckedPat
data IE   = IEVar _PackedString | IEThingAbs _PackedString | IEThingAll _PackedString | IEConWithCons _PackedString [_PackedString] | IEClsWithOps _PackedString [_PackedString] | IEModuleContents _PackedString
data IfaceImportDecl   = IfaceImportDecl _PackedString [IE] [Renaming] SrcLoc
type ImExportListInfo = (FiniteMap _PackedString ExportFlag, FiniteMap _PackedString ())
data ImportedInterface a b   = ImportAll (Interface a b) [Renaming] | ImportSome (Interface a b) [IE] [Renaming] | ImportButHide (Interface a b) [IE] [Renaming]
data Interface a b   = MkInterface _PackedString [IfaceImportDecl] [FixityDecl a] [TyDecl a] [ClassDecl a b] [InstDecl a b] [Sig a] SrcLoc
type ProtoNameImportedInterface = ImportedInterface ProtoName (InPat ProtoName)
type ProtoNameInterface = Interface ProtoName (InPat ProtoName)
type RenamedImportedInterface = ImportedInterface Name (InPat Name)
type RenamedInterface = Interface Name (InPat Name)
data Renaming   = MkRenaming _PackedString _PackedString
data Literal   = CharLit Char | CharPrimLit Char | StringLit _PackedString | StringPrimLit _PackedString | IntLit Integer | FracLit (Ratio Integer) | LitLitLitIn _PackedString | LitLitLit _PackedString UniType | IntPrimLit Integer | FloatPrimLit (Ratio Integer) | DoublePrimLit (Ratio Integer)
data GRHS a b   = GRHS (Expr a b) (Expr a b) SrcLoc | OtherwiseGRHS (Expr a b) SrcLoc
data GRHSsAndBinds a b   = GRHSsAndBindsIn [GRHS a b] (Binds a b) | GRHSsAndBindsOut [GRHS a b] (Binds a b) UniType
data Match a b   = PatMatch b (Match a b) | GRHSMatch (GRHSsAndBinds a b)
type ProtoNameGRHS = GRHS ProtoName (InPat ProtoName)
type ProtoNameGRHSsAndBinds = GRHSsAndBinds ProtoName (InPat ProtoName)
type ProtoNameMatch = Match ProtoName (InPat ProtoName)
type RenamedGRHS = GRHS Name (InPat Name)
type RenamedGRHSsAndBinds = GRHSsAndBinds Name (InPat Name)
type RenamedMatch = Match Name (InPat Name)
type TypecheckedGRHS = GRHS Id TypecheckedPat
type TypecheckedGRHSsAndBinds = GRHSsAndBinds Id TypecheckedPat
type TypecheckedMatch = Match Id TypecheckedPat
data InPat a   = WildPatIn | VarPatIn a | LitPatIn Literal | LazyPatIn (InPat a) | AsPatIn a (InPat a) | ConPatIn a [InPat a] | ConOpPatIn (InPat a) a (InPat a) | ListPatIn [InPat a] | TuplePatIn [InPat a] | NPlusKPatIn a Literal
type ProtoNamePat = InPat ProtoName
type RenamedPat = InPat Name
data TypecheckedPat   = WildPat UniType | VarPat Id | LazyPat TypecheckedPat | AsPat Id TypecheckedPat | ConPat Id UniType [TypecheckedPat] | ConOpPat TypecheckedPat Id TypecheckedPat UniType | ListPat UniType [TypecheckedPat] | TuplePat [TypecheckedPat] | LitPat Literal UniType | NPat Literal UniType (Expr Id TypecheckedPat) | NPlusKPat Id Literal UniType (Expr Id TypecheckedPat) (Expr Id TypecheckedPat) (Expr Id TypecheckedPat)
data ClassOpPragmas a 
data ClassPragmas a 
data DataPragmas a 
data GenPragmas a 
data InstancePragmas a 
type ProtoNameClassOpPragmas = ClassOpPragmas ProtoName
type ProtoNameClassPragmas = ClassPragmas ProtoName
type ProtoNameDataPragmas = DataPragmas ProtoName
type ProtoNameGenPragmas = GenPragmas ProtoName
type ProtoNameInstancePragmas = InstancePragmas ProtoName
type RenamedClassOpPragmas = ClassOpPragmas Name
type RenamedClassPragmas = ClassPragmas Name
type RenamedDataPragmas = DataPragmas Name
type RenamedGenPragmas = GenPragmas Name
type RenamedInstancePragmas = InstancePragmas Name
data TypePragmas 
type ClassAssertion a = (a, a)
type Context a = [(a, a)]
data MonoType a   = MonoTyVar a | MonoTyCon a [MonoType a] | FunMonoTy (MonoType a) (MonoType a) | ListMonoTy (MonoType a) | TupleMonoTy [PolyType a] | MonoTyVarTemplate a | MonoDict a (MonoType a)
data PolyType a   = UnoverloadedTy (MonoType a) | OverloadedTy [(a, a)] (MonoType a) | ForAllTy [a] (MonoType a)
type ProtoNameContext = [(ProtoName, ProtoName)]
type ProtoNameMonoType = MonoType ProtoName
type ProtoNamePolyType = PolyType ProtoName
type RenamedContext = [(Name, Name)]
type RenamedMonoType = MonoType Name
type RenamedPolyType = PolyType Name
type DictVar = Id
data Id 
type IdEnv a = UniqFM a
data ArgUsage 
data ArgUsageInfo 
data ArityInfo 
data DeforestInfo 
data Demand 
data DemandInfo 
data FBConsum 
data FBProd 
data FBType 
data FBTypeInfo 
data IdInfo 
data Inst 
data Labda a 
data Name   = Short Unique ShortName | WiredInTyCon TyCon | WiredInVal Id | PreludeVal Unique FullName | PreludeTyCon Unique FullName Int Bool | PreludeClass Unique FullName | OtherTyCon Unique FullName Int Bool [Name] | OtherClass Unique FullName [Name] | OtherTopId Unique FullName | ClassOpName Unique Name _PackedString Int | Unbound _PackedString
data FullName 
data ExportFlag 
data Module a b   = Module _PackedString [IE] [ImportedInterface a b] [FixityDecl a] [TyDecl a] [DataTypeSig a] [ClassDecl a b] [InstDecl a b] [SpecialisedInstanceSig a] [DefaultDecl a] (Binds a b) [Sig a] SrcLoc
data PprStyle 
type Pretty = Int -> Bool -> PrettyRep
data PrettyRep 
data PrimKind 
data PrimOp 
data ProtoName 
type PreludeNameFun = _PackedString -> Labda Name
type Arity = Int
type ProtoNameModule = Module ProtoName (InPat ProtoName)
type RenamedModule = Module Name (InPat Name)
data SpecEnv 
data StrictnessInfo 
data ShortName 
data SrcLoc 
data TyCon 
data TyVar 
type TauType = UniType
type TypecheckedModule = Module Id TypecheckedPat
data UpdateInfo 
data UnfoldingGuidance 
data UniType 
data UniqFM a 
data Unique 
cmpInstanceTypes :: MonoType ProtoName -> MonoType ProtoName -> Int#
collectBinders :: Bind a (InPat a) -> [a]
collectMonoBinders :: MonoBinds a (InPat a) -> [a]
collectMonoBindersAndLocs :: MonoBinds a (InPat a) -> [(a, SrcLoc)]
collectPatBinders :: InPat a -> [a]
collectQualBinders :: [Qual Name (InPat Name)] -> [Name]
collectTopLevelBinders :: Binds a (InPat a) -> [a]
collectTypedBinders :: Bind Id TypecheckedPat -> [Id]
collectTypedPatBinders :: TypecheckedPat -> [Id]
extractMonoTyNames :: (a -> a -> Bool) -> MonoType a -> [a]
getNonPrelOuterTyCon :: MonoType ProtoName -> Labda ProtoName
mkDictApp :: Expr Id TypecheckedPat -> [Id] -> Expr Id TypecheckedPat
mkDictLam :: [Id] -> Expr Id TypecheckedPat -> Expr Id TypecheckedPat
mkTyApp :: Expr Id TypecheckedPat -> [UniType] -> Expr Id TypecheckedPat
mkTyLam :: [TyVar] -> Expr Id TypecheckedPat -> Expr Id TypecheckedPat
nullBinds :: Binds a b -> Bool
nullMonoBinds :: MonoBinds a b -> Bool
eqConDecls :: [ConDecl ProtoName] -> [ConDecl ProtoName] -> Bool
getIEStrings :: [IE] -> (FiniteMap _PackedString ExportFlag, FiniteMap _PackedString ())
getRawIEStrings :: [IE] -> ([(_PackedString, ExportFlag)], [_PackedString])
negLiteral :: Literal -> Literal
irrefutablePat :: TypecheckedPat -> Bool
isConPat :: TypecheckedPat -> Bool
isLitPat :: TypecheckedPat -> Bool
patsAreAllCons :: [TypecheckedPat] -> Bool
patsAreAllLits :: [TypecheckedPat] -> Bool
typeOfPat :: TypecheckedPat -> UniType
unfailablePat :: TypecheckedPat -> Bool
unfailablePats :: [TypecheckedPat] -> Bool
cmpPolyType :: (a -> a -> Int#) -> PolyType a -> PolyType a -> Int#
eqMonoType :: MonoType ProtoName -> MonoType ProtoName -> Bool
pprContext :: Outputable a => PprStyle -> [(a, a)] -> Int -> Bool -> PrettyRep
instance Eq BasicLit
instance Eq Class
instance Eq ClassOp
instance Eq Id
instance Eq Demand
instance Eq FBConsum
instance Eq FBProd
instance Eq FBType
instance Eq UpdateInfo
instance Eq Name
instance Eq PrimKind
instance Eq PrimOp
instance Eq TyCon
instance Eq TyVar
instance Eq Unique
instance OptIdInfo ArgUsageInfo
instance OptIdInfo ArityInfo
instance OptIdInfo DeforestInfo
instance OptIdInfo DemandInfo
instance OptIdInfo FBTypeInfo
instance OptIdInfo SpecEnv
instance OptIdInfo StrictnessInfo
instance OptIdInfo UpdateInfo
instance Ord BasicLit
instance Ord Class
instance Ord ClassOp
instance Ord Id
instance Ord Demand
instance Ord UpdateInfo
instance Ord Name
instance Ord PrimKind
instance Ord TyCon
instance Ord TyVar
instance Ord Unique
instance NamedThing Class
instance NamedThing a => NamedThing (InPat a)
instance NamedThing TypecheckedPat
instance NamedThing Id
instance NamedThing Name
instance NamedThing FullName
instance NamedThing ShortName
instance NamedThing ProtoName
instance NamedThing TyCon
instance NamedThing TyVar
instance (Outputable a, Outputable b) => Outputable (a, b)
instance (Outputable a, Outputable b, Outputable c) => Outputable (a, b, c)
instance (NamedThing a, Outputable a, NamedThing b, Outputable b) => Outputable (Module a b)
instance Outputable BasicLit
instance Outputable Bool
instance Outputable Class
instance Outputable ClassOp
instance Outputable a => Outputable (FiniteMap a b)
instance (NamedThing a, Outputable a, NamedThing b, Outputable b) => Outputable (Bind a b)
instance (NamedThing a, Outputable a, NamedThing b, Outputable b) => Outputable (Binds a b)
instance (NamedThing a, Outputable a, NamedThing b, Outputable b) => Outputable (MonoBinds a b)
instance Outputable a => Outputable (Sig a)
instance Outputable a => Outputable (UnfoldingCoreAtom a)
instance Outputable a => Outputable (UnfoldingCoreExpr a)
instance Outputable a => Outputable (UnfoldingPrimOp a)
instance (NamedThing a, Outputable a, NamedThing b, Outputable b) => Outputable (ClassDecl a b)
instance (NamedThing a, Outputable a) => Outputable (ConDecl a)
instance (NamedThing a, Outputable a) => Outputable (DataTypeSig a)
instance (NamedThing a, Outputable a) => Outputable (DefaultDecl a)
instance (NamedThing a, Outputable a) => Outputable (FixityDecl a)
instance (NamedThing a, Outputable a, NamedThing b, Outputable b) => Outputable (InstDecl a b)
instance (NamedThing a, Outputable a) => Outputable (SpecialisedInstanceSig a)
instance (NamedThing a, Outputable a) => Outputable (TyDecl a)
instance (NamedThing a, Outputable a, NamedThing b, Outputable b) => Outputable (ArithSeqInfo a b)
instance (NamedThing a, Outputable a, NamedThing b, Outputable b) => Outputable (Expr a b)
instance (NamedThing a, Outputable a, NamedThing b, Outputable b) => Outputable (Qual a b)
instance Outputable IE
instance Outputable IfaceImportDecl
instance (NamedThing a, Outputable a, NamedThing b, Outputable b) => Outputable (ImportedInterface a b)
instance (NamedThing a, Outputable a, NamedThing b, Outputable b) => Outputable (Interface a b)
instance Outputable Renaming
instance Outputable Literal
instance (NamedThing a, Outputable a, NamedThing b, Outputable b) => Outputable (GRHS a b)
instance (NamedThing a, Outputable a, NamedThing b, Outputable b) => Outputable (GRHSsAndBinds a b)
instance (NamedThing a, Outputable a, NamedThing b, Outputable b) => Outputable (Match a b)
instance Outputable a => Outputable (InPat a)
instance Outputable TypecheckedPat
instance Outputable a => Outputable (ClassOpPragmas a)
instance Outputable a => Outputable (ClassPragmas a)
instance Outputable a => Outputable (GenPragmas a)
instance Outputable a => Outputable (InstancePragmas a)
instance Outputable a => Outputable (MonoType a)
instance Outputable a => Outputable (PolyType a)
instance Outputable Id
instance Outputable Demand
instance Outputable Inst
instance Outputable Name
instance Outputable FullName
instance Outputable ShortName
instance Outputable PrimKind
instance Outputable PrimOp
instance Outputable ProtoName
instance Outputable SrcLoc
instance Outputable TyCon
instance Outputable TyVar
instance Outputable a => Outputable [a]
instance Text Demand
instance Text UpdateInfo
instance Text Unique

