{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface AbsSynFuns where
import HsBinds(Bind, Binds, MonoBinds)
import HsDecls(ClassDecl, FixityDecl, InstDecl)
import HsExpr(Expr, Qual)
import HsImpExp(IE)
import HsPat(InPat, TypecheckedPat)
import HsTypes(MonoType)
import Id(Id)
import Maybes(Labda)
import Name(Name)
import PreludePS(_PackedString)
import ProtoName(ProtoName)
import RenameAuxFuns(PreludeNameFun(..))
import SrcLoc(SrcLoc)
import TyVar(TyVar)
import UniType(UniType)
type PreludeNameFun = _PackedString -> Labda Name
cmpInstanceTypes :: MonoType ProtoName -> MonoType ProtoName -> Int#
collectBinders :: Bind a (InPat a) -> [a]
collectMonoBinders :: MonoBinds a (InPat a) -> [a]
collectMonoBindersAndLocs :: MonoBinds a (InPat a) -> [(a, SrcLoc)]
collectPatBinders :: InPat a -> [a]
collectQualBinders :: [Qual Name (InPat Name)] -> [Name]
collectTopLevelBinders :: Binds a (InPat a) -> [a]
collectTypedBinders :: Bind Id TypecheckedPat -> [Id]
collectTypedPatBinders :: TypecheckedPat -> [Id]
extractMonoTyNames :: (a -> a -> Bool) -> MonoType a -> [a]
getMentionedVars :: (_PackedString -> Labda Name) -> [IE] -> [FixityDecl ProtoName] -> [ClassDecl ProtoName (InPat ProtoName)] -> [InstDecl ProtoName (InPat ProtoName)] -> Binds ProtoName (InPat ProtoName) -> (Bool, [_PackedString])
getNonPrelOuterTyCon :: MonoType ProtoName -> Labda ProtoName
mkDictApp :: Expr Id TypecheckedPat -> [Id] -> Expr Id TypecheckedPat
mkDictLam :: [Id] -> Expr Id TypecheckedPat -> Expr Id TypecheckedPat
mkTyApp :: Expr Id TypecheckedPat -> [UniType] -> Expr Id TypecheckedPat
mkTyLam :: [TyVar] -> Expr Id TypecheckedPat -> Expr Id TypecheckedPat

