{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface MainMonad where
import PreludeArray(_ByteArray)
import SplitUniq(SplitUniqSupply)
import Stdio(_FILE(..), fclose, fopen, fwrite)
infixr 9 `thenMn`
infixr 9 `thenMn_`
type MainIO a = _State _RealWorld -> (a, _State _RealWorld)
data SplitUniqSupply 
data _FILE   = _FILE Addr#
exitMn :: Int -> _State _RealWorld -> ((), _State _RealWorld)
fclose :: _FILE -> _State _RealWorld -> (Int, _State _RealWorld)
fopen :: [Char] -> [Char] -> _State _RealWorld -> (_FILE, _State _RealWorld)
fwrite :: _ByteArray Int -> Int -> Int -> _FILE -> _State _RealWorld -> (Int, _State _RealWorld)
getArgsMn :: _State _RealWorld -> ([[Char]], _State _RealWorld)
getSplitUniqSupplyMn :: Char -> _State _RealWorld -> (SplitUniqSupply, _State _RealWorld)
readMn :: [Char] -> _State _RealWorld -> ([Char], _State _RealWorld)
returnMn :: a -> _State _RealWorld -> (a, _State _RealWorld)
thenMn :: (_State _RealWorld -> (a, _State _RealWorld)) -> (a -> _State _RealWorld -> (b, _State _RealWorld)) -> _State _RealWorld -> (b, _State _RealWorld)
thenMn_ :: (_State _RealWorld -> (a, _State _RealWorld)) -> (_State _RealWorld -> (b, _State _RealWorld)) -> _State _RealWorld -> (b, _State _RealWorld)
writeMn :: [Char] -> [Char] -> _State _RealWorld -> ((), _State _RealWorld)
instance Eq _FILE
instance _CCallable _FILE
instance _CReturnable _FILE

