Renamer stats: 6 interfaces read
	       4 class decls imported, out of 17 read
	       0 data decls imported (of which 0 abstractly), out of 9 read
	       0 newtype decls imported (of which 0 abstractly), out of 0 read
	       1 type synonym decls imported, out of 5 read
	       43 value signatures imported, out of 1157 read
	       31 instance decls imported, out of 166 read


================================================================================
Renamer:
module Test where
PrelNum.$d35{-rNn,p-} ::
    {PrelBase.Eq{-23,p-} PrelBase.Integer{-3h,p-}}
PrelNum.$d33{-rNl,p-} ::
    {PrelBase.Num{-2c,p-} PrelBase.Integer{-3h,p-}}
PrelNum.$d29{-rNg,p-} ::
    {PrelBase.Show{-2i,p-} PrelBase.Integer{-3h,p-}}
PrelNum.$d18{-rN4,p-} ::
    {PrelBase.Eq{-23,p-} PrelBase.Double{-3a,p-}}
PrelNum.$d16{-rN2,p-} ::
    {PrelBase.Num{-2c,p-} PrelBase.Double{-3a,p-}}
PrelNum.$d10{-rMW,p-} ::
    {PrelBase.Show{-2i,p-} PrelBase.Double{-3a,p-}}
PrelTup.$d9{-rKy,p-} ::
    _forall_
    [a_rWB b_rWC]
    {PrelBase.Eq{-23,p-} a_rWB, PrelBase.Eq{-23,p-} b_rWC}
    =>
    {PrelBase.Eq{-23,p-} (PrelTup.(,){-42,p-} a_rWB b_rWC)}
PrelTup.$d4{-rKg,p-} ::
    _forall_
    [a_rWy b_rWz]
    {PrelBase.Show{-2i,p-} a_rWy, PrelBase.Show{-2i,p-} b_rWz}
    =>
    {PrelBase.Show{-2i,p-} (a_rWy, b_rWz)}
PrelTup.$d2{-rJU,p-} ::
    _forall_
    [a_rWt b_rWu c_rWv d_rWw]
    {PrelBase.Show{-2i,p-} a_rWt, PrelBase.Show{-2i,p-} b_rWu, PrelBase.Show{-2i,p-} c_rWv, PrelBase.Show{-2i,p-} d_rWw}
    =>
    {PrelBase.Show{-2i,p-} (a_rWt, b_rWu, c_rWv, d_rWw)}
PrelTup.$d15{-rJP,p-} ::
    _forall_
    [a_rWo b_rWp c_rWq d_rWr]
    =>
    {PrelBase.Eval{-24,p-} (PrelTup.(,,,){-44,p-} a_rWo b_rWp c_rWq d_rWr)}
PrelTup.$d13{-rJN,p-} ::
    _forall_
    [a_rWl b_rWm]
    =>
    {PrelBase.Eval{-24,p-} (PrelTup.(,){-42,p-} a_rWl b_rWm)}
PrelTup.$d11{-rJL,p-} ::
    _forall_
    [a_rWg b_rWh c_rWi d_rWj]
    {PrelBase.Eq{-23,p-} a_rWg, PrelBase.Eq{-23,p-} b_rWh, PrelBase.Eq{-23,p-} c_rWi, PrelBase.Eq{-23,p-} d_rWj}
    =>
    {PrelBase.Eq{-23,p-} (PrelTup.(,,,){-44,p-} a_rWg b_rWh c_rWi d_rWj)}
PrelBase.$d8{-rc1,p-} ::
    {PrelBase.Show{-2i,p-} PrelBase.Char{-38,p-}}
PrelBase.$d7{-rc0,p-} ::
    {PrelBase.Eq{-23,p-} PrelBase.Int{-3g,p-}}
PrelBase.$d54{-rbV,p-} ::
    {PrelBase.Show{-2i,p-} PrelBase.Bool{-34,p-}}
PrelBase.$d46{-rbM,p-} ::
    {PrelBase.Eval{-24,p-} PrelBase.(){-40,p-}}
PrelBase.$d44{-rbK,p-} ::
    _forall_ [a_rWe] => {PrelBase.Eval{-24,p-} [a_rWe]}
PrelBase.$d42{-rbI,p-} ::
    {PrelBase.Eval{-24,p-} PrelBase.Integer{-3h,p-}}
PrelBase.$d41{-rbH,p-} ::
    {PrelBase.Eval{-24,p-} PrelBase.Int{-3g,p-}}
PrelBase.$d39{-rbE,p-} ::
    {PrelBase.Eval{-24,p-} PrelBase.Double{-3a,p-}}
PrelBase.$d38{-rbD,p-} ::
    {PrelBase.Eval{-24,p-} PrelBase.Char{-38,p-}}
PrelBase.$d37{-rbC,p-} ::
    {PrelBase.Eval{-24,p-} PrelBase.Bool{-34,p-}}
PrelBase.$d33{-rby,p-} ::
    {PrelBase.Eq{-23,p-} PrelBase.Char{-38,p-}}
PrelBase.$d32{-rbx,p-} ::
    {PrelBase.Eq{-23,p-} PrelBase.Bool{-34,p-}}
PrelBase.$d3{-rbu,p-} ::
    {PrelBase.Num{-2c,p-} PrelBase.Int{-3g,p-}}
PrelBase.$d27{-rbr,p-} ::
    _forall_
    [a_rWc]
    {PrelBase.Eq{-23,p-} a_rWc}
    =>
    {PrelBase.Eq{-23,p-} [a_rWc]}
PrelBase.$d21{-rbl,p-} ::
    _forall_
    [a_rWa]
    {PrelBase.Show{-2i,p-} a_rWa}
    =>
    {PrelBase.Show{-2i,p-} [a_rWa]}
PrelBase.$d2{-rbj,p-} ::
    {PrelBase.Show{-2i,p-} PrelBase.Int{-3g,p-}}
PrelBase.$d15{-rbe,p-} ::
    {PrelBase.Eq{-23,p-} PrelBase.(){-40,p-}}
PrelBase.$d11{-rba,p-} ::
    {PrelBase.Show{-2i,p-} PrelBase.(){-40,p-}}
PrelBase.$d1{-rb8,p-} ::
    _forall_ [a_rW7 b_rW8] => {PrelBase.Show{-2i,p-} (a_rW7 -> b_rW8)}
instance {PrelBase.Eq{-23,p-} PrelBase.Integer{-3h,p-}}
instance {PrelBase.Num{-2c,p-} PrelBase.Integer{-3h,p-}}
instance {PrelBase.Show{-2i,p-} PrelBase.Integer{-3h,p-}}
instance {PrelBase.Eq{-23,p-} PrelBase.Double{-3a,p-}}
instance {PrelBase.Num{-2c,p-} PrelBase.Double{-3a,p-}}
instance {PrelBase.Show{-2i,p-} PrelBase.Double{-3a,p-}}
instance _forall_
	 [a_rJa b_rJb]
	 {PrelBase.Eq{-23,p-} a_rJa, PrelBase.Eq{-23,p-} b_rJb}
	 =>
	 {PrelBase.Eq{-23,p-} (PrelTup.(,){-42,p-} a_rJa b_rJb)}
instance _forall_
	 [a_rJd b_rJe]
	 {PrelBase.Show{-2i,p-} a_rJd, PrelBase.Show{-2i,p-} b_rJe}
	 =>
	 {PrelBase.Show{-2i,p-} (a_rJd, b_rJe)}
instance _forall_
	 [a_rJg b_rJh c_rJi d_rJj]
	 {PrelBase.Show{-2i,p-} a_rJg, PrelBase.Show{-2i,p-} b_rJh, PrelBase.Show{-2i,p-} c_rJi, PrelBase.Show{-2i,p-} d_rJj}
	 =>
	 {PrelBase.Show{-2i,p-} (a_rJg, b_rJh, c_rJi, d_rJj)}
instance _forall_
	 [a_rJl b_rJm c_rJn d_rJo]
	 =>
	 {PrelBase.Eval{-24,p-} (PrelTup.(,,,){-44,p-} a_rJl b_rJm c_rJn d_rJo)}
instance _forall_
	 [a_rJq b_rJr]
	 =>
	 {PrelBase.Eval{-24,p-} (PrelTup.(,){-42,p-} a_rJq b_rJr)}
instance _forall_
	 [a_rJt b_rJu c_rJv d_rJw]
	 {PrelBase.Eq{-23,p-} a_rJt, PrelBase.Eq{-23,p-} b_rJu, PrelBase.Eq{-23,p-} c_rJv, PrelBase.Eq{-23,p-} d_rJw}
	 =>
	 {PrelBase.Eq{-23,p-} (PrelTup.(,,,){-44,p-} a_rJt b_rJu c_rJv d_rJw)}
instance {PrelBase.Show{-2i,p-} PrelBase.Char{-38,p-}}
instance {PrelBase.Eq{-23,p-} PrelBase.Int{-3g,p-}}
instance {PrelBase.Show{-2i,p-} PrelBase.Bool{-34,p-}}
instance {PrelBase.Eval{-24,p-} PrelBase.(){-40,p-}}
instance _forall_ [a_rJy] => {PrelBase.Eval{-24,p-} [a_rJy]}
instance {PrelBase.Eval{-24,p-} PrelBase.Integer{-3h,p-}}
instance {PrelBase.Eval{-24,p-} PrelBase.Int{-3g,p-}}
instance {PrelBase.Eval{-24,p-} PrelBase.Double{-3a,p-}}
instance {PrelBase.Eval{-24,p-} PrelBase.Char{-38,p-}}
instance {PrelBase.Eval{-24,p-} PrelBase.Bool{-34,p-}}
instance {PrelBase.Eq{-23,p-} PrelBase.Char{-38,p-}}
instance {PrelBase.Eq{-23,p-} PrelBase.Bool{-34,p-}}
instance {PrelBase.Num{-2c,p-} PrelBase.Int{-3g,p-}}
instance _forall_
	 [a_rJA]
	 {PrelBase.Eq{-23,p-} a_rJA}
	 =>
	 {PrelBase.Eq{-23,p-} [a_rJA]}
instance _forall_
	 [a_rJC]
	 {PrelBase.Show{-2i,p-} a_rJC}
	 =>
	 {PrelBase.Show{-2i,p-} [a_rJC]}
instance {PrelBase.Show{-2i,p-} PrelBase.Int{-3g,p-}}
instance {PrelBase.Eq{-23,p-} PrelBase.(){-40,p-}}
instance {PrelBase.Show{-2i,p-} PrelBase.(){-40,p-}}
instance _forall_
	 [a_rJE b_rJF]
	 =>
	 {PrelBase.Show{-2i,p-} (a_rJE -> b_rJF)}
PrelBase.$m=={-rca,p-} ::
    _forall_
    [a_rj4]
    {PrelBase.Eq{-23,p-} a_rj4}
    =>
    a_rj4 -> a_rj4 -> PrelBase.Bool{-34,p-}
PrelBase.$m/={-rc7,p-} ::
    _forall_
    [a_rj2]
    {PrelBase.Eq{-23,p-} a_rj2}
    =>
    a_rj2 -> a_rj2 -> PrelBase.Bool{-34,p-}
class PrelBase.Eq{-23,p-} rlg_rj0 where {
    == ::
	rlg_rj0 -> rlg_rj0 -> PrelBase.Bool{-34,p-};
    /= ::
	rlg_rj0 -> rlg_rj0 -> PrelBase.Bool{-34,p-};
    }
PrelBase.$mshowsPrec{-rcw,p-} ::
    _forall_
    [a_riY]
    {PrelBase.Show{-2i,p-} a_riY}
    =>
    PrelBase.Int{-3g,p-}
    -> a_riY -> PrelBase.String{-rdg,p-} -> PrelBase.String{-rdg,p-}
type PrelBase.String{-rdg,p-} =
    [PrelBase.Char{-38,p-}]
PrelBase.$mshowList{-rcv,p-} ::
    _forall_
    [a_riV]
    {PrelBase.Show{-2i,p-} a_riV}
    =>
    [a_riV] -> PrelBase.String{-rdg,p-} -> PrelBase.String{-rdg,p-}
class PrelBase.Show{-2i,p-} riq_riT where {
    showsPrec ::
	PrelBase.Int{-3g,p-}
	-> riq_riT -> PrelBase.String{-rdg,p-} -> PrelBase.String{-rdg,p-};
    showList ::
	[riq_riT] -> PrelBase.String{-rdg,p-} -> PrelBase.String{-rdg,p-};
    }
PrelBase.$m+{-rc4,p-} ::
    _forall_
    [a_riR]
    {PrelBase.Num{-2c,p-} a_riR}
    =>
    a_riR -> a_riR -> a_riR
PrelBase.$m-{-rc6,p-} ::
    _forall_
    [a_riP]
    {PrelBase.Num{-2c,p-} a_riP}
    =>
    a_riP -> a_riP -> a_riP
PrelBase.$m*{-rc3,p-} ::
    _forall_
    [a_riN]
    {PrelBase.Num{-2c,p-} a_riN}
    =>
    a_riN -> a_riN -> a_riN
PrelBase.$mnegate{-rct,p-} ::
    _forall_ [a_riL] {PrelBase.Num{-2c,p-} a_riL} => a_riL -> a_riL
PrelBase.$mabs{-rcf,p-} ::
    _forall_ [a_riJ] {PrelBase.Num{-2c,p-} a_riJ} => a_riJ -> a_riJ
PrelBase.$msignum{-rcx,p-} ::
    _forall_ [a_riH] {PrelBase.Num{-2c,p-} a_riH} => a_riH -> a_riH
PrelBase.$mfromInteger{-rcn,p-} ::
    _forall_
    [a_riF]
    {PrelBase.Num{-2c,p-} a_riF}
    =>
    PrelBase.Integer{-3h,p-} -> a_riF
PrelBase.$mfromInt{-rcm,p-} ::
    _forall_
    [a_riD]
    {PrelBase.Num{-2c,p-} a_riD}
    =>
    PrelBase.Int{-3g,p-} -> a_riD
class {PrelBase.Eq{-23,p-} riC_riB, PrelBase.Show{-2i,p-} riC_riB, PrelBase.Eval{-24,p-} riC_riB} => PrelBase.Num{-2c,p-} riC_riB where {
    + ::
	riC_riB -> riC_riB -> riC_riB;
    - ::
	riC_riB -> riC_riB -> riC_riB;
    * ::
	riC_riB -> riC_riB -> riC_riB;
    negate ::
	riC_riB -> riC_riB;
    abs ::
	riC_riB -> riC_riB;
    signum ::
	riC_riB -> riC_riB;
    fromInteger ::
	PrelBase.Integer{-3h,p-} -> riC_riB;
    fromInt ::
	PrelBase.Int{-3g,p-} -> riC_riB;
    }
class PrelBase.Eval{-24,p-} rk6_riz
{- rec -}
((i1{-r3z,x-}@((i2{-r3y,x-}@((i3{-r3x,x-}@i{-r3w,x-}))))), 1)
    =   j{-r3u,x-}
	    1 1
(Foo{-r3F,x-} j{-r3u,x-} 1 2)
    =   (k{-r3s,x-}, 1, 1, 2)
(~~~~k{-r3s,x-}, 1, 2, 3)
    =   i{-r3w,x-}
	    3
{- rec -}
((f1{-r3D,x-}@((f2{-r3C,x-}@((f3{-r3B,x-}@f{-r3A,x-}))))), 1)
    =   g{-r3v,x-}
	    1 1
(Foo{-r3F,x-} g{-r3v,x-} 1 2)
    =   (h{-r3t,x-}, 1, 1, 2)
(~~~~h{-r3t,x-}, 1, 2, 3)
    =   f{-r3A,x-}
	    3
{- rec -}
a{-r3E,x-}
    =   a{-r3E,x-}
data Foo{-r3G,x-} a_r3r =
    Foo{-r3F,x-} a_r3r PrelBase.Int{-3g,i-} PrelBase.Int{-3g,i-}
 
rn007.hs:19: Couldn't match the type
		 `Foo' against `PrelTup.(,,,) t{-a104-} t{-a105-} t{-a106-}'
    Expected: `Foo (t{-aYy-} -> t{-aYE-} -> (t{-aYh-}, t{-aYt-}))'
    Inferred: `(t{-a104-}, t{-a105-}, t{-a106-}, t{-a107-})'
    In a pattern binding:
	(`Foo' `j' 1 2)
	    =   `(k, 1, 1, 2)'
 
rn007.hs:18: Couldn't match the type
		 `Foo' against `PrelTup.(,,,) t{-a108-} t{-a109-} t{-a10a-}'
    Expected: `Foo (t{-aZr-} -> t{-aZx-} -> (t{-aZa-}, t{-aZm-}))'
    Inferred: `(t{-a108-}, t{-a109-}, t{-a10a-}, t{-a10b-})'
    In a pattern binding:
	(`Foo' `g' 1 2)
	    =   `(h, 1, 1, 2)'


Compilation had errors
