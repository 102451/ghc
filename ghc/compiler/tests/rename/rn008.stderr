Renamer stats: 6 interfaces read
	       4 class decls imported, out of 17 read
	       0 data decls imported (of which 0 abstractly), out of 9 read
	       0 newtype decls imported (of which 0 abstractly), out of 0 read
	       1 type synonym decls imported, out of 5 read
	       43 value signatures imported, out of 1157 read
	       31 instance decls imported, out of 166 read


================================================================================
Renamer:
module Test where
PrelNum.$d35{-rNl,p-} ::
    {PrelBase.Eq{-23,p-} PrelBase.Integer{-3h,p-}}
PrelNum.$d33{-rNj,p-} ::
    {PrelBase.Num{-2c,p-} PrelBase.Integer{-3h,p-}}
PrelNum.$d29{-rNe,p-} ::
    {PrelBase.Show{-2i,p-} PrelBase.Integer{-3h,p-}}
PrelNum.$d18{-rN2,p-} ::
    {PrelBase.Eq{-23,p-} PrelBase.Double{-3a,p-}}
PrelNum.$d16{-rN0,p-} ::
    {PrelBase.Num{-2c,p-} PrelBase.Double{-3a,p-}}
PrelNum.$d10{-rMU,p-} ::
    {PrelBase.Show{-2i,p-} PrelBase.Double{-3a,p-}}
PrelTup.$d9{-rKw,p-} ::
    _forall_
    [a_rWz b_rWA]
    {PrelBase.Eq{-23,p-} a_rWz, PrelBase.Eq{-23,p-} b_rWA}
    =>
    {PrelBase.Eq{-23,p-} (PrelTup.(,){-42,p-} a_rWz b_rWA)}
PrelTup.$d4{-rKe,p-} ::
    _forall_
    [a_rWw b_rWx]
    {PrelBase.Show{-2i,p-} a_rWw, PrelBase.Show{-2i,p-} b_rWx}
    =>
    {PrelBase.Show{-2i,p-} (a_rWw, b_rWx)}
PrelTup.$d2{-rJS,p-} ::
    _forall_
    [a_rWr b_rWs c_rWt d_rWu]
    {PrelBase.Show{-2i,p-} a_rWr, PrelBase.Show{-2i,p-} b_rWs, PrelBase.Show{-2i,p-} c_rWt, PrelBase.Show{-2i,p-} d_rWu}
    =>
    {PrelBase.Show{-2i,p-} (a_rWr, b_rWs, c_rWt, d_rWu)}
PrelTup.$d15{-rJN,p-} ::
    _forall_
    [a_rWm b_rWn c_rWo d_rWp]
    =>
    {PrelBase.Eval{-24,p-} (PrelTup.(,,,){-44,p-} a_rWm b_rWn c_rWo d_rWp)}
PrelTup.$d13{-rJL,p-} ::
    _forall_
    [a_rWj b_rWk]
    =>
    {PrelBase.Eval{-24,p-} (PrelTup.(,){-42,p-} a_rWj b_rWk)}
PrelTup.$d11{-rJJ,p-} ::
    _forall_
    [a_rWe b_rWf c_rWg d_rWh]
    {PrelBase.Eq{-23,p-} a_rWe, PrelBase.Eq{-23,p-} b_rWf, PrelBase.Eq{-23,p-} c_rWg, PrelBase.Eq{-23,p-} d_rWh}
    =>
    {PrelBase.Eq{-23,p-} (PrelTup.(,,,){-44,p-} a_rWe b_rWf c_rWg d_rWh)}
PrelBase.$d8{-rbZ,p-} ::
    {PrelBase.Show{-2i,p-} PrelBase.Char{-38,p-}}
PrelBase.$d7{-rbY,p-} ::
    {PrelBase.Eq{-23,p-} PrelBase.Int{-3g,p-}}
PrelBase.$d54{-rbT,p-} ::
    {PrelBase.Show{-2i,p-} PrelBase.Bool{-34,p-}}
PrelBase.$d46{-rbK,p-} ::
    {PrelBase.Eval{-24,p-} PrelBase.(){-40,p-}}
PrelBase.$d44{-rbI,p-} ::
    _forall_ [a_rWc] => {PrelBase.Eval{-24,p-} [a_rWc]}
PrelBase.$d42{-rbG,p-} ::
    {PrelBase.Eval{-24,p-} PrelBase.Integer{-3h,p-}}
PrelBase.$d41{-rbF,p-} ::
    {PrelBase.Eval{-24,p-} PrelBase.Int{-3g,p-}}
PrelBase.$d39{-rbC,p-} ::
    {PrelBase.Eval{-24,p-} PrelBase.Double{-3a,p-}}
PrelBase.$d38{-rbB,p-} ::
    {PrelBase.Eval{-24,p-} PrelBase.Char{-38,p-}}
PrelBase.$d37{-rbA,p-} ::
    {PrelBase.Eval{-24,p-} PrelBase.Bool{-34,p-}}
PrelBase.$d33{-rbw,p-} ::
    {PrelBase.Eq{-23,p-} PrelBase.Char{-38,p-}}
PrelBase.$d32{-rbv,p-} ::
    {PrelBase.Eq{-23,p-} PrelBase.Bool{-34,p-}}
PrelBase.$d3{-rbs,p-} ::
    {PrelBase.Num{-2c,p-} PrelBase.Int{-3g,p-}}
PrelBase.$d27{-rbp,p-} ::
    _forall_
    [a_rWa]
    {PrelBase.Eq{-23,p-} a_rWa}
    =>
    {PrelBase.Eq{-23,p-} [a_rWa]}
PrelBase.$d21{-rbj,p-} ::
    _forall_
    [a_rW8]
    {PrelBase.Show{-2i,p-} a_rW8}
    =>
    {PrelBase.Show{-2i,p-} [a_rW8]}
PrelBase.$d2{-rbh,p-} ::
    {PrelBase.Show{-2i,p-} PrelBase.Int{-3g,p-}}
PrelBase.$d15{-rbc,p-} ::
    {PrelBase.Eq{-23,p-} PrelBase.(){-40,p-}}
PrelBase.$d11{-rb8,p-} ::
    {PrelBase.Show{-2i,p-} PrelBase.(){-40,p-}}
PrelBase.$d1{-rb6,p-} ::
    _forall_ [a_rW5 b_rW6] => {PrelBase.Show{-2i,p-} (a_rW5 -> b_rW6)}
instance {PrelBase.Eq{-23,p-} PrelBase.Integer{-3h,p-}}
instance {PrelBase.Num{-2c,p-} PrelBase.Integer{-3h,p-}}
instance {PrelBase.Show{-2i,p-} PrelBase.Integer{-3h,p-}}
instance {PrelBase.Eq{-23,p-} PrelBase.Double{-3a,p-}}
instance {PrelBase.Num{-2c,p-} PrelBase.Double{-3a,p-}}
instance {PrelBase.Show{-2i,p-} PrelBase.Double{-3a,p-}}
instance _forall_
	 [a_rJ8 b_rJ9]
	 {PrelBase.Eq{-23,p-} a_rJ8, PrelBase.Eq{-23,p-} b_rJ9}
	 =>
	 {PrelBase.Eq{-23,p-} (PrelTup.(,){-42,p-} a_rJ8 b_rJ9)}
instance _forall_
	 [a_rJb b_rJc]
	 {PrelBase.Show{-2i,p-} a_rJb, PrelBase.Show{-2i,p-} b_rJc}
	 =>
	 {PrelBase.Show{-2i,p-} (a_rJb, b_rJc)}
instance _forall_
	 [a_rJe b_rJf c_rJg d_rJh]
	 {PrelBase.Show{-2i,p-} a_rJe, PrelBase.Show{-2i,p-} b_rJf, PrelBase.Show{-2i,p-} c_rJg, PrelBase.Show{-2i,p-} d_rJh}
	 =>
	 {PrelBase.Show{-2i,p-} (a_rJe, b_rJf, c_rJg, d_rJh)}
instance _forall_
	 [a_rJj b_rJk c_rJl d_rJm]
	 =>
	 {PrelBase.Eval{-24,p-} (PrelTup.(,,,){-44,p-} a_rJj b_rJk c_rJl d_rJm)}
instance _forall_
	 [a_rJo b_rJp]
	 =>
	 {PrelBase.Eval{-24,p-} (PrelTup.(,){-42,p-} a_rJo b_rJp)}
instance _forall_
	 [a_rJr b_rJs c_rJt d_rJu]
	 {PrelBase.Eq{-23,p-} a_rJr, PrelBase.Eq{-23,p-} b_rJs, PrelBase.Eq{-23,p-} c_rJt, PrelBase.Eq{-23,p-} d_rJu}
	 =>
	 {PrelBase.Eq{-23,p-} (PrelTup.(,,,){-44,p-} a_rJr b_rJs c_rJt d_rJu)}
instance {PrelBase.Show{-2i,p-} PrelBase.Char{-38,p-}}
instance {PrelBase.Eq{-23,p-} PrelBase.Int{-3g,p-}}
instance {PrelBase.Show{-2i,p-} PrelBase.Bool{-34,p-}}
instance {PrelBase.Eval{-24,p-} PrelBase.(){-40,p-}}
instance _forall_ [a_rJw] => {PrelBase.Eval{-24,p-} [a_rJw]}
instance {PrelBase.Eval{-24,p-} PrelBase.Integer{-3h,p-}}
instance {PrelBase.Eval{-24,p-} PrelBase.Int{-3g,p-}}
instance {PrelBase.Eval{-24,p-} PrelBase.Double{-3a,p-}}
instance {PrelBase.Eval{-24,p-} PrelBase.Char{-38,p-}}
instance {PrelBase.Eval{-24,p-} PrelBase.Bool{-34,p-}}
instance {PrelBase.Eq{-23,p-} PrelBase.Char{-38,p-}}
instance {PrelBase.Eq{-23,p-} PrelBase.Bool{-34,p-}}
instance {PrelBase.Num{-2c,p-} PrelBase.Int{-3g,p-}}
instance _forall_
	 [a_rJy]
	 {PrelBase.Eq{-23,p-} a_rJy}
	 =>
	 {PrelBase.Eq{-23,p-} [a_rJy]}
instance _forall_
	 [a_rJA]
	 {PrelBase.Show{-2i,p-} a_rJA}
	 =>
	 {PrelBase.Show{-2i,p-} [a_rJA]}
instance {PrelBase.Show{-2i,p-} PrelBase.Int{-3g,p-}}
instance {PrelBase.Eq{-23,p-} PrelBase.(){-40,p-}}
instance {PrelBase.Show{-2i,p-} PrelBase.(){-40,p-}}
instance _forall_
	 [a_rJC b_rJD]
	 =>
	 {PrelBase.Show{-2i,p-} (a_rJC -> b_rJD)}
PrelBase.$m=={-rc8,p-} ::
    _forall_
    [a_rj2]
    {PrelBase.Eq{-23,p-} a_rj2}
    =>
    a_rj2 -> a_rj2 -> PrelBase.Bool{-34,p-}
PrelBase.$m/={-rc5,p-} ::
    _forall_
    [a_rj0]
    {PrelBase.Eq{-23,p-} a_rj0}
    =>
    a_rj0 -> a_rj0 -> PrelBase.Bool{-34,p-}
class PrelBase.Eq{-23,p-} rlg_riY where {
    == ::
	rlg_riY -> rlg_riY -> PrelBase.Bool{-34,p-};
    /= ::
	rlg_riY -> rlg_riY -> PrelBase.Bool{-34,p-};
    }
PrelBase.$mshowsPrec{-rcu,p-} ::
    _forall_
    [a_riW]
    {PrelBase.Show{-2i,p-} a_riW}
    =>
    PrelBase.Int{-3g,p-}
    -> a_riW -> PrelBase.String{-rde,p-} -> PrelBase.String{-rde,p-}
type PrelBase.String{-rde,p-} =
    [PrelBase.Char{-38,p-}]
PrelBase.$mshowList{-rct,p-} ::
    _forall_
    [a_riT]
    {PrelBase.Show{-2i,p-} a_riT}
    =>
    [a_riT] -> PrelBase.String{-rde,p-} -> PrelBase.String{-rde,p-}
class PrelBase.Show{-2i,p-} riq_riR where {
    showsPrec ::
	PrelBase.Int{-3g,p-}
	-> riq_riR -> PrelBase.String{-rde,p-} -> PrelBase.String{-rde,p-};
    showList ::
	[riq_riR] -> PrelBase.String{-rde,p-} -> PrelBase.String{-rde,p-};
    }
PrelBase.$m+{-rc2,p-} ::
    _forall_
    [a_riP]
    {PrelBase.Num{-2c,p-} a_riP}
    =>
    a_riP -> a_riP -> a_riP
PrelBase.$m-{-rc4,p-} ::
    _forall_
    [a_riN]
    {PrelBase.Num{-2c,p-} a_riN}
    =>
    a_riN -> a_riN -> a_riN
PrelBase.$m*{-rc1,p-} ::
    _forall_
    [a_riL]
    {PrelBase.Num{-2c,p-} a_riL}
    =>
    a_riL -> a_riL -> a_riL
PrelBase.$mnegate{-rcr,p-} ::
    _forall_ [a_riJ] {PrelBase.Num{-2c,p-} a_riJ} => a_riJ -> a_riJ
PrelBase.$mabs{-rcd,p-} ::
    _forall_ [a_riH] {PrelBase.Num{-2c,p-} a_riH} => a_riH -> a_riH
PrelBase.$msignum{-rcv,p-} ::
    _forall_ [a_riF] {PrelBase.Num{-2c,p-} a_riF} => a_riF -> a_riF
PrelBase.$mfromInteger{-rcl,p-} ::
    _forall_
    [a_riD]
    {PrelBase.Num{-2c,p-} a_riD}
    =>
    PrelBase.Integer{-3h,p-} -> a_riD
PrelBase.$mfromInt{-rck,p-} ::
    _forall_
    [a_riB]
    {PrelBase.Num{-2c,p-} a_riB}
    =>
    PrelBase.Int{-3g,p-} -> a_riB
class {PrelBase.Eq{-23,p-} riC_riz, PrelBase.Show{-2i,p-} riC_riz, PrelBase.Eval{-24,p-} riC_riz} => PrelBase.Num{-2c,p-} riC_riz where {
    + ::
	riC_riz -> riC_riz -> riC_riz;
    - ::
	riC_riz -> riC_riz -> riC_riz;
    * ::
	riC_riz -> riC_riz -> riC_riz;
    negate ::
	riC_riz -> riC_riz;
    abs ::
	riC_riz -> riC_riz;
    signum ::
	riC_riz -> riC_riz;
    fromInteger ::
	PrelBase.Integer{-3h,p-} -> riC_riz;
    fromInt ::
	PrelBase.Int{-3g,p-} -> riC_riz;
    }
class PrelBase.Eval{-24,p-} rk6_rix
{- rec -}
((i1{-r3y,x-}@((i2{-r3x,x-}@((i3{-r3w,x-}@i{-r3v,x-}))))), 1)
    =   j{-r3t,x-}
	    1 1
(Foo{-r3D,x-} j{-r3t,x-} 1 2)
    =   (k{-r3r,x-}, 1, 1, 2)
(~~~~k{-r3r,x-}, 1, 2, 3)
    =   i{-r3v,x-}
	    3
{- rec -}
((f1{-r3C,x-}@((f2{-r3B,x-}@((f3{-r3A,x-}@f{-r3z,x-}))))), 1)
    =   g{-r3u,x-}
	    1 1
(Foo{-r3D,x-} g{-r3u,x-} 1 2)
    =   (h{-r3s,x-}, 1, 1, 2)
(~~~~h{-r3s,x-}, 1, 2, 3)
    =   f{-r3z,x-}
	    3
data Foo{-r3E,x-} a_r3q =
    Foo{-r3D,x-} a_r3q PrelBase.Int{-3g,i-} PrelBase.Int{-3g,i-}
 
rn008.hs:12: Couldn't match the type
		 `Foo' against `PrelTup.(,,,) t{-aZY-} t{-aZZ-} t{-a100-}'
    Expected: `Foo (t{-aYw-} -> t{-aYC-} -> (t{-aYf-}, t{-aYr-}))'
    Inferred: `(t{-aZY-}, t{-aZZ-}, t{-a100-}, t{-a101-})'
    In a pattern binding:
	(`Foo' `j' 1 2)
	    =   `(k, 1, 1, 2)'
 
rn008.hs:11: Couldn't match the type
		 `Foo' against `PrelTup.(,,,) t{-a102-} t{-a103-} t{-a104-}'
    Expected: `Foo (t{-aZp-} -> t{-aZv-} -> (t{-aZ8-}, t{-aZk-}))'
    Inferred: `(t{-a102-}, t{-a103-}, t{-a104-}, t{-a105-})'
    In a pattern binding:
	(`Foo' `g' 1 2)
	    =   `(h, 1, 1, 2)'


Compilation had errors
