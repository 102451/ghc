

--================================================================================
Simplified:
`$d6'  :: 
    `{PrelBase.Eval (Pair a{-r3Z-} b{-r40-})}'
`$d6' =
    _/\_ `a{-s1oF-}' `b{-s1oG-}' ->
	`PrelBase.void'
`$d5'  :: 
    `{PrelBase.Eval (LList alpha{-r3X-})}'
`$d5' =
    _/\_ `alpha{-s1oH-}' ->
	`PrelBase.void'
`$d3'  :: 
    `{PrelBase.Eval (Tree t{-r3U-})}'
`$d3' =
    _/\_ `t{-s1oI-}' ->
	`PrelBase.void'
`$d2'  :: 
    `{PrelBase.Eval (A a{-r3S-})}'
`$d2' =
    _/\_ `a{-s1oJ-}' ->
	`PrelBase.void'
`$d1'  :: 
    `{PrelBase.Eval (Foo baz{-r3Q-})}'
`$d1' =
    _/\_ `baz{-s1oK-}' ->
	`PrelBase.void'
`Mkpair'  :: 
    `a{-r3Z-} -> b{-r40-} -> Pair a{-r3Z-} b{-r40-}'
`Mkpair' =
    _/\_ `a{-s1op-}' `b{-s1oq-}' -> \ `tpl'  :: 
					  `a{-s1op-}'
				      `tpl' `tpl'  :: 
						`b{-s1oq-}'
					    `tpl' ->
	`Mkpair'
	    {_@_ `a{-s1op-}' _@_ `b{-s1oq-}' `tpl' `tpl'}
`MkA'  :: 
    `a{-r3S-} -> A a{-r3S-} -> A a{-r3S-}'
`MkA' =
    _/\_ `a{-s1or-}' -> \ `tpl'  :: 
			      `a{-s1or-}'
			  `tpl' `tpl'  :: 
				    `A a{-s1or-}'
				`tpl' ->
	`MkA'
	    {_@_ `a{-s1or-}' `tpl' `tpl'}
`MkFoo'  :: 
    `Foo (Foo baz{-r3Q-}) -> Foo baz{-r3Q-}'
`MkFoo' =
    _/\_ `baz{-s1os-}' -> \ `tpl'  :: 
				`Foo (Foo baz{-s1os-})'
			    `tpl' ->
	`MkFoo'
	    {_@_ `baz{-s1os-}' `tpl'}
`FF'  :: 
    `Boolean'
`FF' =
    `FF'
	{}
`TT'  :: 
    `Boolean'
`TT' =
    `TT'
	{}
`Nill'  :: 
    `LList alpha{-r3X-}'
`Nill' =
    _/\_ `alpha{-s1ot-}' ->
	`Nill'
	    {_@_ `alpha{-s1ot-}'}
`Conss'  :: 
    `alpha{-r3X-} -> LList alpha{-r3X-} -> LList alpha{-r3X-}'
`Conss' =
    _/\_ `alpha{-s1ou-}' -> \ `tpl'  :: 
				  `alpha{-s1ou-}'
			      `tpl' `tpl'  :: 
					`LList alpha{-s1ou-}'
				    `tpl' ->
	`Conss'
	    {_@_ `alpha{-s1ou-}' `tpl' `tpl'}
Rec {
`app'  :: 
    `LList a{-aHn-} -> LList a{-aHn-} -> LList a{-aHn-}'
`app' =
    _/\_ `a{-s1ov-}' -> \ `ds'  :: 
			      `LList a{-s1ov-}'
			  `ds' `ds'  :: 
				   `LList a{-s1ov-}'
			       `ds' ->
	case `ds' of {
	  `Conss' `ds' `ds' ->
	      let {
		`ds'  :: 
		    `LList a{-s1ov-}'
		`ds' =
		    `app'
			_@_ `a{-s1ov-}' `ds' `ds'
	      } in 
		`Conss'
		    {_@_ `a{-s1ov-}' `ds' `ds'};
	  `Nill' ->
	      case `ds' of {
		`Conss' `ds' `ds' ->
		    `Conss'
			{_@_ `a{-s1ov-}' `ds' `ds'};
		`Nill' ->
		    `Nill'
			{_@_ `a{-s1ov-}'};
	      };
	}
end Rec }
`Zero'  :: 
    `Nat'
`Zero' =
    `Zero'
	{}
`Succ'  :: 
    `Nat -> Nat'
`Succ' =
    \ `tpl'  :: 
	  `Nat'
      `tpl' ->
	`Succ'
	    {`tpl'}
`Leaf'  :: 
    `t{-r3U-} -> Tree t{-r3U-}'
`Leaf' =
    _/\_ `t{-s1oB-}' -> \ `tpl'  :: 
			      `t{-s1oB-}'
			  `tpl' ->
	`Leaf'
	    {_@_ `t{-s1oB-}' `tpl'}
`Node'  :: 
    `Tree t{-r3U-} -> Tree t{-r3U-} -> Tree t{-r3U-}'
`Node' =
    _/\_ `t{-s1oE-}' -> \ `tpl'  :: 
			      `Tree t{-s1oE-}'
			  `tpl' `tpl'  :: 
				    `Tree t{-s1oE-}'
				`tpl' ->
	`Node'
	    {_@_ `t{-s1oE-}' `tpl' `tpl'}
`$d7'  :: 
    `{PrelBase.Eval Boolean}'
`$d7' =
    `PrelBase.void'
`$d4'  :: 
    `{PrelBase.Eval Nat}'
`$d4' =
    `PrelBase.void'
