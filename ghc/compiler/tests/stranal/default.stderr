

--================================================================================
Simplified:
`$d5'  :: 
    `{PrelBase.Eval (Pair a{-r3U-} b{-r3V-})}'
`$d5' =
    _/\_ `a{-s1gp-}' `b{-s1gq-}' ->
	`PrelBase.void'
`$d4'  :: 
    `{PrelBase.Eval (LList alpha{-r3S-})}'
`$d4' =
    _/\_ `alpha{-s1gr-}' ->
	`PrelBase.void'
`$d2'  :: 
    `{PrelBase.Eval (Tree x{-r3P-})}'
`$d2' =
    _/\_ `x{-s1gs-}' ->
	`PrelBase.void'
`$d1'  :: 
    `{PrelBase.Eval (A a{-r3N-})}'
`$d1' =
    _/\_ `a{-s1gt-}' ->
	`PrelBase.void'
`MkPair'  :: 
    `a{-r3U-} -> b{-r3V-} -> Pair a{-r3U-} b{-r3V-}'
`MkPair' =
    _/\_ `a{-s1gc-}' `b{-s1gd-}' -> \ `tpl'  :: 
					  `a{-s1gc-}'
				      `tpl' `tpl'  :: 
						`b{-s1gd-}'
					    `tpl' ->
	`MkPair'
	    {_@_ `a{-s1gc-}' _@_ `b{-s1gd-}' `tpl' `tpl'}
`MkA'  :: 
    `a{-r3N-} -> A a{-r3N-} -> A a{-r3N-}'
`MkA' =
    _/\_ `a{-s1ge-}' -> \ `tpl'  :: 
			      `a{-s1ge-}'
			  `tpl' `tpl'  :: 
				    `A a{-s1ge-}'
				`tpl' ->
	`MkA'
	    {_@_ `a{-s1ge-}' `tpl' `tpl'}
`FF'  :: 
    `Boolean'
`FF' =
    `FF'
	{}
`TT'  :: 
    `Boolean'
`TT' =
    `TT'
	{}
`Nill'  :: 
    `LList alpha{-r3S-}'
`Nill' =
    _/\_ `alpha{-s1gf-}' ->
	`Nill'
	    {_@_ `alpha{-s1gf-}'}
`Conss'  :: 
    `alpha{-r3S-} -> LList alpha{-r3S-} -> LList alpha{-r3S-}'
`Conss' =
    _/\_ `alpha{-s1gg-}' -> \ `tpl'  :: 
				  `alpha{-s1gg-}'
			      `tpl' `tpl'  :: 
					`LList alpha{-s1gg-}'
				    `tpl' ->
	`Conss'
	    {_@_ `alpha{-s1gg-}' `tpl' `tpl'}
Rec {
`append'  :: 
    `LList a{-aH9-} -> LList a{-aH9-} -> LList a{-aH9-}'
`append' =
    _/\_ `a{-s1gh-}' -> \ `xs'  :: 
			      `LList a{-s1gh-}'
			  `xs' `ys'  :: 
				   `LList a{-s1gh-}'
			       `ys' ->
	case `xs' of {
	  `Nill' ->
	      `ys';
	  `Conss' `z' `zs' ->
	      let {
		`ds'  :: 
		    `LList a{-s1gh-}'
		`ds' =
		    `append'
			_@_ `a{-s1gh-}' `zs' `ys'
	      } in 
		`Conss'
		    {_@_ `a{-s1gh-}' `z' `ds'};
	}
end Rec }
`Zero'  :: 
    `Nat'
`Zero' =
    `Zero'
	{}
`Succ'  :: 
    `Nat -> Nat'
`Succ' =
    \ `tpl'  :: 
	  `Nat'
      `tpl' ->
	`Succ'
	    {`tpl'}
`Leaf'  :: 
    `x{-r3P-} -> Tree x{-r3P-}'
`Leaf' =
    _/\_ `x{-s1gl-}' -> \ `tpl'  :: 
			      `x{-s1gl-}'
			  `tpl' ->
	`Leaf'
	    {_@_ `x{-s1gl-}' `tpl'}
`Node'  :: 
    `Tree x{-r3P-} -> Tree x{-r3P-} -> Tree x{-r3P-}'
`Node' =
    _/\_ `x{-s1go-}' -> \ `tpl'  :: 
			      `Tree x{-s1go-}'
			  `tpl' `tpl'  :: 
				    `Tree x{-s1go-}'
				`tpl' ->
	`Node'
	    {_@_ `x{-s1go-}' `tpl' `tpl'}
`$d6'  :: 
    `{PrelBase.Eval Boolean}'
`$d6' =
    `PrelBase.void'
`$d3'  :: 
    `{PrelBase.Eval Nat}'
`$d3' =
    `PrelBase.void'
