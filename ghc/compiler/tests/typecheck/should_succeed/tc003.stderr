

--================================================================================
Typechecked:
{- nonrec -}
d.Num_aWN =
    PrelBase.$d3{-rb4,p-}
fromInt_aWO =
    PrelBase.fromInt{-8R,p-}
	PrelBase.Int{-3g,p-}
	d.Num_aWN
lit_aWW =
    fromInt_aWO PrelBase.I#{-5b,p-}{i} 1#
fromInt_aWV =
    fromInt_aWO
lit_aWU =
    fromInt_aWV PrelBase.I#{-5b,p-}{i} 2#
fromInt_aWT =
    fromInt_aWO
lit_aWP =
    fromInt_aWT PrelBase.I#{-5b,p-}{i} 3#
{- nonrec -}
AbsBinds
[]
[]
[([], c{-r5,x-}, c_aW8), ([], d{-r4,x-}, d_aW9), ([],
						  e{-r3,x-},
						  e_aWa)]
    lit_aWX =
	lit_aWW
    (c_aW8@(d_aW9, e_aWa))
	=   if PrelBase.True{-5E,p-}{i} then
		(lit_aWW, lit_aWU)
	    else
		(lit_aWX, lit_aWP)
{- nonrec -}
ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d1 1 $d11 1 $d15 1 $d2 1 $d21 1 $d27 1 $d3 1 $d32 1 $d33 1 $d37 1 $d38 1 $d39 1 $d41 1 $d42 1 $d44 1 $d46 1 $d54 1 $d7 1 $d8 1 Eq 1 Eval 1 Num 1 Show 1 String 1;
PrelNum 1 :: $d10 1 $d16 1 $d18 1 $d29 1 $d33 1 $d35 1;
PrelTup 1 :: $d13 1 $d4 1 $d9 1;
_exports_
ShouldSucceed c d e;
_declarations_
1 c _:_ (PrelBase.Int, PrelBase.Int) ;;
1 d _:_ PrelBase.Int ;;
1 e _:_ PrelBase.Int ;;
