 
tc056.hs:13:warning:
    Duplicate class assertion `[(`Eq'',
				    `a'),
				(`Eq'',
				    `a')]' in context:
	[(`Eq'',
	     `a'),
	 (`Eq'',
	     `a')]


--================================================================================
Typechecked:
{- nonrec -}
scsel_Ord'ShouldSucceedEq'{-aID,x-} =
    _/\_ a{-r3D-} -> \ tpl_B1 ->
	case tpl_B1 of { PrelTup.(,){-62,p-}{i} tpl_B1 tpl_B2  -> tpl_B1;}
lt{-r3J,x-} =
    _/\_ a{-r3D-} -> \ tpl_B1 ->
	case tpl_B1 of { PrelTup.(,){-62,p-}{i} tpl_B1 tpl_B2  -> tpl_B2;}
{- nonrec -}
AbsBinds
[a{-aIr-}]
[d.Ord'_aIk]
[([a{-aIr-}], $mlt{-rHo,x-}, lt_aIm)]
    AbsBinds [] [] [([], lt_aIm, lt_aIo)]
	lt_aIo
	    =   GHCerr.noDefaultMethodError{-8k,p-}
		    (a{-aIr-}
		     -> a{-aIr-}
		     -> PrelBase.Bool{-34,p-}) "Class Ord' Method lt"
{- nonrec -}
doubleeq{-r3L,x-} =
    _/\_ a{-r3H-} -> \ tpl_B1 ->
	tpl_B1
{- nonrec -}
AbsBinds
[a{-aIC-}]
[d.Eq'_aIv]
[([a{-aIC-}], $mdoubleeq{-rHp,x-}, doubleeq_aIx)]
    AbsBinds [] [] [([], doubleeq_aIx, doubleeq_aIz)]
	doubleeq_aIz
	    =   GHCerr.noDefaultMethodError{-8k,p-}
		    (a{-aIC-}
		     -> a{-aIC-}
		     -> PrelBase.Bool{-34,p-}) "Class Eq' Method doubleeq"
{- rec -}
AbsBinds
[a{-aHZ-}]
[d.Eq'_aI2, d.Eq'_aI3]
[([a{-aHZ-}], $d1{-rIE,x-}, d.Eq'_aHT)]
    AbsBinds [] [] [([], doubleeq_aIF, doubleeq_aHW)]
	doubleeq_aHW
	    x_r3q y_r3s
		    =   PrelBase.True{-5E,p-}{i}
    d.Eq'_aHT =
	({-dict-} [] [doubleeq_aIF])
{- rec -}
AbsBinds [] [] [([], $d2{-rIG,x-}, d.Eq'_aIb)]
    AbsBinds [] [] [([], doubleeq_aIH, doubleeq_aIe)]
	doubleeq_aIe
	    x_r3y y_r3A
		    =   PrelBase.True{-5E,p-}{i}
    d.Eq'_aIb =
	({-dict-} [] [doubleeq_aIH])
{- nonrec -}
{- nonrec -}
AbsBinds
[t{-aHA-}, t{-aHF-}]
[d.Eq'_aHJ, d.Num_aHN]
[([t{-aHA-}, t{-aHF-}], f{-r3I,x-}, f_aHn)]
    d.Eq'_aHK =
	d.Eq'_aHJ
    d.Eq'_aHH =
	$d1{-rIE,x-}
	    t{-aHA-}
	    [d.Eq'_aHJ, d.Eq'_aHK]
    doubleeq_aIK =
	doubleeq{-r3L,x-}
	    [t{-aHA-}]
	    d.Eq'_aHH
    fromInt_aIJ =
	PrelBase.fromInt{-8R,p-}
	    t{-aHA-}
	    d.Num_aHN
    lit_aII =
	fromInt_aIJ PrelBase.I#{-5b,p-}{i} 1#
    f_aHn
	x_r3h y_r3j
		=   doubleeq_aIK x_r3h [lit_aII] (t{-aHA-})
{- nonrec -}
ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d1 1 $d11 1 $d15 1 $d2 1 $d21 1 $d27 1 $d3 1 $d32 1 $d33 1 $d37 1 $d38 1 $d39 1 $d41 1 $d42 1 $d44 1 $d46 1 $d54 1 $d7 1 $d8 1 Eq 1 Eval 1 Num 1 Show 1 String 1;
PrelNum 1 :: $d10 1 $d16 1 $d18 1 $d29 1 $d33 1 $d35 1;
_exports_
ShouldSucceed f Eq'(doubleeq) Ord'(lt);
_instances_
instance _forall_ [a] {Eq' a, Eq' a} => {Eq' [a]} = $d1;
instance {Eq' PrelBase.Int} = $d2;
_declarations_
1 $d1 _:_ _forall_ [a] {Eq' a, Eq' a} => {Eq' [a]} ;;
1 $d2 _:_ {Eq' PrelBase.Int} ;;
1 $mdoubleeq _:_ _forall_ [a] {Eq' a} => a -> a -> PrelBase.Bool ;;
1 $mlt _:_ _forall_ [a] {Ord' a} => a -> a -> PrelBase.Bool ;;
1 class Eq' r3H where {doubleeq :: r3H -> r3H -> PrelBase.Bool} ;
1 class {Eq' r3D} => Ord' r3D where {lt :: r3D -> r3D -> PrelBase.Bool} ;
1 f _:_ _forall_ [a b] {Eq' a, PrelBase.Num a} => [a] -> b -> PrelBase.Bool ;;
