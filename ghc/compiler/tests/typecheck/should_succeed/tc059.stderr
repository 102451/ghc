

--================================================================================
Typechecked:
{- nonrec -}
deq{-r3N,x-} =
    _/\_ a{-r3K-} -> \ tpl_B1 ->
	case tpl_B1 of { PrelTup.(,){-62,p-}{i} tpl_B1 tpl_B2  -> tpl_B1;}
foo{-r3M,x-} =
    _/\_ a{-r3K-} -> \ tpl_B1 ->
	case tpl_B1 of { PrelTup.(,){-62,p-}{i} tpl_B1 tpl_B2  -> tpl_B2;}
{- nonrec -}
AbsBinds
[a{-aIS-}]
[d.Eq2_aIL]
[([a{-aIS-}], $mdeq{-rHo,x-}, deq_aIN)]
    AbsBinds [] [] [([], deq_aIN, deq_aIP)]
	deq_aIP
	    =   GHCerr.noDefaultMethodError{-8k,p-}
		    (a{-aIS-}
		     -> a{-aIS-}
		     -> PrelBase.Bool{-34,p-}) "Class Eq2 Method deq"
AbsBinds
[a{-aIS-}]
[d.Eq2_aIV]
[([a{-aIS-}], $mfoo{-rHn,x-}, foo_aIX)]
    AbsBinds [] [] [([], foo_aIX, foo_aIZ)]
	foo_aIZ
	    =   GHCerr.noDefaultMethodError{-8k,p-}
		    (a{-aIS-} -> a{-aIS-}) "Class Eq2 Method foo"
{- rec -}
AbsBinds
[a{-aHX-}]
[d.Eq2_aIm]
[([a{-aHX-}], $d1{-rJ2,x-}, d.Eq2_aHN)]
    d.Eq2_aIp =
	d.Eq2_aIm
    deq_aJ8 =
	deq{-r3N,x-}
	    a{-aHX-}
	    d.Eq2_aIp
    d.Eq2_aIr =
	d.Eq2_aIm
    foo_aJ7 =
	foo{-r3M,x-}
	    a{-aHX-}
	    d.Eq2_aIr
    deq_aJ6 =
	deq_aJ4
    foo_aJ5 =
	foo_aJ3
    AbsBinds [] [] [([], deq_aJ4, deq_aHQ)]
	deq_aHQ
	    (a_r3n PrelBase.:{-55,p-}{i} as_r3o)
	    (b_r3q PrelBase.:{-55,p-}{i} bs_r3r)
		    =   if deq_aJ8 a_r3n foo_aJ7 b_r3q then
			    deq_aJ6 as_r3o foo_aJ5 bs_r3r
			else
			    PrelBase.False{-58,p-}{i}
    AbsBinds [] [] [([], foo_aJ3, foo_aIj)]
	foo_aIj
	    x_r3v   =   x_r3v
    d.Eq2_aHN =
	({-dict-} [] [deq_aJ4, foo_aJ3])
{- rec -}
AbsBinds [] [] [([], $d2{-rJ9,x-}, d.Eq2_aIx)]
    AbsBinds [] [] [([], deq_aJb, deq_aIA)]
	deq_aIA
	    x_r3B y_r3D
		    =   PrelBase.True{-5E,p-}{i}
    AbsBinds [] [] [([], foo_aJa, foo_aIG)]
	foo_aIG
	    x_r3H   =   x_r3H
    d.Eq2_aIx =
	({-dict-} [] [deq_aJb, foo_aJa])
{- nonrec -}
{- nonrec -}
AbsBinds
[t{-aHy-}]
[d.Eq2_aHE, d.Num_aHH]
[([t{-aHy-}], f{-r3L,x-}, f_aHm)]
    d.Eq2_aHC =
	$d1{-rJ2,x-}
	    t{-aHy-}
	    d.Eq2_aHE
    deq_aJe =
	deq{-r3N,x-}
	    [t{-aHy-}]
	    d.Eq2_aHC
    fromInt_aJd =
	PrelBase.fromInt{-8R,p-}
	    t{-aHy-}
	    d.Num_aHH
    lit_aJc =
	fromInt_aJd PrelBase.I#{-5b,p-}{i} 1#
    f_aHm
	x_r3g   =   deq_aJe x_r3g [lit_aJc] (t{-aHy-})
{- nonrec -}
tc059.hs:12: 
    Warning: Possibly incomplete patterns
	in the definition of function `deq'
ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d1 1 $d11 1 $d15 1 $d2 1 $d21 1 $d27 1 $d3 1 $d32 1 $d33 1 $d37 1 $d38 1 $d39 1 $d41 1 $d42 1 $d44 1 $d46 1 $d54 1 $d7 1 $d8 1 Eq 1 Eval 1 Num 1 Show 1 String 1;
PrelNum 1 :: $d10 1 $d16 1 $d18 1 $d29 1 $d33 1 $d35 1;
_exports_
ShouldSucceed f Eq2(deq foo);
_instances_
instance _forall_ [a] {Eq2 a} => {Eq2 [a]} = $d1;
instance {Eq2 PrelBase.Int} = $d2;
_declarations_
1 $d1 _:_ _forall_ [a] {Eq2 a} => {Eq2 [a]} ;;
1 $d2 _:_ {Eq2 PrelBase.Int} ;;
1 $mdeq _:_ _forall_ [a] {Eq2 a} => a -> a -> PrelBase.Bool ;;
1 $mfoo _:_ _forall_ [a] {Eq2 a} => a -> a ;;
1 class Eq2 r3K where {deq :: r3K -> r3K -> PrelBase.Bool; foo :: r3K -> r3K} ;
1 f _:_ _forall_ [a] {Eq2 a, PrelBase.Num a} => [a] -> PrelBase.Bool ;;
