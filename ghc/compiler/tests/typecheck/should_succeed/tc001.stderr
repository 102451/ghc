

--================================================================================
Typechecked:
{- nonrec -}
{- nonrec -}
AbsBinds [t{-aGZ-}] [d.Num_aH2] [([t{-aGZ-}], a{-r3h,x-}, a_aGG)]
    +_aHc =
	PrelBase.+{-r3g,p-}
	    t{-aGZ-}
	    d.Num_aH2
    d.Num_aH5 =
	d.Num_aH2
    fromInt_aHb =
	PrelBase.fromInt{-8R,p-}
	    t{-aGZ-}
	    d.Num_aH5
    lit_aHa =
	fromInt_aHb PrelBase.I#{-5b,p-}{i} 2#
    +_aH9 =
	+_aHc
    fromInt_aH8 =
	fromInt_aHb
    lit_aH6 =
	fromInt_aH8 PrelBase.I#{-5b,p-}{i} 3#
    a_aGG
	x_r3d   =   y_r3f +_aHc lit_aHa
		where
		    {- nonrec -}
		    AbsBinds [] [] [([], y_r3f, y_aGK)]
			y_aGK
			    =   x_r3d +_aH9 lit_aH6
		    {- nonrec -}
{- nonrec -}
ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d1 1 $d11 1 $d15 1 $d2 1 $d21 1 $d27 1 $d3 1 $d32 1 $d33 1 $d37 1 $d38 1 $d39 1 $d41 1 $d42 1 $d44 1 $d46 1 $d54 1 $d7 1 $d8 1 Eq 1 Eval 1 Num 1 Show 1 String 1;
PrelNum 1 :: $d10 1 $d16 1 $d18 1 $d29 1 $d33 1 $d35 1;
_exports_
ShouldSucceed a;
_declarations_
1 a _:_ _forall_ [a] {PrelBase.Num a} => a -> a ;;
