

--================================================================================
Typechecked:
{- nonrec -}
d.Num_aXA =
    PrelBase.$d3{-rb3,p-}
fromInt_aXN =
    PrelBase.fromInt{-8R,p-}
	PrelBase.Int{-3g,p-}
	d.Num_aXA
lit_aXT =
    fromInt_aXN PrelBase.I#{-5b,p-}{i} 1#
fromInt_aXS =
    fromInt_aXN
lit_aXR =
    fromInt_aXS PrelBase.I#{-5b,p-}{i} 2#
d.Num_aXE =
    d.Num_aXA
+_aXQ =
    PrelBase.+{-rau,p-}
	PrelBase.Int{-3g,p-}
	d.Num_aXE
d.Monad_aXG =
    PrelBase.$d24{-raX,p-}
>>=_aXP =
    PrelBase.>>={-811,p-}
	PrelBase.[]{-3j,p-}
	d.Monad_aXG
d.Monad_aXJ =
    d.Monad_aXG
return_aXO =
    PrelBase.return{-816,p-}
	PrelBase.[]{-3j,p-}
	d.Monad_aXJ
{- nonrec -}
AbsBinds [] [] [([], p{-r3e,x-}, p_aWR)]
    lit_aXU =
	lit_aXR
    p_aWR
	=   [ (y_r3d +_aXQ lit_aXU, PrelBase.True{-5E,p-}{i}) |
		y_r3d <- [lit_aXT, lit_aXR] (PrelBase.Int{-3g,p-}) ]
{- nonrec -}
ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d1 1 $d11 1 $d15 1 $d2 1 $d21 1 $d23 1 $d24 1 $d27 1 $d3 1 $d32 1 $d33 1 $d37 1 $d38 1 $d39 1 $d41 1 $d42 1 $d44 1 $d46 1 $d54 1 $d7 1 $d8 1 Eq 1 Eval 1 Monad 1 MonadZero 1 Num 1 Show 1 String 1;
PrelNum 1 :: $d10 1 $d16 1 $d18 1 $d29 1 $d33 1 $d35 1;
PrelTup 1 :: $d13 1 $d4 1 $d9 1;
_exports_
ShouldSucceed p;
_declarations_
1 p _:_ [(PrelBase.Int, PrelBase.Bool)] ;;
