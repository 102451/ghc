

--================================================================================
Typechecked:
{- nonrec -}
MkPair{-r3n,x-}{i} =
    _/\_ a{-r3k-} b{-r3l-} -> \ tpl_B1 tpl_B2 ->
	MkPair{-r3n,x-}{i}
	    {_@_ a{-r3k-} _@_ b{-r3l-} tpl_B1 tpl_B2}
{- rec -}
AbsBinds
[a{-aHg-}, b{-aHh-}]
[]
[([a{-aHg-}, b{-aHh-}], $d1{-rHk,x-}, d.Eval_aHc)]
    d.Eval_aHc =
	({-dict-} [] [])
{- nonrec -}
{- nonrec -}
AbsBinds
[t{-aGO-}, t{-aGR-}, a{-aGT-}]
[d.Monad_aH3]
[([t{-aGO-}, t{-aGR-}, a{-aGT-}], f{-r3m,x-}, f_aGG)]
    >>=_aHm =
	PrelBase.>>={-811,p-}
	    a{-aGT-}
	    d.Monad_aH3
    d.Monad_aH5 =
	d.Monad_aH3
    return_aHl =
	PrelBase.return{-816,p-}
	    a{-aGT-}
	    d.Monad_aH5
    f_aGG
	x_r3f   =   [ a_r3i |
			(MkPair{-r3n,x-}{i} c_r3h a_r3i) <- x_r3f ]
{- nonrec -}
ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d37 1 $d39 1 $d41 1 $d46 1 Eval 1 Monad 1 MonadZero 1;
_exports_
ShouldSucceed f Pair(MkPair);
_instances_
instance _forall_ [a b] => {PrelBase.Eval (Pair a b)} = $d1;
_declarations_
1 $d1 _:_ _forall_ [a b] => {PrelBase.Eval (Pair a b)} ;;
1 data Pair r3k r3l = MkPair r3k r3l ;
1 f _:_ _forall_ [a b c :: (* -> *)] {PrelBase.Monad c} => c (Pair a b) -> c b ;;
