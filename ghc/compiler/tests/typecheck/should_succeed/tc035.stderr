

--================================================================================
Typechecked:
{- nonrec -}
Var{-r5,x-}{i} =
    _/\_ a{-r3q-} -> \ tpl_B1 ->
	Var{-r5,x-}{i}
	    {_@_ a{-r3q-} tpl_B1}
App{-r4,x-}{i} =
    _/\_ a{-r3q-} -> \ tpl_B1 tpl_B2 ->
	App{-r4,x-}{i}
	    {_@_ a{-r3q-} tpl_B1 tpl_B2}
{- rec -}
AbsBinds [a{-aWY-}] [] [([a{-aWY-}], $d1{-rX1,x-}, d.Eval_aWV)]
    d.Eval_aWV =
	({-dict-} [] [])
{- nonrec -}
d.MonadPlus_aWX =
    PrelBase.$d22{-rq5,p-}
++_aX2 =
    PrelBase.++{-rur,p-}
	PrelBase.[]{-3j,p-}
	d.MonadPlus_aWX
{- rec -}
AbsBinds [t{-aWD-}] [] [([t{-aWD-}], g{-r3t,x-}, g_aWg)]
    g_aWg
	(a_r3j, (Var{-r5,x-}{i} name_r3k))
		=   [name_r3k] ([PrelBase.Char{-38,p-}])
    g_aWg
	(a_r3m, (App{-r4,x-}{i} e1_r3n e2_r3o))
		=   ++_aX2
			[PrelBase.Char{-38,p-}]
			(g_aWg e1_r3n) (g_aWg e2_r3o)
{- nonrec -}
ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d22 1 $d23 1 $d24 1 $d37 1 $d38 1 $d39 1 $d41 1 $d44 1 $d46 1 Eval 1 Monad 1 MonadPlus 1 MonadZero 1;
PrelTup 1 :: $d13 1;
_exports_
ShouldSucceed g AnnExpr Expr(Var App);
_instances_
instance _forall_ [a] => {PrelBase.Eval (Expr a)} = $d1;
_declarations_
1 $d1 _:_ _forall_ [a] => {PrelBase.Eval (Expr a)} ;;
1 type AnnExpr r3s = (r3s, Expr r3s) ;
1 data Expr r3q = Var [PrelBase.Char] |  App (AnnExpr r3q) (AnnExpr r3q) ;
1 g _:_ _forall_ [a] => (a, Expr a) -> [[PrelBase.Char]] ;;
