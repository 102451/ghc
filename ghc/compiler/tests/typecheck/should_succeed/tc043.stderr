

--================================================================================
Typechecked:
{- nonrec -}
op2{-r3D,x-} =
    _/\_ b{-r3t-} -> \ tpl_B1 ->
	tpl_B1
{- nonrec -}
AbsBinds
[b{-aIu-}]
[d.B_aIn]
[([b{-aIu-}], $mop2{-rHi,x-}, op2_aIp)]
    AbsBinds [] [] [([], op2_aIp, op2_aIr)]
	op2_aIr
	    =   GHCerr.noDefaultMethodError{-8k,p-}
		    (b{-aIu-} -> PrelBase.Int{-3g,p-}) "Class B Method op2"
{- nonrec -}
op1{-r3E,x-} =
    _/\_ a{-r3B-} -> \ tpl_B1 ->
	tpl_B1
{- nonrec -}
AbsBinds
[a{-aID-}]
[d.A_aIy]
[([a{-aID-}], $mop1{-rHh,x-}, op1_aIA)]
    AbsBinds [] [] [([], op1_aIA, op1_aIC)]
	op1_aIC
	    =   GHCerr.noDefaultMethodError{-8k,p-}
		    a{-aID-} "Class A Method op1"
{- rec -}
AbsBinds [a{-aHF-}] [d.B_aI1] [([a{-aHF-}], $d1{-rIW,x-}, d.B_aHz)]
    op2_aIY =
	op2_aIX
    AbsBinds [] [] [([], op2_aIX, op2_aHC)]
	op2_aHC
	    PrelBase.[]{-5i,p-}{i}
		    =   lit_aIU
	op2_aHC
	    (x_r3p PrelBase.:{-55,p-}{i} xs_r3q)
		    =   lit_aIR +_aIT (op2_aIY xs_r3q)
    d.B_aHz =
	({-dict-} [] [op2_aIX])
{- rec -}
AbsBinds [] [] [([], $d2{-rIZ,x-}, d.A_aIc)]
    AbsBinds [] [] [([], op1_aJ0, op1_aIf)]
	op1_aIf
	    =   lit_aIN
    d.A_aIc =
	({-dict-} [] [op1_aJ0])
{- nonrec -}
d.Num_aIJ =
    PrelBase.$d3{-rbv,p-}
fromInt_aIV =
    PrelBase.fromInt{-8R,p-}
	PrelBase.Int{-3g,p-}
	d.Num_aIJ
lit_aIU =
    fromInt_aIV PrelBase.I#{-5b,p-}{i} 0#
d.Num_aIM =
    d.Num_aIJ
+_aIT =
    PrelBase.+{-rd3,p-}
	PrelBase.Int{-3g,p-}
	d.Num_aIM
fromInt_aIS =
    fromInt_aIV
lit_aIR =
    fromInt_aIS PrelBase.I#{-5b,p-}{i} 1#
fromInt_aIQ =
    fromInt_aIV
lit_aIN =
    fromInt_aIQ PrelBase.I#{-5b,p-}{i} 2#
{- nonrec -}
AbsBinds
[t{-aHr-}, a{-aHo-}]
[d.A_aHt]
[([t{-aHr-}, a{-aHo-}], f{-r3C,x-}, f_aHg)]
    op1_aJ1 =
	op1{-r3E,x-}
	    a{-aHo-}
	    d.A_aHt
    f_aHg
	x_r3h   =   op1_aJ1
{- nonrec -}
ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d1 1 $d11 1 $d15 1 $d2 1 $d21 1 $d27 1 $d3 1 $d32 1 $d33 1 $d37 1 $d38 1 $d39 1 $d41 1 $d42 1 $d44 1 $d46 1 $d54 1 $d7 1 $d8 1 Eq 1 Eval 1 Num 1 Show 1 String 1;
PrelNum 1 :: $d10 1 $d16 1 $d18 1 $d29 1 $d33 1 $d35 1;
_exports_
ShouldSucceed f A(op1) B(op2);
_instances_
instance _forall_ [a] {B a} => {B [a]} = $d1;
instance {A PrelBase.Int} = $d2;
_declarations_
1 $d1 _:_ _forall_ [a] {B a} => {B [a]} ;;
1 $d2 _:_ {A PrelBase.Int} ;;
1 $mop1 _:_ _forall_ [a] {A a} => a ;;
1 $mop2 _:_ _forall_ [a] {B a} => a -> PrelBase.Int ;;
1 class A r3B where {op1 :: r3B} ;
1 class B r3t where {op2 :: r3t -> PrelBase.Int} ;
1 f _:_ _forall_ [a b] {A b} => a -> b ;;
