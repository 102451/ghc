

--================================================================================
Typechecked:
{- nonrec -}
{- nonrec -}
AbsBinds [a{-aG6-}] [d.Eq_aGl] [([a{-aG6-}], f{-r3e,x-}, f_aG3)]
    d.Eq_aGn =
	d.Eq_aGl
    ==_aGo =
	PrelBase.=={-8Y,p-}
	    a{-aG6-}
	    d.Eq_aGn
    f_aG3
	x_r3g   =   g_r3i x_r3g
		where
		    {- nonrec -}
		    AbsBinds [] [] [([], g_r3i, g_aG8)]
			g_aG8
			    y_r3k   =   if y_r3k ==_aGo x_r3g then
					    PrelBase.[]{-5i,p-}{i}
						a{-aG6-}
					else
					    [y_r3k] (a{-aG6-})
		    {- nonrec -}
{- nonrec -}
ghc:junk old iface line?:section::interface ShouldSucceed where {
ghc:junk old iface line?:section::import PreludeCore(Eq)
ghc:junk old iface line?:section::f  ::  Eq a => a -> [a]
ghc:junk old iface line?:section::}
ghc: module version changed to 1; reason: usages changed
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d15 1 $d27 1 $d32 1 $d7 1 Eq 1;
PrelNum 1 :: $d18 1;
_exports_
ShouldSucceed f;
_declarations_
1 f _:_ _forall_ [a] {PrelBase.Eq a} => a -> [a] ;;
