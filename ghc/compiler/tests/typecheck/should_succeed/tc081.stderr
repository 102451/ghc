

--================================================================================
Typechecked:
{- nonrec -}
{- nonrec -}
{- nonrec -}
AbsBinds
[t{-aY0-}]
[d.Num_aY7, d.Ord_aYc]
[([t{-aY0-}], f3{-r3A,x-}, f3_aXr)]
    +_a100 =
	PrelBase.+{-rcZ,p-}
	    t{-aY0-}
	    d.Num_aY7
    d.Num_aYa =
	d.Num_aY7
    fromInt_aZZ =
	PrelBase.fromInt{-8R,p-}
	    t{-aY0-}
	    d.Num_aYa
    lit_aZY =
	fromInt_aZZ PrelBase.I#{-5b,p-}{i} 1#
    <_aZX =
	PrelBase.<{-raS,p-}
	    t{-aY0-}
	    d.Ord_aYc
    fromInt_aZW =
	fromInt_aZZ
    lit_aZV =
	fromInt_aZW PrelBase.I#{-5b,p-}{i} 3#
    d.Ord_aYf =
	d.Ord_aYc
    >_aZU =
	PrelBase.>{-rd6,p-}
	    t{-aY0-}
	    d.Ord_aYf
    fromInt_aZT =
	fromInt_aZZ
    lit_aZS =
	fromInt_aZT PrelBase.I#{-5b,p-}{i} 2#
    f3_aXr
	x_r3t   =   (x_r3t +_a100 lit_aZY,
		     x_r3t <_aZX lit_aZV,
		     g3_r3v
			 PrelBase.Bool{-34,p-} PrelBase.True{-5E,p-}{i},
		     g3_r3v
			 PrelBase.Char{-38,p-} 'c')
		where
		    {- nonrec -}
		    AbsBinds [a{-aXM-}] [] [([a{-aXM-}], g3_r3v, g3_aXv)]
			g3_aXv
			    =   \ y_r3x   ->  if x_r3t >_aZU lit_aZS then
						  PrelBase.[]{-5i,p-}{i}
						      a{-aXM-}
					      else
						  [y_r3x] (a{-aXM-})
		    {- nonrec -}
{- nonrec -}
{- nonrec -}
AbsBinds
[t{-aYP-}]
[d.Num_aYW, d.Ord_aZ1]
[([t{-aYP-}], f2{-r3B,x-}, f2_aYi)]
    +_a109 =
	PrelBase.+{-rcZ,p-}
	    t{-aYP-}
	    d.Num_aYW
    d.Num_aYZ =
	d.Num_aYW
    fromInt_a108 =
	PrelBase.fromInt{-8R,p-}
	    t{-aYP-}
	    d.Num_aYZ
    lit_a107 =
	fromInt_a108 PrelBase.I#{-5b,p-}{i} 1#
    <_a106 =
	PrelBase.<{-raS,p-}
	    t{-aYP-}
	    d.Ord_aZ1
    fromInt_a105 =
	fromInt_a108
    lit_a104 =
	fromInt_a105 PrelBase.I#{-5b,p-}{i} 3#
    d.Ord_aZ4 =
	d.Ord_aZ1
    >_a103 =
	PrelBase.>{-rd6,p-}
	    t{-aYP-}
	    d.Ord_aZ4
    fromInt_a102 =
	fromInt_a108
    lit_a101 =
	fromInt_a102 PrelBase.I#{-5b,p-}{i} 2#
    f2_aYi
	x_r3l   =   (x_r3l +_a109 lit_a107,
		     x_r3l <_a106 lit_a104,
		     g2_r3n
			 PrelBase.Bool{-34,p-} PrelBase.True{-5E,p-}{i},
		     g2_r3n
			 PrelBase.Char{-38,p-} 'c')
		where
		    {- nonrec -}
		    AbsBinds [a{-aYr-}] [] [([a{-aYr-}], g2_r3n, g2_aYo)]
			g2_aYo
			    y_r3r   =   if x_r3l >_a103 lit_a101 then
					    PrelBase.[]{-5i,p-}{i}
						a{-aYr-}
					else
					    [y_r3r] (a{-aYr-})
		    {- nonrec -}
{- nonrec -}
{- nonrec -}
AbsBinds
[t{-aZC-}]
[d.Num_aZJ, d.Ord_aZO]
[([t{-aZC-}], f{-r3C,x-}, f_aZ7)]
    +_a10j =
	PrelBase.+{-rcZ,p-}
	    t{-aZC-}
	    d.Num_aZJ
    d.Num_aZM =
	d.Num_aZJ
    fromInt_a10i =
	PrelBase.fromInt{-8R,p-}
	    t{-aZC-}
	    d.Num_aZM
    lit_a10h =
	fromInt_a10i PrelBase.I#{-5b,p-}{i} 1#
    <_a10g =
	PrelBase.<{-raS,p-}
	    t{-aZC-}
	    d.Ord_aZO
    fromInt_a10f =
	fromInt_a10i
    lit_a10e =
	fromInt_a10f PrelBase.I#{-5b,p-}{i} 3#
    d.Ord_aZR =
	d.Ord_aZO
    >_a10d =
	PrelBase.>{-rd6,p-}
	    t{-aZC-}
	    d.Ord_aZR
    fromInt_a10c =
	fromInt_a10i
    lit_a10a =
	fromInt_a10c PrelBase.I#{-5b,p-}{i} 2#
    f_aZ7
	x_r3f   =   (x_r3f +_a10j lit_a10h,
		     x_r3f <_a10g lit_a10e,
		     g_r3h
			 PrelBase.Bool{-34,p-} PrelBase.True{-5E,p-}{i},
		     g_r3h
			 PrelBase.Char{-38,p-} 'c')
		where
		    {- nonrec -}
		    AbsBinds [t{-aZn-}] [] [([t{-aZn-}], g_r3h, g_aZb)]
			g_aZb
			    y_r3j   =   if x_r3f >_a10d lit_a10a then
					    PrelBase.[]{-5i,p-}{i}
						t{-aZn-}
					else
					    [y_r3j] (t{-aZn-})
		    {- nonrec -}
{- nonrec -}
ghc: module version changed to 1; reason: no old .hi file
_interface_ ShouldSucceed 1
_instance_modules_
ArrBase IO PrelNum
_usages_
PrelBase 1 :: $d1 1 $d11 1 $d14 1 $d15 1 $d2 1 $d21 1 $d26 1 $d27 1 $d3 1 $d32 1 $d33 1 $d34 1 $d37 1 $d38 1 $d39 1 $d41 1 $d42 1 $d44 1 $d45 1 $d46 1 $d49 1 $d50 1 $d51 1 $d54 1 $d55 1 $d6 1 $d7 1 $d8 1 Eq 1 Eval 1 Num 1 Ord 1 Ordering 1 Show 1 String 1;
PrelNum 1 :: $d10 1 $d16 1 $d17 1 $d18 1 $d29 1 $d33 1 $d34 1 $d35 1;
PrelTup 1 :: $d11 1 $d15 1 $d2 1 $d51 1;
_exports_
ShouldSucceed f f2 f3;
_declarations_
1 f _:_ _forall_ [a] {PrelBase.Num a, PrelBase.Ord a} => a -> (a, PrelBase.Bool, [PrelBase.Bool], [PrelBase.Char]) ;;
1 f2 _:_ _forall_ [a] {PrelBase.Num a, PrelBase.Ord a} => a -> (a, PrelBase.Bool, [PrelBase.Bool], [PrelBase.Char]) ;;
1 f3 _:_ _forall_ [a] {PrelBase.Num a, PrelBase.Ord a} => a -> (a, PrelBase.Bool, [PrelBase.Bool], [PrelBase.Char]) ;;
