{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface Match where
import Bag(Bag)
import CmdLineOpts(GlobalSwitch, SwitchResult)
import CoreSyn(CoreExpr)
import DsMonad(DsMatchContext, DsMatchKind)
import DsUtils(EquationInfo, MatchResult)
import HsMatches(Match)
import HsPat(TypecheckedPat)
import Id(Id)
import PreludePS(_PackedString)
import SplitUniq(SplitUniqSupply)
import SrcLoc(SrcLoc)
import UniType(UniType)
import UniqFM(UniqFM)
match :: [Id] -> [EquationInfo] -> [EquationInfo] -> SplitUniqSupply -> SrcLoc -> (GlobalSwitch -> SwitchResult) -> (_PackedString, _PackedString) -> UniqFM (CoreExpr Id Id) -> Bag DsMatchContext -> (MatchResult, Bag DsMatchContext)
matchSimply :: CoreExpr Id Id -> TypecheckedPat -> UniType -> CoreExpr Id Id -> CoreExpr Id Id -> SplitUniqSupply -> SrcLoc -> (GlobalSwitch -> SwitchResult) -> (_PackedString, _PackedString) -> UniqFM (CoreExpr Id Id) -> Bag DsMatchContext -> (CoreExpr Id Id, Bag DsMatchContext)
matchWrapper :: DsMatchKind -> [Match Id TypecheckedPat] -> [Char] -> SplitUniqSupply -> SrcLoc -> (GlobalSwitch -> SwitchResult) -> (_PackedString, _PackedString) -> UniqFM (CoreExpr Id Id) -> Bag DsMatchContext -> (([Id], CoreExpr Id Id), Bag DsMatchContext)

