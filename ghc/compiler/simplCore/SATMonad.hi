{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface SATMonad where
import CoreSyn(CoreBinding, CoreExpr)
import Id(Id)
import Maybes(Labda)
import PlainCore(PlainCoreExpr(..))
import SplitUniq(SplitUniqSupply)
import UniType(UniType)
import UniqFM(UniqFM)
infixr 9 `thenSAT`
infixr 9 `thenSAT_`
data Arg a   = Static a | NotStatic
data Id 
type PlainCoreExpr = CoreExpr Id Id
type SATEnv = UniqFM ([Arg UniType], [Arg Id])
type SATInfo = ([Arg UniType], [Arg Id])
type SatM a = SplitUniqSupply -> UniqFM ([Arg UniType], [Arg Id]) -> (a, UniqFM ([Arg UniType], [Arg Id]))
data SplitUniqSupply 
data UniType 
dropStatics :: [Arg a] -> [b] -> [b]
emptyEnvSAT :: SplitUniqSupply -> UniqFM ([Arg UniType], [Arg Id]) -> ((), UniqFM ([Arg UniType], [Arg Id]))
getArgLists :: CoreExpr Id Id -> ([Arg UniType], [Arg Id])
getSATInfo :: Id -> SplitUniqSupply -> UniqFM ([Arg UniType], [Arg Id]) -> (Labda ([Arg UniType], [Arg Id]), UniqFM ([Arg UniType], [Arg Id]))
initSAT :: (SplitUniqSupply -> UniqFM ([Arg UniType], [Arg Id]) -> (a, UniqFM ([Arg UniType], [Arg Id]))) -> SplitUniqSupply -> a
insSAEnv :: Id -> ([Arg UniType], [Arg Id]) -> SplitUniqSupply -> UniqFM ([Arg UniType], [Arg Id]) -> ((), UniqFM ([Arg UniType], [Arg Id]))
isStatic :: Arg a -> Bool
mapSAT :: (a -> SplitUniqSupply -> c -> (b, c)) -> [a] -> SplitUniqSupply -> c -> ([b], c)
newSATName :: Id -> UniType -> SplitUniqSupply -> UniqFM ([Arg UniType], [Arg Id]) -> (Id, UniqFM ([Arg UniType], [Arg Id]))
returnSAT :: b -> a -> c -> (b, c)
saTransform :: Id -> CoreExpr Id Id -> SplitUniqSupply -> UniqFM ([Arg UniType], [Arg Id]) -> (CoreBinding Id Id, UniqFM ([Arg UniType], [Arg Id]))
thenSAT :: (SplitUniqSupply -> c -> (a, b)) -> (a -> SplitUniqSupply -> b -> d) -> SplitUniqSupply -> c -> d
thenSAT_ :: (SplitUniqSupply -> c -> (a, b)) -> (SplitUniqSupply -> b -> d) -> SplitUniqSupply -> c -> d
updSAEnv :: Labda (Id, ([Arg UniType], [Arg Id])) -> SplitUniqSupply -> UniqFM ([Arg UniType], [Arg Id]) -> ((), UniqFM ([Arg UniType], [Arg Id]))
instance Eq a => Eq (Arg a)

