{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface MagicUFs where
import BasicLit(BasicLit)
import CoreSyn(CoreArg, CoreAtom, CoreBinding, CoreCaseAlternatives, CoreExpr)
import CostCentre(CostCentre)
import Id(Id)
import Maybes(Labda)
import PlainCore(PlainCoreArg(..), PlainCoreAtom(..), PlainCoreExpr(..))
import PreludePS(_PackedString)
import PrimOps(PrimOp)
import SimplEnv(SimplEnv)
import SimplMonad(SimplCount, SmplM(..), TickType)
import SplitUniq(SplitUniqSupply)
import TyVar(TyVar)
import UniType(UniType)
data CoreArg a 
data CoreAtom a 
data CoreExpr a b 
data Id 
data Labda a 
data MagicUnfoldingFun 
type PlainCoreArg = CoreArg Id
type PlainCoreAtom = CoreAtom Id
type PlainCoreExpr = CoreExpr Id Id
data SimplEnv 
data SimplCount 
type SmplM a = SplitUniqSupply -> SimplCount -> (a, SimplCount)
data TickType 
data SplitUniqSupply 
data UniType 
applyMagicUnfoldingFun :: MagicUnfoldingFun -> SimplEnv -> [CoreArg Id] -> SplitUniqSupply -> SimplCount -> (Labda (CoreExpr Id Id), SimplCount)
mkMagicUnfoldingFun :: _PackedString -> MagicUnfoldingFun

