{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface ProtoName where
import Maybes(Labda)
import Name(Name)
import Outputable(NamedThing, Outputable)
import PreludePS(_PackedString)
data Labda a 
data Name 
data ProtoName   = Unk _PackedString | Imp _PackedString _PackedString [_PackedString] _PackedString | Prel Name
cmpByLocalName :: ProtoName -> ProtoName -> Int#
cmpProtoName :: ProtoName -> ProtoName -> Int#
elemByLocalNames :: ProtoName -> [ProtoName] -> Bool
elemProtoNames :: ProtoName -> [ProtoName] -> Bool
eqByLocalName :: ProtoName -> ProtoName -> Bool
eqProtoName :: ProtoName -> ProtoName -> Bool
isConopPN :: ProtoName -> Bool
mkPreludeProtoName :: Name -> ProtoName
instance NamedThing ProtoName
instance Outputable ProtoName

