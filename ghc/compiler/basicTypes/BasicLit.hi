{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface BasicLit where
import Outputable(Outputable)
import PreludePS(_PackedString)
import PreludeRatio(Ratio(..))
import Pretty(PprStyle)
import PrimKind(PrimKind)
import UniType(UniType)
data BasicLit   = MachChar Char | MachStr _PackedString | MachAddr Integer | MachInt Integer Bool | MachFloat (Ratio Integer) | MachDouble (Ratio Integer) | MachLitLit _PackedString PrimKind | NoRepStr _PackedString | NoRepInteger Integer | NoRepRational (Ratio Integer)
data PrimKind 
data UniType 
isLitLitLit :: BasicLit -> Bool
isNoRepLit :: BasicLit -> Bool
kindOfBasicLit :: BasicLit -> PrimKind
mkMachInt :: Integer -> BasicLit
mkMachWord :: Integer -> BasicLit
showBasicLit :: PprStyle -> BasicLit -> [Char]
typeOfBasicLit :: BasicLit -> UniType
instance Eq BasicLit
instance Ord BasicLit
instance Outputable BasicLit

