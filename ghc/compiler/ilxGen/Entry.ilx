.assembly test { }
// ENTRYPOINT
.class MainMain { 
   .method public static void Main(class [mscorlib]System.String[]) {
       .entrypoint
           ldstr "LOG: loading main value\n"   call void [mscorlib]System.Console::WriteLine(class [mscorlib]System.String)
      ldsfld (func ( /* unit skipped */ ) --> class [ilx std]'()') class Main::'Main_main'

           ldstr "LOG: evaluating main value\n"
           call void [mscorlib]System.Console::WriteLine(class [mscorlib]System.String) 
      callfunc () --> (func ( /* unit skipped */ ) --> class [ilx std]PrelBase_Z0T)
           ldstr "LOG: calling main value\n"
           call void [mscorlib]System.Console::WriteLine(class [mscorlib]System.String) 
      // ldunit
      callfunc ( /* unit skipped */ ) --> class [ilx std]PrelBase_Z0T

      pop


// HACK HACK HACK
// Call the "finalizers" for stdin, stdout and stderr, because COM+ doesn't 
// guarantee that finalizers will be run. WE DON'T GUARANTEE TO RUN ANY
// OTHER FINALIZERS...

      ldstr "LOG: calling critical finalizers manually in main()\n"
           call void [mscorlib]System.Console::WriteLine(class [mscorlib]System.String)

ldsfld thunk<(func (thunk<class [ilx std]PrelIOBase_MVar<class [ilx std]PrelIOBase_Handlezuzu>>) --> (func (/* unit skipped */) --> class [ilx std]PrelBase_Z0T))>  [ilx std]'PrelHandle'::'PrelHandle_stdHandleFinalizzer'
ldsfld thunk<class [ilx std]PrelIOBase_MVar<class [ilx std]PrelIOBase_Handle__>>  [ilx std]'PrelHandle'::'PrelHandle_stdin'
      callfunc (thunk<class [ilx std]PrelIOBase_MVar<class [ilx std]PrelIOBase_Handle__>>) --> (func ( /* unit skipped */ ) -->  class [ilx std]PrelBase_Z0T)
      callfunc ( /* unit skipped */ ) --> class [ilx std]PrelBase_Z0T
      pop

ldsfld thunk<(func (thunk<class [ilx std]PrelIOBase_MVar<class [ilx std]PrelIOBase_Handlezuzu>>) --> (func (/* unit skipped */) --> class [ilx std]PrelBase_Z0T))>  [ilx std]'PrelHandle'::'PrelHandle_stdHandleFinalizzer'
ldsfld thunk<class [ilx std]PrelIOBase_MVar<class [ilx std]PrelIOBase_Handle__>>  [ilx std]'PrelHandle'::'PrelHandle_stdout'
      callfunc (thunk<class [ilx std]PrelIOBase_MVar<class [ilx std]PrelIOBase_Handle__>>) --> (func ( /* unit skipped */ ) -->  class [ilx std]PrelBase_Z0T)
      callfunc ( /* unit skipped */ ) --> class [ilx std]PrelBase_Z0T
      pop

ldsfld thunk<(func (thunk<class [ilx std]PrelIOBase_MVar<class [ilx std]PrelIOBase_Handlezuzu>>) --> (func (/* unit skipped */) --> class [ilx std]PrelBase_Z0T))>  [ilx std]'PrelHandle'::'PrelHandle_stdHandleFinalizzer'
ldsfld thunk<class [ilx std]PrelIOBase_MVar<class [ilx std]PrelIOBase_Handle__>>  [ilx std]'PrelHandle'::'PrelHandle_stderr'
      callfunc (thunk<class [ilx std]PrelIOBase_MVar<class [ilx std]PrelIOBase_Handle__>>) --> (func ( /* unit skipped */ ) -->  class [ilx std]PrelBase_Z0T)
      callfunc ( /* unit skipped */ ) --> class [ilx std]PrelBase_Z0T
      pop

      ldstr "LOG: exit main()\n"
           call void [mscorlib]System.Console::WriteLine(class [mscorlib]System.String)
      ret
   }
}

