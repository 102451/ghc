{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface Outputable where
import CharSeq(CSeq)
import CmdLineOpts(GlobalSwitch)
import PreludePS(_PackedString)
import Pretty(Delay, PprStyle(..), Pretty(..), PrettyRep)
import SrcLoc(SrcLoc)
import UniType(UniType)
import Unique(Unique)
class NamedThing a where
	getExportFlag :: a -> ExportFlag
	isLocallyDefined :: a -> Bool
	getOrigName :: a -> (_PackedString, _PackedString)
	getOccurrenceName :: a -> _PackedString
	getInformingModules :: a -> [_PackedString]
	getSrcLoc :: a -> SrcLoc
	getTheUnique :: a -> Unique
	hasType :: a -> Bool
	getType :: a -> UniType
	fromPreludeCore :: a -> Bool
class Outputable a where
	ppr :: PprStyle -> a -> Int -> Bool -> PrettyRep
data ExportFlag   = ExportAll | ExportAbs | NotExported
data GlobalSwitch 
data PprStyle   = PprForUser | PprDebug | PprShowAll | PprInterface (GlobalSwitch -> Bool) | PprForC (GlobalSwitch -> Bool) | PprUnfolding (GlobalSwitch -> Bool) | PprForAsm (GlobalSwitch -> Bool) Bool ([Char] -> [Char])
type Pretty = Int -> Bool -> PrettyRep
data PrettyRep 
data SrcLoc 
data UniType 
data Unique 
getLocalName :: NamedThing a => a -> _PackedString
ifPprDebug :: PprStyle -> (Int -> Bool -> PrettyRep) -> Int -> Bool -> PrettyRep
ifPprInterface :: PprStyle -> (Int -> Bool -> PrettyRep) -> Int -> Bool -> PrettyRep
ifPprShowAll :: PprStyle -> (Int -> Bool -> PrettyRep) -> Int -> Bool -> PrettyRep
ifnotPprForUser :: PprStyle -> (Int -> Bool -> PrettyRep) -> Int -> Bool -> PrettyRep
ifnotPprShowAll :: PprStyle -> (Int -> Bool -> PrettyRep) -> Int -> Bool -> PrettyRep
interpp'SP :: Outputable a => PprStyle -> [a] -> Int -> Bool -> PrettyRep
interppSP :: Outputable a => PprStyle -> [a] -> Int -> Bool -> PrettyRep
isAconop :: _PackedString -> Bool
isAvarid :: _PackedString -> Bool
isAvarop :: _PackedString -> Bool
isConop :: _PackedString -> Bool
isExported :: NamedThing a => a -> Bool
isOpLexeme :: NamedThing a => a -> Bool
ltLexical :: (NamedThing a, NamedThing b) => a -> b -> Bool
pprNonOp :: (NamedThing a, Outputable a) => PprStyle -> a -> Int -> Bool -> PrettyRep
pprOp :: (NamedThing a, Outputable a) => PprStyle -> a -> Int -> Bool -> PrettyRep
instance (Outputable a, Outputable b) => Outputable (a, b)
instance (Outputable a, Outputable b, Outputable c) => Outputable (a, b, c)
instance Outputable Bool
instance Outputable a => Outputable [a]

