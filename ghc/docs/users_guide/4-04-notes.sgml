<Sect1 id="release-4-04">
<Title>Release notes for version&nbsp;4.04&mdash;7/99
</Title>

<Para>

<ItemizedList>
<ListItem>

<Para>
<Literal>Weak</Literal> library changes:

<ItemizedList>
<ListItem>
<Para>
Finalise is now spelt finalize in all function names.
</Para>
</ListItem>

<ListItem>
<Para>
<Literal>finalize</Literal> now runs the finalizer immediately, and
waits for it to complete before returning.
</Para>
</ListItem>

<ListItem>
<Para>
<Literal>mkWeak</Literal> now takes a <Literal>Maybe (IO ())</Literal> for the finalizer,
and <Literal>mkWeakNoFinalizer</Literal> is removed.
</Para>
</ListItem>

<ListItem>
<Para>
A weak pointer whose key is itself a weak pointer will now do the right
thing.
</Para>
</ListItem>

</ItemizedList>
</Para>
</ListItem>

<ListItem>
<Para>
Changed representation of <Literal>Integer</Literal> type to speed up
computations on small integers.  The performance of <Literal>Integer</Literal> is now
only slightly slower than <Literal>Int</Literal> for values between <Literal>minBound::Int</Literal>
and <Literal>maxBound::Int</Literal>.
</Para>
</ListItem>

<ListItem>
<Para>
On Win32 platforms, added support for using (and producing) dynamic
link libraries (DLLs) containing ghc-compiled code.
</Para>
</ListItem>

<ListItem>
<Para>
Added <Literal>-funbox-strict-fields</Literal> for unboxing/unpacking strict
constructor fields.
</Para>
</ListItem>

<ListItem>
<Para>
GHC now has a license!  Check out <Literal>fptools/ghc/LICENSE/</Literal>.
</Para>
</ListItem>

<ListItem>
<Para>
Added CPR analysis, which reduces allocation by unboxing function results
(thanks to Kevin Glynn <Literal>&lt;keving@cs.mu.OZ.AU&gt;</Literal>).
</Para>
</ListItem>

<ListItem>
<Para>
UsageSP analysis added, but not yet functional.
</Para>
</ListItem>

<ListItem>
<Para>
Added a simple common sub-expression analysis pass.
</Para>
</ListItem>

<ListItem>
<Para>
Implemented update-in-place for certain very restricted cases.
</Para>
</ListItem>

<ListItem>
<Para>
Replaced GHC's old and worn yacc/lex parser with a new one based on Happy. 
Fixed several Haskell 98 non-conformance issues in the process.
</Para>
</ListItem>

<ListItem>
<Para>
Added <Literal>Concurrent.yield :: IO ()</Literal>.
</Para>
</ListItem>

<ListItem>
<Para>
Added RULES pragms&mdash;transformation rules for Haskell source.
This is used for list fusion: now intermediate lists between map,
foldr, list comprehensions are removed automatically.
</Para>
</ListItem>

<ListItem>
<Para>
Unregisterised/unmangled builds now work.
</Para>
</ListItem>

<ListItem>
<Para>
Much performance tuning: GHC 4.04 produces faster code than all previous
compilers.
</Para>
</ListItem>

<ListItem>
<Para>
GHC now defines <Literal>&lowbar;&lowbar;HASKELL98&lowbar;&lowbar;</Literal> when compiling files with <Literal>-cpp</Literal>.
</Para>
</ListItem>

<ListItem>
<Para>
<Literal>hppa1.1-hp-hpux</Literal> port reinstated.
</Para>
</ListItem>

<ListItem>
<Para>
New operations for unsafely thawing byte arrays:
<Literal>unsafeThaw&lcub;Byte,ST,IO&rcub;Array</Literal>.
</Para>
</ListItem>

<ListItem>
<Para>
<Literal>mkdependHS</Literal> now lives in GHC's lib directory, not the
binary directory.  It isn't intended to be run standalone, only via
<Literal>ghc -M</Literal>.
</Para>
</ListItem>

<ListItem>
<Para>
Asynchronous exceptions are now supported (see <XRef LinkEnd="concurrent-interface">).  New operations:

<ItemizedList>

<ListItem>
<Para>
<Literal>Exception.killThread</Literal> now raises an exception 
(<Literal>AsyncException.KilledThread</Literal>) in the killed thread.
</Para>
</ListItem>

<ListItem>
<Para>
<Literal>Exception.raiseInThread</Literal> allows a thread to raise an
exception in another thread.
</Para>
</ListItem>

<ListItem>
<Para>
<Literal>Concurrent.myThreadId</Literal> returns the <Literal>ThreadId</Literal> of the calling thread.
</Para>
</ListItem>

<ListItem>
<Para>
Stack overflow results in <Literal>AsyncException.StackOverflow</Literal>
being raised in the offending thread.
</Para>
</ListItem>

</ItemizedList>

</Para>
</ListItem>

<ListItem>
<Para>
Assertion failures now raise an <Literal>AssertionFailed</Literal> exception.
</Para>
</ListItem>

<ListItem>
<Para>
Added simple high-level interface to the Regex library, see <XRef LinkEnd="RegexString">.
</Para>
</ListItem>

<ListItem>
<Para>
<Literal>forkIO</Literal> now handles any uncaught exceptions cleanly.
</Para>
</ListItem>

<ListItem>
<Para>
<Literal>integer2Int&num;</Literal> isn't sign preserving any longer, but modulo <Literal>(maxBound::Int + 1) * 2</Literal>.
</Para>
</ListItem>

<ListItem>
<Para>
<Literal>-ddump-rdr</Literal> is now called <Literal>-ddump-parsed</Literal>.
</Para>
</ListItem>

<ListItem>
<Para>
Signal handling with the <Literal>Posix</Literal> library now works.
</Para>
</ListItem>

<ListItem>
<Para>
Many, many bugs fixed.
</Para>
</ListItem>

</ItemizedList>
</Para>

</Sect1>
